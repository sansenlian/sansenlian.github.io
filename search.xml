<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>需求实现</title>
      <link href="/2019/08/18/xu-qiu-shi-xian/"/>
      <url>/2019/08/18/xu-qiu-shi-xian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="62a31500"></a></p><h3 id="鼠标悬浮显示下拉菜单"><a href="#鼠标悬浮显示下拉菜单" class="headerlink" title="鼠标悬浮显示下拉菜单"></a>鼠标悬浮显示下拉菜单</h3><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190803211318.gif#alt=" alt></p><p><a href="http://jsrun.pro/HNbKp" target="_blank" rel="noopener">代码地址</a></p><p><a href></a><a name="b3d0036a"></a></p><h3 id="搜索显示历史搜索记录"><a href="#搜索显示历史搜索记录" class="headerlink" title="搜索显示历史搜索记录"></a>搜索显示历史搜索记录</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络问题</title>
      <link href="/2019/08/18/wang-luo-wen-ti/"/>
      <url>/2019/08/18/wang-luo-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="4f03b79e"></a></p><h3 id="http状态码和含义"><a href="#http状态码和含义" class="headerlink" title="http状态码和含义"></a>http状态码和含义</h3><p><code>1xx</code></p><p>100continue表示<code>继续</code>，一般在发送post请求的时候，发送了http header后服务端会返回这个消息</p><hr><p><code>2xx</code></p><ul><li>200 OK：正常返回信息， 即返回的数据为全量的数据，如果文件不通过GZIP压缩的话，文件是多大，则要有多大传输量。</li><li>201 Created：请求成功并<code>创建了新的资源</code></li><li>202 Accept：服务器接受了请求但<code>还没处理</code></li></ul><hr><p><code>3xx</code></p><ul><li>301：网页已永久性移动到新位置</li><li>302 Found：<code>临时重定向</code>，只是找到了新地址但是没有跳转</li><li>303 See Other：<code>临时重定向</code>，使用get请求新的url</li><li>304 Not Modified：自从上次请求后网站资源没有更新过<br><br>如果客户端发送了一个带条件的GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。</li></ul><hr><p><code>4xx 客户端错误</code></p><ul><li>400 bad request：请求<code>格式不对</code>，服务器无法解析,<code>请求无效</code><blockquote><p>前端提交数据的字段名称和字段类型与后台的实体没有保持一致</p></blockquote></li></ul><blockquote><p>前端提交到后台的数据应该是json字符串类型，但是前端没有将对象JSON.stringify转化成字符串。</p></blockquote><blockquote><p>解决方法：</p></blockquote><blockquote><p>对照字段的名称，保持一致性</p></blockquote><blockquote><p>将obj对象通过JSON.stringify实现序列化</p></blockquote><ul><li><p>401 请求<code>未授权</code>, 当前请求需要用户验证</p></li><li><p>403 Forbidden <code>禁止访问</code>, 服务器已经得到请求，但是拒绝执行</p></li><li><p>404 <code>未找到与URL匹配的资源</code></p></li></ul><hr><p><code>5xx 服务器错误</code></p><ul><li>500 网络服务错误，最常见的服务器错误</li><li>501　　服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502    这是服务器上的一个错误网关</li><li>503 服务器暂时无法访问，可能过载或维护</li><li>504   这是代表着网关超时是现象出现了。</li><li>505   http的版本是不受支持的</li></ul><p><a href></a><a name="5ef23013"></a></p><h3 id="http请求的几种方法和用途"><a href="#http请求的几种方法和用途" class="headerlink" title="http请求的几种方法和用途"></a>http请求的几种方法和用途</h3><ul><li><p>GET和POST</p></li><li><p>PUT和post有点像，但是是指定了资源要在服务器存储的位置，post没有</p></li><li><p>head只请求头部</p><blockquote><p>Head请求有以下特点：</p></blockquote></li></ul><blockquote><p><code>只请求资源的首部，</code></p></blockquote><blockquote><p><code>检查超链接的有效性</code></p></blockquote><blockquote><p><code>检查网页是否被修改</code></p></blockquote><blockquote><p><code>用于自动搜索机器人获取网页的标志信息，获取rss种子信息，或者传递安全认证信息等</code></p></blockquote><ul><li><p>delete删除服务器上的某资源</p></li><li><p>option表示url所支持的方法，方法包含在一个allow头里面</p></li><li><p>trace用于激发一个远程应用层消息回路</p></li><li><p>connect把请求连接到透明的tcp/ip通道</p></li></ul><p><a href></a><a name="3736167a"></a></p><h3 id="http和https有什么区别"><a href="#http和https有什么区别" class="headerlink" title="http和https有什么区别"></a>http和https有什么区别</h3><p>https的SSL加密是在传输层实现的</p><blockquote><p>一般情况下我们网站用https, 但是像图片媒体文件之类的就直接挂http</p></blockquote><p><a href></a><a name="385e434d"></a></p><h3 id="http和https的基本概念"><a href="#http和https的基本概念" class="headerlink" title="http和https的基本概念"></a>http和https的基本概念</h3><p>http: 超文本传输协议，用的是TCP标准</p><p>https: 简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>https协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。</p><p><a href></a><a name="9cb05495"></a></p><h3 id="http和https的区别？"><a href="#http和https的区别？" class="headerlink" title="http和https的区别？"></a>http和https的区别？</h3><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。<br><br>主要的区别如下：</p><p><code>Https协议需要ca证书，费用较高。</code></p><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443</p><p><code>http的连接很简单，是无状态的</code>；<code>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议</code>，比http协议安全。</p><p><a href></a><a name="e9261797"></a></p><h3 id="https协议的工作原理"><a href="#https协议的工作原理" class="headerlink" title="https协议的工作原理"></a>https协议的工作原理</h3><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p><ol><li><p>客户使用https url访问服务器，则<code>要求web 服务器建立ssl链接。</code></p></li><li><p>web服务器接收到客户端的请求之后，<code>会将网站的证书（证书中包含了公钥），返回或者说传输给客户端</code>。</p></li><li><p>客户端和web服务器端开始<code>协商SSL链接的安全等级</code>，也就是加密等级。 客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</p></li><li><p><code>web服务器通过自己的私钥解密出会话密钥</code>。</p></li><li><p>web服务器通过会话密钥加密与客户端之间的通信。</p></li></ol><p><code>优点</code></p><p>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p><code>缺点</code></p><p>https握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电。</p><p>https缓存不如http高效，会增加数据开销。</p><p><code>SSL证书也需要钱，功能越强大的证书费用越高。</code></p><p><code>SSL证书需要绑定IP，不能再同一个ip上绑定多个域名，ipv4资源支持不了这种消耗。</code></p><p><a href></a><a name="889243e2"></a></p><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><p><code>TCP的优点：</code> 可靠，稳定 TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源。</p><p><code>TCP的缺点：</code> 慢，效率低，占用系统资源高，易被攻击 TCP在传递数据之前，要先建连接，这会消耗时间，而且在数据传递时，确认机制、重传机制、拥塞控制机制等都会消耗大量的时间，而且要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的CPU、内存等硬件资源。 而且，因为TCP有确认机制、三次握手机制，这些也导致TCP容易被人利用，实现DOS、DDOS、CC等攻击。<br><br><code>UDP的优点：</code> 快，比TCP稍安全 UDP没有TCP的握手、确认、窗口、重传、拥塞控制等机制，UDP是一个无状态的传输协议，所以它在传递数据时非常快。没有TCP的这些机制，UDP较TCP被攻击者利用的漏洞就要少一些。但UDP也是无法避免攻击的，比如：UDP Flood攻击……</p><p><code>UDP的缺点：</code>不可靠，不稳定 因为UDP没有TCP那些可靠的机制，在数据传递时，如果网络质量不好，就会很容易丢包。</p><p><code>什么时候应该使用TCP：</code>当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。 在日常生活中，常见使用TCP协议的应用如下： 浏览器，用的HTTP FlashFXP，用的FTP Outlook，用的POP、SMTP Putty，用的Telnet、SSH QQ文件传输</p><p><code>什么时候应该使用UDP：</code>当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。 比如，日常生活中，常见使用UDP协议的应用如下： QQ语音 QQ视频 TFTP<br><br><code>TCP与UDP区别总结：</code><br><br>1、<code>TCP面向连接</code>（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br><br>2、<code>TCP提供可靠的服务</code>。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付<br><br>3、<code>TCP面向字节流</code>，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br><br>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br><br>4、<code>每一条TCP连接只能是点到点的</code>;UDP支持一对一，一对多，多对一和多对多的交互通信<br><br>5、<code>TCP首部开销20字节;UDP的首部开销小，只有8个字节</code><br><br>6、<code>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</code></p><p><a href></a><a name="c94a9db5"></a></p><h3 id="三次握手和四次分手"><a href="#三次握手和四次分手" class="headerlink" title="三次握手和四次分手"></a>三次握手和四次分手</h3><p>三次握手</p><ol><li>a: 我要连接你</li><li>b: 好的我准备好了</li><li>a: 我来啦</li></ol><hr><p>四次分手</p><p>a: 我要分手</p><p>b: 等一下,我打完这盘游戏下</p><p>b: 我打完了, 你刚才说什么</p><p>a: 直接分了,走人</p><p><a href></a><a name="6ddb1de2"></a></p><h3 id="WebSocket的实现和应用"><a href="#WebSocket的实现和应用" class="headerlink" title="WebSocket的实现和应用"></a>WebSocket的实现和应用</h3><p><code>什么是WebSocket?</code></p><blockquote><p>WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。</p></blockquote><blockquote><p>Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个</p></blockquote><p>WebSocket是什么样的协议，具体有什么优点？</p><blockquote><p>HTTP的生命周期通过Request来界定，也就是Request一个Response，那么在Http1.0协议中，这次Http请求就结束了。</p></blockquote><blockquote><p>在Http1.1中进行了改进，是的有一个connection：Keep-alive，也就是说，在一个Http连接中，可以发送多个Request，接收多个Response。</p></blockquote><blockquote><p>但是必须记住，在Http中一个Request只能对应有一个Response，而且这个Response是被动的，不能主动发起。</p></blockquote><p>WebSocket是基于Http协议的，或者说<code>借用了Http协议来完成一部分握手</code>，在<code>握手阶段与Http是相同的</code></p><p>基本请求如下：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4v4bttz0jj30qm0ledjd.jpg#alt=image-20190710223606515" alt></p><p><code>WebSocket的诞生本质上就是为了解决HTTP协议本身的单向性问题</code>：请求必须由客户端向服务端发起，然后服务端进行响应。这个Request-Response的关系是无法改变的。对于一般的网页浏览和访问当然没问题，<code>一旦我们需要服务端主动向客户端发送消息时就麻烦了</code>，<code>因为此前的TCP连接已经释放，根本找不到客户端在哪</code>。</p><p>但并不是用它取代HTTP，而是取代了原先用于通信的基于TCP的Socket。<br><br><code>优点是：</code><br><br>原先在Socket连接后还要进行一些复杂的身份验证，同时要阻止未验证的连接发送控制指令。现在不需要了，<code>在建立WebSocket连接的url里就能携带身份验证参数，验证不通过可以直接拒绝，不用设置状态；</code></p><p>原先要自己定义Socket数据格式，设置长度与标志，处理粘包、分包等问题，现在WebSocket收到的直接就是完整的数据包，完全不用自己处理；</p><p><code>前端的nginx可以直接进行转发与负载均衡，部署简单多了</code></p><p><a href></a><a name="df6154fc"></a></p><h3 id="说一下http2-0"><a href="#说一下http2-0" class="headerlink" title="说一下http2.0"></a>说一下http2.0</h3><p>基于https</p><p><code>提升访问速度</code>（可以对于，请求资源所需时间更少，访问速度更快，相比http1.0）</p><p><code>允许多路复用</code>：多路复用<code>允许同时通过单一的HTTP/2连接发送多重请求-响应信息</code>。改善了：在http1.1中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞。</p><p><code>二进制分帧</code>：HTTP2.0会将所有的传输信息分割为更小的信息或者帧，并对他们进行二进制编码</p><p><code>首部压缩</code></p><p><code>服务器端推送</code></p><hr><p>http2.0的特性如下：</p><p><code>1、内容安全</code>，应为http2.0是基于https的，天然具有安全特性，通过http2.0的特性可以避免单纯使用https的性能下降</p><p><code>2、二进制格式</code>，http1.X的解析是基于文本的，http2.0将所有的传输信息分割为更小的消息和帧，并对他们采用二进制格式编码，基于二进制可以让协议有更多的扩展性，比如引入了帧来传输数据和指令</p><p><code>3、多路复用</code>，这个功能相当于是长连接的增强，每个request请求可以随机的混杂在一起，接收方可以根据request的id将request再归属到各自不同的服务端请求里面，另外多路复用中也支持了流的优先级，允许客户端告诉服务器那些内容是更<code>优先级的资源</code>，可以优先传输，</p><p><a href></a><a name="dcf869d8"></a></p><h3 id="http常用请求头"><a href="#http常用请求头" class="headerlink" title="http常用请求头"></a>http常用请求头</h3><table><thead><tr><th>协议头</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>可接受的响应内容类型（Content-Types）。</td></tr><tr><td>Accept-Charset</td><td>可接受的字符集</td></tr><tr><td>Accept-Encoding</td><td>可接受的响应内容的编码方式。</td></tr><tr><td>Accept-Language</td><td>可接受的响应内容语言列表。</td></tr><tr><td>Accept-Datetime</td><td>可接受的按照时间来表示的响应内容版本</td></tr><tr><td>Authorization</td><td>用于表示HTTP协议中需要认证资源的认证信息</td></tr><tr><td>Cache-Control</td><td>用来指定当前的请求/回复中的，是否使用缓存机制。</td></tr><tr><td>Connection</td><td>客户端（浏览器）想要优先使用的连接类型</td></tr><tr><td>Cookie</td><td>由之前服务器通过Set-Cookie（见下文）设置的一个HTTP协议Cookie</td></tr><tr><td>Content-Length</td><td>以8进制表示的请求体的长度</td></tr><tr><td>Content-MD5</td><td>请求体的内容的二进制 MD5 散列值（数字签名），以 Base64 编码的结果</td></tr><tr><td>Content-Type</td><td>请求体的MIME类型 （用于POST和PUT请求中）</td></tr><tr><td>Date</td><td>发送该消息的日期和时间（以<a href="https://www.nowcoder.com/tutorial/96/24304825a0c04ea9a53cdb09cb664834#section-7.1.1.1" target="_blank" rel="noopener">RFC 7231</a>中定义的”HTTP日期”格式来发送）</td></tr><tr><td>Expect</td><td>表示客户端要求服务器做出特定的行为</td></tr><tr><td>From</td><td>发起此请求的用户的邮件地址</td></tr><tr><td>Host</td><td>表示服务器的域名以及服务器所监听的端口号。如果所请求的端口是对应的服务的标准端口（80），则端口号可以省略。</td></tr><tr><td>If-Match</td><td>仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要用于像 PUT 这样的方法中，仅当从用户上次更新某个资源后，该资源未被修改的情况下，才更新该资源。</td></tr><tr><td>If-Modified-Since</td><td>允许在对应的资源未被修改的情况下返回304未修改</td></tr><tr><td>If-None-Match</td><td>允许在对应的内容未被修改的情况下返回304未修改（ 304 Not Modified ），参考 超文本传输协议 的实体标记</td></tr><tr><td>If-Range</td><td>如果该实体未被修改过，则向返回所缺少的那一个或多个部分。否则，返回整个新的实体</td></tr><tr><td>If-Unmodified-Since</td><td>仅当该实体自某个特定时间以来未被修改的情况下，才发送回应。</td></tr><tr><td>Max-Forwards</td><td>限制该消息可被代理及网关转发的次数。</td></tr><tr><td>Origin</td><td>发起一个针对<a href="http://itbilu.com/javascript/js/VkiXuUcC.html" target="_blank" rel="noopener">跨域资源共享</a>的请求（该请求要求服务器在响应中加入一个Access-Control-Allow-Origin的消息头，表示访问控制所允许的来源）。</td></tr><tr><td>Pragma</td><td>与具体的实现相关，这些字段可能在请求/回应链中的任何时候产生。</td></tr><tr><td>Proxy-Authorization</td><td>用于向代理进行认证的认证信息。</td></tr><tr><td>Range</td><td>表示请求某个实体的一部分，字节偏移以0开始。</td></tr><tr><td>Referer</td><td>表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏览器带到了当前页面。Referer其实是Referrer这个单词，但RFC制作标准时给拼错了，后来也就将错就错使用Referer了。</td></tr><tr><td>TE</td><td>浏览器预期接受的传输时的编码方式：可使用回应协议头Transfer-Encoding中的值（还可以使用”trailers”表示数据传输时的分块方式）用来表示浏览器希望在最后一个大小为0的块之后还接收到一些额外的字段。</td></tr><tr><td>User-Agent</td><td>浏览器的身份标识字符串</td></tr><tr><td>Upgrade</td><td>要求服务器升级到一个高版本协议。</td></tr><tr><td>Via</td><td>告诉服务器，这个请求是由哪些代理发出的。</td></tr><tr><td>Warning</td><td>一个一般性的警告，表示在实体内容体中可能存在错误。</td></tr></tbody></table><p><a href></a><a name="29335508"></a></p><h3 id="http缓存机制"><a href="#http缓存机制" class="headerlink" title="http缓存机制"></a>http缓存机制</h3><p>HTTP缓存即是浏览器第一次想一个服务器发起HTTP请求后，服务器会返回请求的资源，并且在响应头中添加一些有关缓存的字段如：</p><p>cache-control，expires,last-modifed，ETag,Date，等，之后浏览器再向该服务器请求资源就可以视情况使用强缓存和协商缓存</p><p><code>强缓存：浏览器直接从本地缓存中获取数据，不与服务器进行交互</code></p><p><code>协商缓存：浏览器发送请求到服务器，服务器判断是否可使用本地缓存</code><br><br><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g56oswgmb2j30qc0hvn01.jpg#alt=" alt></p><p><a href></a><a name="e2af21c9"></a></p><h3 id="怎么生成token-怎么传递"><a href="#怎么生成token-怎么传递" class="headerlink" title="怎么生成token, 怎么传递"></a>怎么生成token, 怎么传递</h3><p>第一个<code>token是针对接口的</code>（api_token）；<br><br>第二个<code>token是针对用户的</code>（user_token）；</p><p><code>先说第一个token（api_token）</code><br><br>它的职责是保持接口访问的隐蔽性和有效性，<code>保证接口只能给自家人用</code></p><ol><li>获取GET参数值</li><li>根据客户端传过来的client_id，查询数据库，获取对应的client_secret。</li><li>服务器重新生成一份api_token</li><li>客户端传过来的api_token与服务器生成的api_token进行校对，如果不相等，则表示验证失败。</li><li>验证通过，返回数据到客户端。</li></ol><p><code>再说第二个token（user_token）</code></p><p>它的职责是保护用户的用户名及密码多次提交，以防密码泄露。<br><br>如果接口需要用户登录，其访问流程如下：<br><br>1、用户提交“用户名”和“密码”，实现登录（条件允许，这一步最好走https）；<br><br>2、登录成功后，服务端返回一个 user_token</p><p><a href></a><a name="7d4ec231"></a></p><h3 id="说下http1-1有什么不同"><a href="#说下http1-1有什么不同" class="headerlink" title="说下http1.1有什么不同"></a>说下http1.1有什么不同</h3><p><code>1、HTTP 1.1支持长连接</code>（PersistentConnection）和请求的流水线（Pipelining）处理</p><p><code>在1.0时的会话方式：</code></p><ol><li>建立连接</li><li>发出请求信息</li><li>回送响应信息</li><li>关掉连接</li></ol><p><code>HTTP 1.1的持续连接，也需要增加新的请求头来帮助实现，例如，Connection请求头的值为Keep-Alive</code>时，客户端通知服务器返回本次请求结果后保持连接；Connection请求头的值为close时，客户端通知服务器返回本次请求结果后关闭连接。HTTP 1.1还提供了与身份认证、状态管理和Cache缓存等机制相关的请求头和响应头。</p><p><code>请求的流水线（Pipelining）处理</code>，在一个TCP连接<code>上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟</code>。例如：一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。  <code>HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求</code>，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容。</p><p><code>2.HTTP 1.1增加host字段</code></p><p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。</p><p>HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。此外，服务器应该接受以绝对路径标记的资源请求。</p><p><code>3、100(Continue) Status(节约带宽)</code></p><p><code>HTTP/1.1加入了一个新的状态码</code><br><br><code>100（Continue）</code>。客户端事先发送一个只带头域的请求，如果服务器因为权限拒绝了请求，就回送响应码<code>401（Unauthorized）</code>；如果服务器接收此请求就回送响应码100，客户端就可以继续发送带实体的完整请求了。100 (Continue) 状态代码的使用，允许客户端在发request消息body之前先用request header试探一下server，看server要不要接收request body，再决定要不要发request body。</p><p><code>4、HTTP/1.1中引入了Chunked</code>transfer-coding来解决上面这个问题，发送方将消息分割成若干个任意大小的数据块，每个数据块在发送时都会附上块的长度，最后用一个零长度的块作为消息结束的标志。这种方法允许发送方只缓冲消息的一个片段，避免缓冲整个消息带来的过载。</p><p><code>5、HTTP/1.1在1.0的基础上加入了一些cache的新特性</code>，当缓存对象的Age超过Expire时变为stale对象，<code>cache不需要直接抛弃stale对象，而是与源服务器进行重新激活（revalidation）。</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端综合知识要点</title>
      <link href="/2019/08/18/qian-duan-zong-he-zhi-shi-yao-dian/"/>
      <url>/2019/08/18/qian-duan-zong-he-zhi-shi-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="2591eeb7"></a></p><h3 id="前端SEO要注意哪些"><a href="#前端SEO要注意哪些" class="headerlink" title="前端SEO要注意哪些"></a>前端SEO要注意哪些</h3><ul><li>合理的标题，描述和关键字要强调重点</li><li>语义化html代码</li><li>最重要的html代码放在最前面</li><li>重要内容不要用js输出，爬虫不会去爬js获取内容</li><li>少用iframe</li><li>非装饰性图片要加alt，图片不加载的时候显示的文字</li><li>提高网站速度，这是一个重要指标</li></ul><p><a href></a><a name="aa8321f2"></a></p><h3 id="web中怎么实现会话跟踪"><a href="#web中怎么实现会话跟踪" class="headerlink" title="web中怎么实现会话跟踪"></a>web中怎么实现会话跟踪</h3><p>可以通过</p><ul><li>cookie</li><li>session</li><li>url重写</li><li>隐藏的input</li><li>ip地址</li></ul><p><a href></a><a name="0823f9b6"></a></p><h3 id="常见的web安全及防护原理"><a href="#常见的web安全及防护原理" class="headerlink" title="常见的web安全及防护原理"></a>常见的web安全及防护原理</h3><p>常见的web安全及防护原理</p><p><code>sql注入</code></p><p>通过sql命令插入到web表单中欺骗服务器</p><hr><p>解决:</p><ul><li>不要相信用户的输入, 都应该做验证</li><li>不要用动态拼接sql</li><li>不要用管理员权限进行数据库连接, 每个应用权限都是有限的</li><li>不要明文存放信息</li></ul><p><code>CSRF攻击</code></p><p>csrf是代替用户完成指定动作, 通过伪装来自受信任用户的请求来进行对受信任的网站一些操作</p><p>xss是其中的方法之一</p><p>例如利用本地cookie访问危险网站</p><hr><p>解决:</p><ul><li><p>通过在客户端页面增加伪随机数</p></li><li><p>进行验证</p></li></ul><hr><p><code>xss攻击</code></p><p>通过外部脚本攻击, 在页面内插入恶意html标签或者JavaScript代码, 用于窃听cookie</p><p>解决:</p><ul><li><p>进行标签过滤, 和关键字符过滤</p></li><li><p>任何内容写入到页面钱都应该进行encode</p></li></ul><p><a href></a><a name="797ac6d3"></a></p><h3 id="浏览器从url输入到显示页面的步骤"><a href="#浏览器从url输入到显示页面的步骤" class="headerlink" title="浏览器从url输入到显示页面的步骤"></a>浏览器从url输入到显示页面的步骤</h3><p>用户输入URL并回车，浏览器进程判断是搜索还是URL址址，是URL址址就通过IPC将URL发送给<code>网络进程</code>，网络进程查找<code>本地缓存</code>，如果没找到，进行DNS解析IP，端口请求是http发送的，利用IP和端口构建TCP连接，三次握手，发送HTTP请求，服务器响应并返回HTTP响应。如果有301，302则执行重定向相应流程。200则继续，判断Content-type如果<code>text/html</code>，浏览器进程准备<code>渲染进程</code>，<code>发送提交文档消息，让网络进程与渲染进程建立管道</code>，将内容提交给渲染进程，如果是同域建复用父进程的渲染进程。<code>渲染进程接收完毕</code>，向浏览器进程发送<code>确认文档</code>，浏览器<code>安全栏，前进，后退界面更新</code>，渲染进程渲染完后，向浏览器进程提交页面加载完毕。</p><p><a href></a><a name="539e1647"></a></p><h3 id="如何进行网站优化"><a href="#如何进行网站优化" class="headerlink" title="如何进行网站优化"></a>如何进行网站优化</h3><p><a href></a><a name="70d3abc9"></a></p><h4 id="js的性能优化有哪些"><a href="#js的性能优化有哪些" class="headerlink" title="js的性能优化有哪些"></a>js的性能优化有哪些</h4><ul><li><p>添加本地缓存</p></li><li><p>避免使用CSS表达式</p></li><li><p>减少DNS查询</p></li><li><p>使用外部javascript和CSS</p></li><li><p>避免重定向</p></li><li><p>图片lazyLoad</p></li><li><p>事件节流</p><blockquote><p>比如在textarea里面如果需要监听change事件，即keyup来监听事件</p></blockquote></li></ul><blockquote><p>可以通过加上settimeout来进行事件节流 就是不要一直都是实时监听，可以隔一段时间监听下</p></blockquote><ul><li><p>使用ssr后端渲染, 减少前端渲染时间，就是一次性输出html内容，不用频繁调用ajax</p></li><li><p>css放在前面， js放在后面</p></li></ul><p><a href></a><a name="ebfe2a87"></a></p><h4 id="服务器方面"><a href="#服务器方面" class="headerlink" title="服务器方面"></a>服务器方面</h4><p>使用CND加速，ETag配置，用Gzip压缩</p><p><a href></a><a name="b901e650"></a></p><h4 id="内容方面"><a href="#内容方面" class="headerlink" title="内容方面"></a>内容方面</h4><ol><li>减少http请求， 包括图像使用css雪碧图，合并文件之类的</li><li>减少dns查询，用dns缓存</li><li>减少DOM数量</li><li>减小cookies的大小</li><li>尽量不要在html中去拉伸图片</li></ol><p><code>css</code></p><p>样式表放在顶部， 不要使用css表达式，使用不用<a href="/import">@import </a> </p><p><code>JavaScript</code></p><ol><li><p>脚本放在页面底部</p></li><li><p>文件用外部引入，压缩，减少不必要脚本</p></li><li><p>减少DOM访问</p></li></ol><hr><p>降低请求量：合并资源，减少HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。</p><p>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</p><p>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。</p><p>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline。</p><p><a href></a><a name="3a00f9e4"></a></p><h3 id="谈谈你对重构的理解"><a href="#谈谈你对重构的理解" class="headerlink" title="谈谈你对重构的理解"></a>谈谈你对重构的理解</h3><p>网站重构是不改变外观的前提下, 进行结构优化, 添加可读性, 加快速度</p><p><code>高复用低耦合, 文件小, 好维护, 好扩展</code>才是好代码</p><p><a href></a><a name="0b3dbe8c"></a></p><h4 id="常用的重构方法是"><a href="#常用的重构方法是" class="headerlink" title="常用的重构方法是"></a>常用的重构方法是</h4><ul><li>表格table改为div+css</li><li>使网站兼容现代浏览器, 废弃ie6</li><li>对于移动平台进行优化</li><li>针对seo进行优化</li><li>减少无用代码, 和代码体积, 提高速度</li></ul><p><a href></a><a name="726c9033"></a></p><h3 id="严格模式和混杂模式有什么区别"><a href="#严格模式和混杂模式有什么区别" class="headerlink" title="严格模式和混杂模式有什么区别"></a>严格模式和混杂模式有什么区别</h3><p><code>Doctype</code>声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><p><code>严格模式</code>是让浏览器用最高标准运行</p><p>比如最新版本代码会忽略一些老旧的代码</p><p>那么老旧的代码就不会被运行，叫做以最高标准进行</p><hr><p><code>混杂模式</code>是可以向后兼容老式浏览器的</p><p>就是新的可以支持，老的代码也可以运行成功</p><p><a href></a><a name="d343aabe"></a></p><h3 id="Cookie、sessionStorage、localStorage的区别"><a href="#Cookie、sessionStorage、localStorage的区别" class="headerlink" title="Cookie、sessionStorage、localStorage的区别"></a>Cookie、sessionStorage、localStorage的区别</h3><p>cookie是在http请求中携带的，用于<code>浏览器和服务器之间通信</code>大小限制在<code>4k内</code></p><p>sessionStorage，localStorage只在本地存储，大小可以大一些些. 5mb左右</p><p><code>localStorage.setItem尽量加到try-catch中, 因为某些浏览器是禁用这个api的</code></p><hr><p><code>共同点</code>：都是保存在浏览器端，并且是同源的</p><p><code>Cookie</code>：cookie数据始终在<code>同源的http请求中携带（即使不需要）</code>，</p><blockquote><p>即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p></blockquote><blockquote><p>cookie数据存储的大小很小只有4K左右。</p></blockquote><blockquote><p>另外两个是5mb左右</p></blockquote><p><code>sessionStorage</code>：<code>仅在当前浏览器窗口关闭前有效</code>，自然也就不可能持久保持，</p><p><code>localStorage：始终有效</code>，窗口或浏览器关闭也一直保存，因此用作持久数据；</p><p><code>cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</code>。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话）</p><hr><p><code>localStorage：</code>localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：<code>同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效</code>）</p><p>补充说明一下<code>cookie的作用：</code></p><ul><li><code>保存用户登录状态。</code>例如将用户<code>id存储于一个cookie内</code>，这样当用户下次访问该页面时就<code>不需要重新登录了</code>，现在很多论坛和社区都提供这样的功能。   cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个  月、一年等。</li><li><code>跟踪用户行为。</code>例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后  台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。</li></ul><blockquote><p>从安全性来说，因为<code>每次http请求都回携带cookie信息，这样子浪费了带宽</code>，所以<code>cookie应该尽可能的少用</code></p></blockquote><blockquote><p>此外cookie还需要<code>指定作用域，不可以跨域调用</code>，限制很多，但是<code>用户识别用户登陆来说，cookie还是比storage好用，其他情况下可以用storage，localstorage可以用来在页面传递参数</code></p></blockquote><blockquote><p>sessionstorage可以用来保存一些<code>临时的数据，防止用户刷新页面后丢失了一些参数</code></p></blockquote><hr><p>HTTP是一个无状态协议，因此<code>Cookie的最大的作用就是存储sessionId</code>用来唯一标识用户</p><ol><li><p>cookie数据存放在客户的浏览器上，session数据放在服务器上。</p></li><li><p>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br><br>考虑到安全应当使用session。</p></li><li><p>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br><br>考虑到减轻服务器性能方面，应当使用COOKIE。</p></li><li><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p></li></ol><p><a href></a><a name="0c81dc0d"></a></p><h3 id="说一下浏览器缓存"><a href="#说一下浏览器缓存" class="headerlink" title="说一下浏览器缓存"></a>说一下浏览器缓存</h3><p>缓存分为两种：<code>强缓存和协商缓存</code>，根据响应的header内容来决定。</p><blockquote><p>因为服务器上的资源不是一直固定不变的，大多数情况下它会更新，这个时候如果我们还访问本地缓存，那么对用户来说，那就相当于资源没有更新，用户看到的还是旧的资源；<code>所以我们希望服务器上的资源更新了浏览器就请求新的资源，没有更新就使用本地的缓存</code>，以最大程度的减少因网络请求而产生的资源浪费。</p></blockquote><blockquote><p><img src="https://uploadfiles.nowcoder.com/images/20190312/311436_1552361773903_9DC69E327B4B3691E94CD9D52D10E2C1#alt=img" alt></p></blockquote><table><thead><tr><th></th><th>获取资源形式</th><th>状态码</th><th>发送请求到服务器</th></tr></thead><tbody><tr><td>强缓存</td><td>从缓存取</td><td>200（from cache）</td><td>否，直接从缓存取</td></tr><tr><td>协商缓存</td><td>从缓存取</td><td>304（not modified）</td><td>是，通过服务器来告知缓存是否可用</td></tr></tbody></table><p><code>强缓存相关字段有expires，cache-control</code>。如果cache-control与expires同时存在的话，cache-control的优先级高于expires。</p><p>协商缓存相关字段`有</p><ul><li>Last-Modified/If-Modified-Since</li><li>Etag/If-None-Match</li></ul><hr><p><a href></a><a name="ca8b8687"></a></p><h3 id="讲讲移动端自适应问题"><a href="#讲讲移动端自适应问题" class="headerlink" title="讲讲移动端自适应问题"></a>讲讲移动端自适应问题</h3><p>逻辑分辨率和物理分辨率不一致是很正常的</p><p>css渲染是根据逻辑分辨率, 所以有时候就会出现1px对应4个物理分辨率的情况, 会产生模糊</p><p><a href></a><a name="0eb44b7f"></a></p><h3 id="响应式和自适应"><a href="#响应式和自适应" class="headerlink" title="响应式和自适应"></a>响应式和自适应</h3><p>响应式主要是根据@media来实现</p><p>自适应则是忽略了@media依靠的是窗口比例来实现</p><p>自适应比较好</p><p>如今的大型网站, 例如淘宝已经没有响应式了</p><p>淘宝手机端和网页端使用的是两个域名, 不同客户端不再使用同一套dom, 而是区分开做自适应</p><p>为什么呢?</p><p>试想一下淘宝这种大型网站，一个分页下的商品条目特别多，并且每个商品条目的dom结构又十分复杂，而且pc端往往显示的信息是要比手机端更多的。如果不分开做两套，而是直接用响应式的话，那么pc端上显示的很多dom就要在手机端上隐藏，结果这些dom都没有被用到，但是却加载了。在这个流量和速度至上的时代，代码冗余先不说，多加载的这些无用的代码而消耗的流量，从某种意义上来说就已经损失了很多的效益。</p><blockquote><p>兼容性问题</p></blockquote><p>从<code>Chrome32+</code>版本开始是会默认禁用用户缩放的，但是考虑到兼容大部分设备，还是要加上其他设置，让<code>meta</code>标签能够有更好的容错性。也就是下面这段代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0,  user-scalable<span class="token punctuation">=</span>no;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>需要注意的是，在<code>ios10+</code>以上，尽管开发者设置了<code>user-scalable=no</code>，<code>Safari</code>还是允许用户通过手势来缩放。（安卓手机各大厂商的内置浏览器也逐渐开放用户缩放，即使使用<code>meta</code>标签进行设置）</p><p>解决的方法也很简单，只需要检测<code>touch</code>相关事件来阻止事件的触发即可。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同时按下两个手指</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> lastTouchEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 特别注意300ms时差的设置</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>lastTouchEnd <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastTouchEnd <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="http://www.w3cplus.com/sites/default/files/blogs/2015/1511/rem-6.jpg#alt=Flexible%C3%A5%C2%AE%C2%9E%C3%A7%C2%8E%C2%B0%C3%A6%C2%89%C2%8B%C3%A6%C2%B7%C2%98H5%C3%A9%C2%A1%C2%B5%C3%A9%C2%9D%C2%A2%C3%A7%C2%9A%C2%84%C3%A7%C2%BB%C2%88%C3%A7%C2%AB%C2%AF%C3%A9%C2%80%C2%82%C3%A9%0A%C2%8D" alt></p><p>viewport: layout viewport、visual viewport、ideal viewport。</p><ul><li><code>layout viewport:</code>大于实际屏幕， 元素的宽度继承于 layoutviewport，用于保证网站的外观特性与桌面浏览器一样。layoutviewport 到底多宽，每个浏览器不同。iPhone 的 safari 为 980px，通过 document.documentElement.clientWidth 获取。</li><li><code>visual viewport:</code>当前显示在屏幕上的页面，即浏览器可视区域的宽度。</li><li><code>ideal viewport:</code> 为浏览器定义的可完美适配移动端的理想 viewport，固定不变，可以认为是设备视口宽度。比如 iphone 7 为 375px, iphone 7p 为 414px。</li></ul><p><a name="viewport"></a></p><h4 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1,user-scale<span class="token punctuation">=</span>no<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><p>只要 layoutviewport === visualviewport，页面下面不会出现滚动条，默认只是把页面放大或缩小</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 设定两个变量：  </span>viewport_1 <span class="token operator">=</span> width<span class="token punctuation">;</span>  viewport_2 <span class="token operator">=</span> idealviewport <span class="token operator">/</span> initial<span class="token operator">-</span>scale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 则：  </span>layoutviewport <span class="token operator">=</span> max<span class="token punctuation">{</span>viewport_1<span class="token punctuation">,</span> viewport_2<span class="token punctuation">}</span><span class="token punctuation">;</span>  visualviewport <span class="token operator">=</span> viewport_2<span class="token punctuation">;</span></code></pre><hr><p><code>dpr</code></p><p>什么是dpr: 设备像素比(dpr) = 物理像素/设备独立像素。如 iphone 6、7、8 的 dpr 为 2，那么一个设备独立像素便为 4 个物理像素，因此在 css 上设置的 1px 在其屏幕上占据的是 2个物理像素，0.5px 对应的才是其所能展示的最小单位。这就是 1px 在 retina 屏上变粗的原因，目前有很多办法来解决这一问题。</p><hr><p><a href></a><a name="ce806820"></a></p><h4 id="px与自适应"><a href="#px与自适应" class="headerlink" title="px与自适应"></a>px与自适应</h4><p>上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：</p><pre><code>1 CSS像素 = 物理像素／分辨率</code></pre><p>我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 _ 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px _ 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：</p><pre><code>PC端： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76 px</code></pre><p>而在iphone6下：</p><pre><code>iphone6：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2 px</code></pre><p><a href></a><a name="107b9842"></a></p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><pre class=" language-scss"><code class="language-scss">@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#FF6699</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">768</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#00FF66</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#6633FF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#FFFF00</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p><p><a href></a><a name="81522afd"></a></p><h4 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>设置样式让其自适应：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.trangle</span></span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span><span class="token number">75%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果展示如下：</p><p><a href="https://user-images.githubusercontent.com/17233651/41851698-52d2bd2c-78bb-11e8-97cb-26f985195809.gif" target="_blank" rel="noopener"><img src="https://user-images.githubusercontent.com/17233651/41851698-52d2bd2c-78bb-11e8-97cb-26f985195809.gif#alt=jest" alt></a></p><p><code>有明显的以下两个缺点：</code></p><p>（1）<code>计算困难，</code>如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。<br><br>（2）各个属性中如果使用百分比，<code>相对父元素的属性并不是唯一的</code>。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</p><p><a name="rem"></a></p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem单位都是<code>相对于根元素html的font-size</code>来决定大小的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">refreshRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> docEl <span class="token operator">=</span> doc<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> docEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">var</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    flexible<span class="token punctuation">.</span>rem <span class="token operator">=</span> win<span class="token punctuation">.</span>rem <span class="token operator">=</span> rem<span class="token punctuation">;</span><span class="token punctuation">}</span>win<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> refreshRem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>小缺陷是：</p><p><strong><em>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</em></strong>也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。</p><p><a href></a><a name="0dc77462"></a></p><h4 id="通过vw-vh来实现自适应"><a href="#通过vw-vh来实现自适应" class="headerlink" title="通过vw/vh来实现自适应"></a>通过vw/vh来实现自适应</h4><p>对于iphone6/7  375*667的分辨率，那么px可以通过如下方式换算成vw：</p><pre><code>1px = （1/375）*100 vw</code></pre><p>此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，<a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport</a>可以自动将px转化成vw。</p><p><a href></a><a name="9ea28e21"></a></p><h3 id="1px解决办法"><a href="#1px解决办法" class="headerlink" title="1px解决办法"></a>1px解决办法</h3><p>可以使用以下方法来:</p><ol><li>border-image/background-image</li><li>伪类+transform</li><li>svg<code>基本可以满足所有场景</code></li><li>viewport<code>但是所有布局都要按照物理像素来写</code>这样不现实, 可以借助<code>flexible</code>或<code>vw、vh</code>来帮助我们进行适配</li><li>多背景渐变实现和阴影方式(其实和背景一样)</li></ol><p><a href></a><a name="0fe37b3f"></a></p><h4 id="1-border-image-background-image"><a href="#1-border-image-background-image" class="headerlink" title="1. border-image/background-image"></a>1. border-image/background-image</h4><p><strong>优点：</strong></p><ul><li>可以设置单条,多条边框</li><li>没有性能瓶颈的问题</li></ul><p><strong>缺点：</strong></p><ul><li>修改颜色麻烦, 需要替换图片</li><li>圆角需要特殊处理，并且边缘会模糊</li></ul><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5a3qsuxpbj31iw0d6q5r.jpg#alt=" alt></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5a3koajdjj31720u00xj.jpg#alt=" alt></p><p><code>border-image</code>属性是一个简写的CSS属性，它可以同时设置<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-source.html" target="_blank" rel="noopener">border-image-source</a>、<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-slice.html" target="_blank" rel="noopener">border-image-slice</a>、<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-width.html" target="_blank" rel="noopener">border-image-width</a>、<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-outset.html" target="_blank" rel="noopener">border-image-outset</a>和<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-repeat.html" target="_blank" rel="noopener">border-image-repeat</a>属性。</p><p>基于<code>media</code>查询判断不同设备像素比给定不同的<code>border-image</code></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.border_1px</span></span><span class="token punctuation">{</span>          <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span>2<span class="token punctuation">)</span></span><span class="token punctuation">{</span>            <span class="token selector"><span class="token class">.border_1px</span></span><span class="token punctuation">{</span>                <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>                <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url">url(../img/1pxline.png)</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> stretch<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token selector"><span class="token class">.background-image-1px</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(../img/line.png)</span> repeat-x left bottom<span class="token punctuation">;</span>  <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">1</span>px<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">1</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p><a href></a><a name="e12fef84"></a></p><h4 id="2-渐变和阴影"><a href="#2-渐变和阴影" class="headerlink" title="2. 渐变和阴影"></a>2. 渐变和阴影</h4><p>与background-image方案类似，<code>只是将图片替换为css3渐变</code>。设置1px的渐变背景，<code>50%有颜色，50%透明。</code></p><p><strong>优点：</strong></p><ul><li>可以实现单条、多条边框</li><li>边框的颜色随意设置</li></ul><p><strong>缺点：</strong></p><ul><li>代码量不少</li><li>圆角没法实现</li><li>多背景图片有兼容性问题</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.background-gradient-1px</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span>    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>, <span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> left / <span class="token number">1</span>px <span class="token number">100%</span> no-repeat,    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>, <span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> right / <span class="token number">1</span>px <span class="token number">100%</span> no-repeat,    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>,<span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> top / <span class="token number">100%</span> <span class="token number">1</span>px no-repeat,    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>,<span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> bottom / <span class="token number">100%</span> <span class="token number">1</span>px no-repeat<span class="token punctuation">}</span></code></pre><p>使用box-shadow模拟边框</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box-shadow-1px</span> </span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset <span class="token number">0</span>px -<span class="token number">1</span>px <span class="token number">1</span>px -<span class="token number">1</span>px <span class="token hexcode">#c8c7cc</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>优点：</strong></p><ul><li>代码量少</li><li>可以满足所有场景</li></ul><p><strong>缺点：</strong></p><ul><li>边框有阴影，颜色变浅</li></ul><p><a href></a><a name="b5bbb66e"></a></p><h4 id="3-viewport-rem-实现"><a href="#3-viewport-rem-实现" class="headerlink" title="3. viewport + rem 实现"></a>3. viewport + rem 实现</h4><pre class=" language-css"><code class="language-css">&lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span>></code></pre><p>在devicePixelRatio = 3 时，输出viewport：</p><pre class=" language-css"><code class="language-css">&lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"</span>></code></pre><p>这种兼容方案相对比较完美，适合新的项目，老的项目修改成本过大。<br><br>对于这种方案，可以看看<a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noopener">《使用Flexible实现手淘H5页面的终端适配》</a><br><br><strong>优点：</strong></p><ul><li>所有场景都能满足</li><li>一套代码，可以兼容基本所有布局</li></ul><p><strong>缺点：</strong></p><ul><li>老项目修改代价过大，只适用于新项目</li></ul><p><a href></a><a name="26949996"></a></p><h4 id="4-伪类-transform-重做border"><a href="#4-伪类-transform-重做border" class="headerlink" title="4. 伪类+transform(重做border)"></a>4. 伪类+transform(<code>重做border</code>)</h4><p>对于老项目，伪类+transform是比较完美的方法了。<br><br><code>原理是把原先元素的 border 去掉</code>，然后利用 :before 或者 :after <code>重做 border ，并 transform 的 scale 缩小一半</code>，原先的元素相对定位，新做的 border 绝对定位。单条border样式设置：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.scale-1px</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.scale-1px</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="f5889746"></a></p><h4 id="5-svg-目前最佳"><a href="#5-svg-目前最佳" class="headerlink" title="5. svg(目前最佳)"></a>5. svg(<code>目前最佳</code>)</h4><p>上面我们<code>border-image</code>和<code>background-image</code>都可以模拟<code>1px</code>边框，但是使用的都是位图，还需要外部引入。</p><blockquote><p>借助<code>PostCSS</code>的<code>postcss-write-svg</code></p></blockquote><blockquote><p>直接使用<code>border-image</code>和<code>background-image</code>创建<code>svg</code>的<code>1px</code>边框：</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@svg</span> border_1px</span> <span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>   <span class="token atrule"><span class="token rule">@rect</span></span> <span class="token punctuation">{</span>     <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color, black<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.example</span> </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token function">svg</span><span class="token punctuation">(</span>border_<span class="token number">1</span>px <span class="token function">param</span><span class="token punctuation">(</span>--color <span class="token hexcode">#00b1ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">2</span> <span class="token number">2</span> stretch<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>编译后：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.example</span> </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url">url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='2px'%3E%3Crect fill='%2300b1ff' width='100%25' height='50%25'/%3E%3C/svg%3E")</span> <span class="token number">2</span> <span class="token number">2</span> stretch<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>基本可以满足所有场景。</p><p><a href></a><a name="06c46e14"></a></p><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><p><code>get参数通过url传递，post放在request body中。</code></p><p>get请求在url中传递的参数是有长度限制的，而post没有。</p><p>get比post更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息。</p><p>get请求只能进行url编码，而post支持多种编码方式</p><p>get请求会浏览器主动cache，而post支持多种编码方式。</p><p>get请求参数会被完整保留在浏览历史记录里，而post中的参数不会被保留。</p><p>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><blockquote><p>总之能用post就post</p></blockquote><p><a href></a><a name="79274068"></a></p><h3 id="怎么看网站的性能如何"><a href="#怎么看网站的性能如何" class="headerlink" title="怎么看网站的性能如何"></a>怎么看网站的性能如何</h3><p>检测页面加载时间一般有两种方式，一种是被动去测：就是在被检测的页面置入脚本或探针，当用户访问网页时，探针自动采集数据并传回数据库进行分析</p><p>另一种主动监测的方式，即主动的搭建分布式受控环境，模拟用户发起页面访问请求，主动采集性能数据并分析，在检测的精准度上，专业的第三方工具效果更佳，比如说性能极客</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端综合小知识点</title>
      <link href="/2019/08/18/qian-duan-zong-he-xiao-zhi-shi-dian/"/>
      <url>/2019/08/18/qian-duan-zong-he-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><br><a name="20ad3c21"></a></p><h3 id="node的使用场景和优缺点"><a href="#node的使用场景和优缺点" class="headerlink" title="node的使用场景和优缺点"></a>node的使用场景和优缺点</h3><p>是一个JavaScript运行环境, 依赖于v8引擎, 是事件驱动, <code>单进程, 单线程, 高并发是最重要的优点</code></p><hr><p>缺点是: <code>只支持单核cpu</code>, 不能充分利用cpu资源</p><p>可靠性低, <code>一旦代码某个环节奔溃整个系统都会奔溃</code></p><p><a href></a><br><a name="2c6ea741"></a></p><h3 id="对git熟悉吗-知道常用的git命令吗"><a href="#对git熟悉吗-知道常用的git命令吗" class="headerlink" title="对git熟悉吗, 知道常用的git命令吗"></a>对git熟悉吗, 知道常用的git命令吗</h3><pre class=" language-git"><code class="language-git">git clone &lt;远程项目地址>  #克隆git status # 查看修改情况git diff &lt;文件名称> #查看单个文件修改情况</code></pre><p><code>单人开发</code></p><pre class=" language-git"><code class="language-git">git pull origin master #同步别人修改的内容git push origin master #提交到远程服务器</code></pre><hr><p><code>多人开发</code><br><br>branch就不一定是master了, 依据自己的分支来操作</p><pre class=" language-git"><code class="language-git">git checkout -b &lt;分支名字> #拉取分支git branch #可以参看本地所有分支名字git merge master #同步master分支的内容git checkout &lt;分支名字> #切换分支</code></pre><p>将自己修改的内容提交到远程服务器</p><pre class=" language-git"><code class="language-git">git add .git commit -m <span class="token string">"xxx"</span> #提交所包含的信息git push origin &lt;branchname> #提交到远程分支,自己的分支</code></pre><p>如果自己的代码没有问题的话可以合并到master分支</p><pre class=" language-git"><code class="language-git">git checkout master #切换到master分支git merge &lt;branchname> #合并自己的分支git push origin master #提交到master分支</code></pre><p><a href></a><br><a name="6adc733f"></a></p><h3 id="常见的BOM属性对象方法"><a href="#常见的BOM属性对象方法" class="headerlink" title="常见的BOM属性对象方法"></a>常见的BOM属性对象方法</h3><p><code>(1)location对象</code></p><p>location.href– 返回或设置当前文档的URL<br><br>location.search – 返回URL中的查询字符串部分。例如 <a href="http://www.dreamdu.com/dreamdu.php?id=5&name=dreamdu" target="_blank" rel="noopener">http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</a> 返回包括(?)后面的内容?id=5&amp;name=dreamdu<br><br>location.hash – 返回URL#后面的内容，如果没有#，返回空<br><br>location.host – 返回URL中的域名部分，例如<a href="http://www.dreamdu.com" target="_blank" rel="noopener">www.dreamdu.com</a><br><br>location.hostname – 返回URL中的主域名部分，例如dreamdu.com<br><br>location.pathname – 返回URL的域名后的部分。例如 <a href="http://www.dreamdu.com/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com/xhtml/</a> 返回/xhtml/<br><br>location.port – 返回URL中的端口部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回8080<br><br>location.protocol – 返回URL中的协议部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回(//)前面的内容http:<br><br>location.assign – 设置当前文档的URL<br><br>location.replace() – 设置当前文档的URL，并且在history对象的地址列表中移除这个URL location.replace(url);<br><br>location.reload() – 重载当前页面</p><p><code>(2)history对象</code></p><p>history.go() – 前进或后退指定的页面数 history.go(num);<br><br>history.back() – 后退一页<br><br>history.forward() – 前进一页</p><p><code>(3)Navigator对象</code></p><p>navigator.userAgent – 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)<br><br>navigator.cookieEnabled – 返回浏览器是否支持(启用)cookie</p><p><a href></a><br><a name="d9eb80cf"></a></p><h3 id="说一下web-Quality（无障碍）"><a href="#说一下web-Quality（无障碍）" class="headerlink" title="说一下web Quality（无障碍）"></a>说一下web Quality（无障碍）</h3><p>能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。</p><p>使用alt属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this is a person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>有时候浏览器会无法显示图像。具体的原因有：</p><p>用户关闭了图像显示</p><p>浏览器是不支持图形显示的迷你浏览器</p><p>浏览器是语音浏览器（供盲人和弱视人群使用）<br><br>如果您使用了alt 属性，那么浏览器至少可以显示或读出有关图像的描述。</p><p><a href></a><br><a name="1b760308"></a></p><h3 id="你怎么理解浏览器内核"><a href="#你怎么理解浏览器内核" class="headerlink" title="你怎么理解浏览器内核"></a>你怎么理解浏览器内核</h3><p>主要分为渲染引擎和JS引擎</p><p><a href></a><br><a name="9e5c825b"></a></p><h3 id="fetch发送2次请求的原因"><a href="#fetch发送2次请求的原因" class="headerlink" title="fetch发送2次请求的原因"></a>fetch发送2次请求的原因</h3><p>fetch发送post请求的时候，总是发送2次，第一次状态码是204，第二次才成功？</p><p>原因很简单，因为你用fetch的post请求的时候，导致fetch 第一次发送了一个<code>Options请求，询问服务器是否支持修改的请求头</code>，如果服务器支持，则在第二次中发送真正的请求。</p><p><a href></a><br><a name="979b0d7d"></a></p><h3 id="说一下web-worker"><a href="#说一下web-worker" class="headerlink" title="说一下web worker"></a>说一下web worker</h3><p>在HTML页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。</p><p><code>web worker是运行在后台的js，独立于其他脚本，不会影响页面你的性能。</code>并且<code>通过postMessage将结果回传到主线程</code>。这样在进行复杂操作的时候，就不会阻塞主线程了。</p><p>如何创建web worker：</p><ol><li>检测浏览器对于web worker的支持性</li><li>创建web worker文件（js，回传函数等）</li><li>创建web worker对象</li></ol><p><a href></a><br><a name="fb429527"></a></p><h3 id="cache-control的值有哪些"><a href="#cache-control的值有哪些" class="headerlink" title="cache-control的值有哪些"></a>cache-control的值有哪些</h3><p>cache-control是一个通用消息头字段被用于HTTP请求和响应中，通过指定指令来实现缓存机制，这个缓存指令是单向的，常见的取值有<code>private、no-cache、max-age、must-revalidate</code>等，<code>默认为private</code>。</p><p><a href></a><br><a name="27d68721"></a></p><h3 id="浏览器在生成页面的时候，会生成那两颗树？"><a href="#浏览器在生成页面的时候，会生成那两颗树？" class="headerlink" title="浏览器在生成页面的时候，会生成那两颗树？"></a>浏览器在生成页面的时候，会生成那两颗树？</h3><p>构造两棵树，DOM树和CSSOM规则树</p><p>当浏览器接收到服务器相应来的HTML文档后，会遍历文档节点，生成DOM树，</p><p>CSSOM规则树由浏览器解析CSS文件生成</p><p><a href></a><br><a name="421f52ca"></a></p><h3 id="click在ios上有300ms延迟，原因及如何解决？"><a href="#click在ios上有300ms延迟，原因及如何解决？" class="headerlink" title="click在ios上有300ms延迟，原因及如何解决？"></a>click在ios上有300ms延迟，原因及如何解决？</h3><p><code>(1)粗暴型，禁用缩放</code><br><code>(2)改用FastClick，其原理是：</code></p><p>检测到touchend事件后，立刻出发模拟click事件，并且把浏览器300毫秒之后真正出发的事件给阻断掉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——字符串</title>
      <link href="/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-zi-fu-chuan/"/>
      <url>/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p><a name="6674e141"></a></p><h1 id="1-反转字符串"><a href="#1-反转字符串" class="headerlink" title="1. 反转字符串"></a>1. 反转字符串</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/32/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 <a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener">ASCII</a> 码表中的可打印字符。</p><p><strong>示例 1：</strong></p><pre><code>输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</code></pre><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>直接交换, 超级水</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        start<span class="token operator">++</span><span class="token punctuation">;</span>        end<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="544d716b"></a></p><h1 id="2-整数反转"><a href="#2-整数反转" class="headerlink" title="2. 整数反转"></a>2. 整数反转</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/33/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-1"></a></p><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p><strong>示例 1:</strong></p><pre><code>输入: 123输出: 321</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: -123输出: -321</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: 120输出: 21</code></pre><p><strong>注意:</strong></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverse <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">=</span>x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            x<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token operator">>=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="5f23fa9c"></a></p><h1 id="3-字符串中的第一个唯一字符"><a href="#3-字符串中的第一个唯一字符" class="headerlink" title="3. 字符串中的第一个唯一字符"></a>3. 字符串中的第一个唯一字符</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/34/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-2"></a></p><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p><p><strong>案例:</strong></p><pre><code>s = &quot;leetcode&quot;返回 0.s = &quot;loveleetcode&quot;,返回 2.</code></pre><p><strong>注意事项：</strong>您可以假定该字符串只包含小写字母。</p><p><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> firstUniqChar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="2a722512"></a></p><h1 id="4-有效的字母异位词"><a href="#4-有效的字母异位词" class="headerlink" title="4. 有效的字母异位词"></a>4. 有效的字母异位词</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/35/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-3"></a></p><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词。</p><p><strong>示例 1:</strong></p><pre><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: s = &quot;rat&quot;, t = &quot;car&quot;输出: false</code></pre><p><strong>说明:</strong><br>你可以假设字符串只包含小写字母。</p><p><strong>进阶:</strong><br>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isAnagram <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len_t <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> len_s <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len_s<span class="token operator">!=</span>len_t<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len_s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span>_map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>_map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len_t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            _map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="d27fe0e5"></a></p><h1 id="5-验证回文字符串"><a href="#5-验证回文字符串" class="headerlink" title="5. 验证回文字符串"></a>5. 验证回文字符串</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/36/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-4"></a></p><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p><p><strong>示例 1:</strong></p><pre><code>输入: &quot;A man, a plan, a canal: Panama&quot;输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: &quot;race a car&quot;输出: false</code></pre><p><a name="4161afd7-4"></a></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// \W是非单词</span>    <span class="token keyword">var</span> str1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\W/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str1 <span class="token operator">==</span> str2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="17af7d36"></a></p><h1 id="6-字符串转换整数-atoi"><a href="#6-字符串转换整数-atoi" class="headerlink" title="6. 字符串转换整数 (atoi)"></a>6. 字符串转换整数 (atoi)</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/37/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-5"></a></p><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p><strong>说明：</strong></p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p><strong>示例 1:</strong></p><pre><code>输入: &quot;42&quot;输出: 42</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: &quot;   -42&quot;输出: -42解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: &quot;4193 with words&quot;输出: 4193解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。</code></pre><p><strong>示例 4:</strong></p><pre><code>输入: &quot;words and 987&quot;输出: 0解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。     因此无法执行有效的转换。</code></pre><p><strong>示例 5:</strong></p><pre><code>输入: &quot;-91283472332&quot;输出: -2147483648解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。      因此返回 INT_MIN (−231) 。</code></pre><p><a name="4161afd7-5"></a></p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>直接用正则</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myAtoi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^[+|-]?[0-9]+/</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        str <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        INT_MIN <span class="token operator">=</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        INT_MAX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">></span>INT_MAX<span class="token punctuation">)</span>            <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">&lt;</span>INT_MIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="9c1fe4a9"></a></p><h1 id="7-实现-strStr"><a href="#7-实现-strStr" class="headerlink" title="7. 实现 strStr()"></a>7. 实现 strStr()</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/38/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-6"></a></p><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><p>实现 <a href="https://baike.baidu.com/item/strstr/811469" target="_blank" rel="noopener">strStr()</a> 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  <strong>-1</strong>。</p><p><strong>示例 1:</strong></p><pre><code>输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot;输出: 2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;输出: -1</code></pre><p><strong>说明:</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与C语言的 <a href="https://baike.baidu.com/item/strstr/811469" target="_blank" rel="noopener">strstr()</a> 以及 Java的 <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)" target="_blank" rel="noopener">indexOf()</a> 定义相符。</p><p><a name="4161afd7-6"></a></p><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>它让我们实现:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>needle<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> haystack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="e241ec64"></a></p><h3 id="1-KMP-next数组法"><a href="#1-KMP-next数组法" class="headerlink" title="1. KMP-next数组法"></a>1. KMP-next数组法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> next <span class="token operator">=</span> <span class="token function">getNextArr</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> hasyArr <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> needleArr <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> hasyArr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> hasyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needleArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> getNextArr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nextStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> nextArr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> nextArrStr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    nextArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nextArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> nextArrStr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nextArrStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextArr<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> nextArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nextArr<span class="token punctuation">}</span></code></pre><p><a name="df8d2d79"></a></p><h1 id="8-报数"><a href="#8-报数" class="headerlink" title="8. 报数"></a>8. 报数</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/39/" target="_blank" rel="noopener">地址</a></p><p><a name="254dd6d2-7"></a></p><h2 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h2><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p><pre><code>1.     12.     113.     214.     12115.     111221</code></pre><p><code>1</code> 被读作  <code>&quot;one 1&quot;</code>  (<code>&quot;一个一&quot;</code>) , 即 <code>11</code>。<br><code>11</code> 被读作 <code>&quot;two 1s&quot;</code> (<code>&quot;两个一&quot;</code>）, 即 <code>21</code>。<br><code>21</code> 被读作 <code>&quot;one 2&quot;</code>,  “<code>one 1&quot;</code> （<code>&quot;一个二&quot;</code> ,  <code>&quot;一个一&quot;</code>) , 即 <code>1211</code>。</p><p>给定一个正整数 <em>n</em>（1 ≤ <em>n</em> ≤ 30），输出报数序列的第 <em>n</em> 项。</p><p>注意：整数顺序将表示为一个字符串。</p><p><strong>示例 1:</strong></p><pre><code>输入: 1输出: &quot;1&quot;</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 4输出: &quot;1211&quot;</code></pre><p><a name="4161afd7-7"></a></p><h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><p>其实也是动态规划，每次都创建一个res数组用于存放下一个结果</p><p>数一下和当前数字相等的有几个，有几个就push到res中，然后往后跳着继续数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> countAndSay <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 数一下和当前数字相同的数字有几个</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> count<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">+</span><span class="token operator">=</span>count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过相同的数字</span>            <span class="token punctuation">}</span>            arr <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f7741218"></a></p><h1 id="9-最长公共前缀"><a href="#9-最长公共前缀" class="headerlink" title="9. 最长公共前缀"></a>9. 最长公共前缀</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/40/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-8"></a></p><h2 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1:</strong></p><pre><code>输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]输出: &quot;fl&quot;</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]输出: &quot;&quot;解释: 输入不存在公共前缀。</code></pre><p><strong>说明:</strong></p><p>所有输入只包含小写字母 <code>a-z</code> 。</p><p><a name="4161afd7-8"></a></p><h2 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h2><p>多注意边界判空就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意判空</span>        <span class="token keyword">let</span> min_length <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 选取最小边界,也是要第二次判空</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            min_length<span class="token operator">></span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">?</span>min_length<span class="token operator">=</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">:</span>min_length<span class="token operator">=</span>min_length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min_length<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>min_length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——链表</title>
      <link href="/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-lian-biao/"/>
      <url>/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-lian-biao/</url>
      
        <content type="html"><![CDATA[<p><a name="2c842867"></a></p><h1 id="0-创建链表"><a href="#0-创建链表" class="headerlink" title="0. 创建链表"></a>0. 创建链表</h1><p>修改下传入数组就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> head <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> _node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> _node<span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><a name="ddc4a20e"></a></p><h1 id="1-删除链表中的节点"><a href="#1-删除链表中的节点" class="headerlink" title="1. 删除链表中的节点"></a>1. 删除链表中的节点</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/41/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc"></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998251-8dd66876-90f0-4308-9680-8056dfa970b1.png#align=left&display=inline&height=65&originHeight=65&originWidth=395&size=0&status=done&width=395" alt></p><p><strong>示例 1:</strong></p><pre><code>输入: head = [4,5,1,9], node = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: head = [4,5,1,9], node = 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</code></pre><p><strong>说明:</strong></p><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134999390-af69ea7d-8459-497e-af28-2e93391d7e56.png#align=left&display=inline&height=279&originHeight=279&originWidth=604&size=0&status=done&width=604" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span>    <span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3fdd06b6"></a></p><h1 id="2-删除链表的倒数第N个节点"><a href="#2-删除链表的倒数第N个节点" class="headerlink" title="2. 删除链表的倒数第N个节点"></a>2. 删除链表的倒数第N个节点</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/42/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-1"></a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</code></pre><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><p><strong>进阶：</strong></p><p>你能尝试使用一趟扫描实现吗？</p><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>双指针移动问题，需要注意的是开始的时候如果删除位置超过了链表本身的长度</p><p>那就删除第一个就好了， 这就解决了<code>[1] 1</code>的问题</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> removeNthFromEnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// node为空说明了已经超过了要删除的位置,删掉第一个就好</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">let</span> sec<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 双指针移动,因为node提前走了n步骤,最终sec指向需要删除的前一项</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sec<span class="token operator">=</span>sec<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sec<span class="token punctuation">.</span>next<span class="token operator">=</span>sec<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="0a778e06"></a></p><h1 id="3-反转链表"><a href="#3-反转链表" class="headerlink" title="3. 反转链表"></a>3. 反转链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/43/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-2"></a></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>反转一个单链表。</p><p><strong>示例:</strong></p><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p><a name="8c759203"></a></p><h3 id="1-用迭代法"><a href="#1-用迭代法" class="headerlink" title="1. 用迭代法"></a>1. 用迭代法</h3><p>其实就是构建一个头结点, 然后用类似插入法插入到头结点中</p><p>最后返回头结点的下一个结点就ok了</p><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190815004121.png#align=left&display=inline&height=464&originHeight=464&originWidth=872&status=uploading&width=872" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个新头</span>        <span class="token keyword">let</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> remenber <span class="token operator">=</span> newHead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="741b21de"></a></p><h3 id="2-用递归反转"><a href="#2-用递归反转" class="headerlink" title="2. 用递归反转"></a>2. 用递归反转</h3><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190815005713.png#align=left&display=inline&height=952&originHeight=952&originWidth=894&status=uploading&width=894" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="a23ae9f3"></a></p><h1 id="4-合并两个有序链表"><a href="#4-合并两个有序链表" class="headerlink" title="4. 合并两个有序链表"></a>4. 合并两个有序链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/44/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-3"></a></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例：</strong></p><pre><code>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</code></pre><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>其实就是用两个指针，创建一个空链表头，都从左边开始，小的加入</p><p>然后加入的那个指针向后移动就好了</p><blockquote><p>注意，因为l1和l2长度不同，所以如果有长度还没补全的就继续补充进去</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> head_save <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">let</span> t_l1 <span class="token operator">=</span> l1<span class="token punctuation">,</span>len_l1<span class="token punctuation">,</span>len_l2<span class="token punctuation">;</span>        <span class="token keyword">let</span> t_l2<span class="token operator">=</span>l2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>l2<span class="token punctuation">;</span>                head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 补全</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next<span class="token operator">=</span>l2<span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head_save<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="c9c58479"></a></p><h1 id="5-回文链表"><a href="#5-回文链表" class="headerlink" title="5. 回文链表"></a>5. 回文链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/45/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-4"></a></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>请判断一个链表是否为回文链表。</p><p><strong>示例 1:</strong></p><pre><code>输入: 1-&gt;2输出: false</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 1-&gt;2-&gt;2-&gt;1输出: true</code></pre><p><strong>进阶：</strong><br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><p><a name="4161afd7-4"></a></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>要O(n) 时间复杂度和 O(1) 空间复杂度，意味着遍历一次和用常数保存</p><p>把链表值存为两个字符串就好了，字符一个加在前面，一个加在后面</p><p>一个存正向，一个存方向，然后最后判断下相等就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> str2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正向方向     </span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            str1 <span class="token operator">+</span><span class="token operator">=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// val加在后面</span>            str2 <span class="token operator">=</span> head<span class="token punctuation">.</span>val <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// val加在前面</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str1 <span class="token operator">===</span> str2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="d8ef65f3"></a></p><h1 id="6-环形链表"><a href="#6-环形链表" class="headerlink" title="6. 环形链表"></a>6. 环形链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/46/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-5"></a></p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，判断链表中是否有环。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p><p><strong>示例 1：</strong></p><pre><code>输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998965-b79eb850-bbfb-44ac-a44e-f6fa57951e0d.png#align=left&display=inline&height=171&originHeight=171&originWidth=531&size=0&status=done&width=531" alt></p><p><strong>示例 2：</strong></p><pre><code>输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998345-e1f5fa1c-58f9-4d4c-b200-346c203e38c4.png#align=left&display=inline&height=105&originHeight=105&originWidth=201&size=0&status=done&width=201" alt></p><p><strong>示例 3：</strong></p><pre><code>输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998330-cc0787f8-c10f-4a9a-9c0a-83f7a8142164.png#align=left&display=inline&height=65&originHeight=65&originWidth=65&size=0&status=done&width=65" alt></p><p><strong>进阶：</strong></p><p>你能用 _O(1)_（即，常量）内存解决此问题吗？</p><p><a name="4161afd7-5"></a></p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>快慢指针问题，两个指针同时跑，快的跑两步，慢的跑一步，如果有环的话他们一定会相遇，如果没有环的话，快指针一定会遇到null</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hasCycle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> fast<span class="token operator">=</span>head<span class="token punctuation">,</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS要点</title>
      <link href="/2019/08/18/css-yao-dian/"/>
      <url>/2019/08/18/css-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><br><a name="89a87447"></a></p><h1 id="说下盒模型"><a href="#说下盒模型" class="headerlink" title="说下盒模型"></a>说下盒模型</h1><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190808104146.png#align=left&display=inline&height=437&originHeight=991&originWidth=740&status=done&width=326" alt></p><p><a href></a><br><a name="b0304957"></a></p><h1 id="如何实现居中"><a href="#如何实现居中" class="headerlink" title="如何实现居中"></a>如何实现居中</h1><p><a href></a><br><a name="d365d58d"></a></p><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><p><code>行内水平居中</code></p><p>行内水平居中就直接用text-align: center</p><p><code>块级水平居中</code></p><p>直接用margin: auto来实现</p><p><code>绝对定位元素的居中</code></p><p>可以是哟经left: 50%, margin: 负固定值来实现<br><br><br>也可以使用transform: translate(x轴, y轴)来实现</p><p><code>flex居中</code></p><p>使用justify-content: center来实现, 这个是主轴</p><p><a href></a><br><a name="4117e80d"></a></p><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><p><code>行内垂直居中</code></p><p>设置line-height和height一样高就好了</p><p><code>绝对定位元素居中</code></p><p>绝对定位元素可以使用<code>top: 50%, margin-top: 负的一半</code>高度<br><br><br>或者直接使用<code>transform: translate(x轴, y轴)</code>来实现</p><p>也可以结合使用绝对定位+margin:auto来实现</p><p>margin: auto中的auto意思是自动填充满剩余空间部分</p><p><code>flex居中</code></p><p>使用flex布局来实现 <code>align-items: center</code>,代表交叉轴, 也就是垂直轴</p><p><a href></a><br><a name="2e347bce"></a></p><h1 id="BFC怎么形成"><a href="#BFC怎么形成" class="headerlink" title="BFC怎么形成"></a>BFC怎么形成</h1><ul><li><code>根元素html 而不是body</code>, 并且body设置overflow: hidden 无效, 详见<a href="https://stackoverflow.com/questions/41506456/why-body-overflow-not-working/41507857#41507857" target="_blank" rel="noopener">https://stackoverflow.com/questions/41506456/why-body-overflow-not-working/41507857#41507857</a></li><li><code>overflow 不为visible</code></li><li><code>display的值为inline-block、table-cell、table-caption flex/ inline-flex</code></li><li><code>position的值为absolute或fixed</code></li><li><code>通过浮动元素来创建</code></li></ul><p>计算BFC的高度的时候，浮动元素也参与计算</p><ol><li>解决普通文档流块元素的外边距折叠问题<br><br>也就是说, 之前遇到的上下margin会重叠问题<blockquote><p>解决方法:<br>元素置于不同的BFC中进行隔离就可以解决<br><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g3eygqstspj30sa08eacq.jpg#align=left&display=inline&height=302&originHeight=302&originWidth=1018&status=done&width=1018" alt></p></blockquote></li></ol><ol start="2"><li>清除盒子内子元素的浮动问题<br><br><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g3eyfqv0kqj306m035jr7.jpg#align=left&display=inline&height=113&originHeight=113&originWidth=238&status=done&width=238" alt><blockquote><p>解决:<br>在父元素里添加属性overflow: hidden会触发BFC, 和外部隔开, 内部规矩化</p></blockquote></li></ol><ol start="3"><li>被浮动元素遮挡问题<blockquote><p>解决:<br>可以触发下方的元素, 对其添加属性overflow:hidden 触发BFC盒子模型<br><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g3eyhb6d05j30ol04fwfv.jpg#align=left&display=inline&height=159&originHeight=159&originWidth=885&status=done&width=885" alt><br>可以对demo2触发其BFC然后就不会遮挡<br><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g3eyhz5ta0j306m04jdg0.jpg#align=left&display=inline&height=163&originHeight=163&originWidth=238&status=done&width=238" alt></p></blockquote></li></ol><p><a href></a><br><a name="b9a4588a"></a></p><h1 id="圣杯布局和双飞翼布局"><a href="#圣杯布局和双飞翼布局" class="headerlink" title="圣杯布局和双飞翼布局"></a>圣杯布局和双飞翼布局</h1><p>双飞翼布局优秀点, 变大后不会变形</p><p><a href></a><br><a name="0d889a3f"></a></p><h5 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h5><p>圣杯布局 container要<code>float: left</code></p><p>是<code>container预留padding左右</code>, 然后main占100%宽度</p><p>左边的margin: -100%, <code>position设为relative</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#container</span> <span class="token class">.column</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#center</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>   <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector"><span class="token id">#footer</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>为什么左边的是-100%, 因为-左边padding预留位置就会跑到上一行mian那一行</p><p>但是是在最右边, 那还是要跑去最左边才可以, 也就是再继续靠左, 加起来就是100%width</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g3exkoq78xj30ev09fwf5.jpg#align=left&display=inline&height=339&originHeight=339&originWidth=535&status=done&width=535" alt></p><p><a href></a><br><a name="bb7f05f6"></a></p><h5 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h5><p>与圣杯布局不同的是, container只有包裹住中间的main</p><p><code>然后左右用margin来空出位置</code></p><p>左边的也是要margin-left: -100%,    但是不需要relative定位</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g3exojtfs7j30jd09340s.jpg#align=left&display=inline&height=327&originHeight=327&originWidth=697&status=done&width=697" alt></p><pre class=" language-javascript"><code class="language-javascript">#container <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>column <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>#center <span class="token punctuation">{</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">}</span>#left <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token punctuation">}</span>#right <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span> <span class="token punctuation">}</span>#footer <span class="token punctuation">{</span>  clear<span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href></a><br><a name="2e169b41"></a></p><h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p><code>容器属性</code></p><ul><li>justify-content    主轴布局</li><li>align-items    垂直轴布局</li><li>flex-direction    轴的方向</li><li>flex-wrap    是否换行</li><li>flex-flow    是flex-direction属性和flex-wrap属性的简写形式，默认 row nowrap</li><li>align-content    垂直轴对其方式</li><li>justify-content    主轴对其方式</li></ul><p><code>项目属性</code></p><ul><li>order    项目的排列顺序。数值越小，排列越靠前，默认为0.</li><li>flex-grow    放大比例，默认值为0，即如果存在剩余空间，也不放大</li><li>flex-shrink    项目的缩小比例，默认为1，即如果空间不足，改项目将缩小</li><li>flex-basis    在分配多余空间之前，项目占据的主轴空间,   默认值为auto，即项目的本来大小,    可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间</li><li>flex    是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。后面两个属性可选</li><li>align-self    允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto</li></ul><p><a href></a><br><a name="e2f54c69"></a></p><h1 id="怎么清除浮动"><a href="#怎么清除浮动" class="headerlink" title="怎么清除浮动"></a>怎么清除浮动</h1><p>一般我们是用clear: both来清除浮动的, 使用div会占用DOM空间, 所以比较好的做法是在父元素中加上伪元素:after</p><hr><p>末尾添加一个空div作为兄弟：<br></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>,      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>父元素添加overflow: hidden | auto 或其他能够构成BFC的属性</p><p><a href></a><br><a name="601902a8"></a></p><h1 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h1><p><code>重绘（repaint或redraw）</code>：当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。</p><p>触发重绘的条件：<code>改变元素外观属性。</code>如：color，background-color等。</p><blockquote><p>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。</p></blockquote><p>重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。<br><br>DOM的变化影响到了预算内宿的几何属性比如宽高，浏览器重新计算元素的几何属性，其他元素的几何属性也会受到影响，<code>浏览器需要重新构造渲染书，这个过程称之为重排</code>，浏览器将受到影响的<code>部分重新绘制在屏幕上 的过程称为重绘</code>，引起重排重绘的原因有：</p><ol><li>添加或者删除可见的DOM元素</li><li>元素尺寸位置的改变</li><li>浏览器页面初始化浏览器窗口大小发生改变</li></ol><p><code>重排一定导致重绘，重绘不一定导致重排</code></p><p>减少重绘重排的方法有：</p><ul><li>不在布局信息改变时做DOM查询</li><li>使用csstext,className一次性改变属性</li><li>使用fragment</li></ul><p>对于多次重排的元素，比如说动画。<code>使用绝对定位脱离文档流</code>，使其不影响其他元素</p><hr><p><code>重绘</code></p><p>重绘是指在<code>不修改文档流</code>的情况下<code>进行简单的样式修改</code></p><p><code>回流</code></p><p>修改了dom元素的尺寸和大小, 重新渲染页面</p><p><code>会造成页面抖动,</code> 影响性能,</p><p>尽量少用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS小知识</title>
      <link href="/2019/08/18/css-xiao-zhi-shi/"/>
      <url>/2019/08/18/css-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="81a779f9"></a></p><h4 id="float有什么要注意的点"><a href="#float有什么要注意的点" class="headerlink" title="float有什么要注意的点"></a>float有什么要注意的点</h4><p>float设计出来是用于文字环绕效果的<br><br>现在转成了用于布局<br><br>float会脱离文档流, 形成紧密的BFC, 非常具有包裹性<br><br><br>如果div设置了float其宽度就会自动调整为包裹住内容宽度, 而不是撑满整个父容器<br><br>img中会有换行, 如果加上float就没有间隙了, 非常适合网页排版, 砌砖头, 排版出来的网页严丝合缝, 不属于文档流就会没有间隙地靠拢在一起</p><p><a href></a><a name="3d3a8eca"></a></p><h4 id="你知道grid布局吗"><a href="#你知道grid布局吗" class="headerlink" title="你知道grid布局吗"></a>你知道grid布局吗</h4><p>grid布局把网页划分成网格, 可以做出不同的网格布局</p><p>grid布局远比flex布局强大, <code>flex是按照轴线布局</code>的, 可以看做是一维布局</p><p>但是<code>grid是按照容器的行列来布局</code>的, 可以看做是<code>二维布局</code>, 可以指定项目所在的单元格</p><p>默认情况下, 其容器内元素都是块级元素, 但是可以自己设置成行内元素, inline-grid</p><p>可以通过display:grid设置为grid布局</p><p><code>通过grid-template-rows设置行大小, grid-template-colums设置列大小</code>, 例如:</p><p>grid-template-columns: 100px 100px 100px;</p><p>grid-template-rows: 100px 100px 100px;</p><p>可以用repeat()设置重复大小</p><p>关键字<code>fr单位意思是倍数</code>, 和flex差不多</p><hr><p>具体信息可以查看: <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><p><a href></a><a name="3042beeb"></a></p><h4 id="讲一下position定位"><a href="#讲一下position定位" class="headerlink" title="讲一下position定位"></a>讲一下position定位</h4><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5mbmb2qu9j30ko08mq4n.jpg#alt=" alt></p><p>absolute不是相对于static定位, 是相对于static外的第一个父元素定位</p><p>position不能继承到子元素<br><br>fixed固定悬浮在视口内</p><ul><li>relative是相对于当前位置定位的, 不影响其他元素的定位<br><br>relative元素内定</li><li>absolute定位是相对于relative元素定位的, 因为relative定位修改了其上下文位置, 子元素也会跟着改变</li><li>fixed是根据window定位的</li><li>absolute是根据最近定位的上下文确定的</li></ul><p><a href></a><a name="1e9d883c"></a></p><h4 id="animation动画知道吗"><a href="#animation动画知道吗" class="headerlink" title="animation动画知道吗"></a>animation动画知道吗</h4><p>animation动画属性</p><ul><li><p>animation: name 可以写对应的<a href="/keyframe">@keyframe </a> 来写 <code>过程帧动画</code></p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> slidein</span> <span class="token punctuation">{</span><span class="token selector">from </span><span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> identifier</span> <span class="token punctuation">{</span><span class="token selector">0% </span><span class="token punctuation">{</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">30% </span><span class="token punctuation">{</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">68%, 72% </span><span class="token punctuation">{</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">100% </span><span class="token punctuation">{</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>animation: duration 动画持续时间</p></li><li><p>animation-delay 动画延迟开始</p></li><li><p>animation-iteration-count 动画迭代次数, 默认为1</p></li></ul><p><a href></a><a name="525fea44"></a></p><h4 id="行内元素有哪些有什么区别"><a href="#行内元素有哪些有什么区别" class="headerlink" title="行内元素有哪些有什么区别"></a>行内元素有哪些有什么区别</h4><ul><li><p>有: span img input select strong之类的</p></li><li><p>不可以独占一行</p></li><li><p>margin-top和bottom失效</p></li></ul><p><a href></a><a name="9bcc4d59"></a></p><h4 id="link和-import区别"><a href="#link和-import区别" class="headerlink" title="link和@import区别"></a>link和@import区别</h4><p>link是可以并行下载的, 是html方式</p><p>@import是css方式, 串行下载, 会出现FOUC(<code>页面抖动</code>)</p><blockquote><p>FOUC是指页面抖动</p></blockquote><blockquote><p>什么是页面抖动?</p></blockquote><blockquote><p>就是说浏览器在使用默认样式显示文档, 用户样式加载后渲染显示了</p></blockquote><blockquote><p>新的文档, 造成了页面闪烁</p></blockquote><blockquote><p>解决方法是,把样式表放到文档head</p></blockquote><p>link是优于@import的, 尽量用link</p><p><a href></a><a name="a4a284e0"></a></p><h4 id="画一条0-5px的线"><a href="#画一条0-5px的线" class="headerlink" title="画一条0.5px的线"></a>画一条0.5px的线</h4><ol><li>采用meta viewport的方式</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="2"><li><p>采用border-image的方式</p></li><li><p>采用transform: scale()的方式</p></li></ol><p><a href></a><a name="d857472b"></a></p><h4 id="多行文本省略号"><a href="#多行文本省略号" class="headerlink" title="多行文本省略号"></a>多行文本省略号</h4><pre class=" language-javascript"><code class="language-javascript">display<span class="token punctuation">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>orient<span class="token punctuation">:</span>vertical<span class="token operator">-</span>webkit<span class="token operator">-</span>line<span class="token operator">-</span>clamp<span class="token punctuation">:</span><span class="token number">3</span>overflow<span class="token punctuation">:</span>hidden</code></pre><p><a href></a><a name="9d045bed"></a></p><h4 id="transition和animation的区别"><a href="#transition和animation的区别" class="headerlink" title="transition和animation的区别"></a>transition和animation的区别</h4><p>transition是过度动画, 没有帧的概念<br><br>animation是动画,有帧的概念</p><p>Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from …. to，而animation可以一帧一帧的。</p><p><a href></a><a name="0218c501"></a></p><h4 id="visibility-hidden-opacity-0，display-none"><a href="#visibility-hidden-opacity-0，display-none" class="headerlink" title="visibility=hidden, opacity=0，display:none"></a>visibility=hidden, opacity=0，display:none</h4><p>opacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。</p><p><a href></a><a name="4c29abc7"></a></p><h4 id="双边距重叠问题怎么计算"><a href="#双边距重叠问题怎么计算" class="headerlink" title="双边距重叠问题怎么计算"></a>双边距重叠问题怎么计算</h4><p>多个相邻（兄弟或者父子关系）普通流的块元素垂直方向marigin会重叠</p><p>折叠的结果为：</p><ul><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</li><li>两个外边距一正一负时，折叠结果是两者的相加的和。</li></ul><p><a href></a><a name="8b33d1b9"></a></p><h4 id="display：table和本身的table有什么区别"><a href="#display：table和本身的table有什么区别" class="headerlink" title="display：table和本身的table有什么区别"></a>display：table和本身的table有什么区别</h4><p><code>display:table</code>和本身table是相对应的，区别在于，display：table的css声明能够让一个html元素和它的子节点像table元素一样，使用<code>基于表格的css布局</code>，是我们能够轻松定义一个单元格的边界，背景等样式，而<code>不会产生因为使用了table那样的制表标签导致的语义化问题。</code></p><p>之所以现在逐渐淘汰了table系表格元素，是因为用<code>div+css编写出来的文件比用table边写出来的文件小</code>，<code>而且table必须在页面完全加载后才显示，div则是逐行显示，table的嵌套性太多，没有div简洁</code></p><p><a href></a><a name="c2d3394c"></a></p><h4 id="z-index的定位方法"><a href="#z-index的定位方法" class="headerlink" title="z-index的定位方法"></a>z-index的定位方法</h4><p>z-index属性设置元素的堆叠顺序，拥有更好堆叠顺序的元素会处于较低顺序元素之前，<code>z-index可以为负</code>，</p><p>且z-index只能在<code>定位元素上奏效</code>，该属性设置一个定位元素沿z轴的位置，如果为正数，离用户越近，为负数，离用户越远，它的属性值有auto，默认，堆叠顺序与父元素相等，number，inherit，从父元素继承z-index属性的值</p><p><a href></a><a name="fbfaf520"></a></p><h4 id="设置一个元素的背景颜色，背景颜色会填充哪些区域"><a href="#设置一个元素的背景颜色，背景颜色会填充哪些区域" class="headerlink" title="设置一个元素的背景颜色，背景颜色会填充哪些区域"></a>设置一个元素的背景颜色，背景颜色会填充哪些区域</h4><p>background-color设置的背景颜色会填充元素的content、padding、border区</p><p><a href></a><a name="25b1cf21"></a></p><h4 id="inline-block、inline和block的区别"><a href="#inline-block、inline和block的区别" class="headerlink" title="inline-block、inline和block的区别"></a>inline-block、inline和block的区别</h4><ul><li><p>Block是块级元素，其前后都会有换行符，能设置宽度，高度，margin/padding水平垂直方向都有效。</p></li><li><p>Inline：设置width和height无效，margin在竖直方向上无效，padding在水平方向垂直方向都有效，前后无换行符</p></li><li><p>Inline-block：能设置宽度高度，margin/padding水平垂直方向 都有效，<code>前后无换行符</code></p></li></ul><blockquote><p>换行符也就是平时看图片间有3px间隔的原因</p></blockquote><p><a href></a><a name="5de9964c"></a></p><h4 id="浏览器的窗口大小"><a href="#浏览器的窗口大小" class="headerlink" title="浏览器的窗口大小"></a>浏览器的窗口大小</h4><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5a2bk61ivj30zk0ikwib.jpg#alt=" alt></p><p><a href></a><a name="56df73a6"></a></p><h4 id="em是相对于父元素的还是相对于自身"><a href="#em是相对于父元素的还是相对于自身" class="headerlink" title="em是相对于父元素的还是相对于自身"></a>em是相对于父元素的还是相对于自身</h4><p>相对于自身但是一般来说不会相对自身来写就直接从父元素继承了</p><p><a href></a><a name="cff2ea80"></a></p><h4 id="什么是SVG"><a href="#什么是SVG" class="headerlink" title="什么是SVG"></a>什么是SVG</h4><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br><br>SVG 用来定义用于网络的基于矢量的图形<br><br>SVG 使用 XML 格式定义图形<br><br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br><br>SVG 是万维网联盟的标准<br><br>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体<br><br><code>(SVG是HTML下的一个分支)</code></p><p><a href></a><a name="2da3ba43"></a></p><h4 id="什么是outline"><a href="#什么是outline" class="headerlink" title="什么是outline"></a>什么是outline</h4><p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。<br><br>注释：轮廓线不会占据空间，也不一定是矩形。</p><p><a href></a><a name="8bc7170e"></a></p><h4 id="css设置链接样式"><a href="#css设置链接样式" class="headerlink" title="css设置链接样式"></a>css设置链接样式</h4><p>a:link,a:visited,a:hover,a:active 分别是什么意思?</p><ol><li>link:连接平常的状态</li><li>visited:连接被访问过之后</li><li>hover:鼠标放到连接上的时候</li><li><code>active:连接被按下的时候</code></li></ol><blockquote><p>正确顺序：`“爱恨原则”（LoVe/HAte），即四种伪类的首字母:LVHA。再重复一遍正确的顺序：a:link、a:visited、a:hover、a:active .</p></blockquote><p>因为当鼠标经过未访问的链接，会同时拥有a:link、a:hover两种属性，a:link离它最近，所以它优先满足a:link，而放弃a:hover的重复定义。当鼠标经过已经访问过的链接，会同时拥有a:visited、a:hover两种属性，a:visited离它最近，所以它优先满足a:visited，而放弃a:hover的重复定义。究其原因，是css的就近原则“惹的祸”。</p><p><a href></a><a name="8cbe1c49"></a></p><h4 id="什么是置换元素"><a href="#什么是置换元素" class="headerlink" title="什么是置换元素"></a>什么是置换元素</h4><p><code>a) 置换元素：</code></p><p>浏览器根据元素的标签和属性，来决定元素的具体显示内容。</p><p>例如：浏览器会根据标签的src属性的 值来读取图片信息并显示出来，而如果查看html代码，则看不到图片的实际内容；标签的type属性来决定是显示输入 框，还是单选按钮等。 html中 的、、、</p><p><code>b) 不可替换元素：</code></p><p>html 的大多数元素是不可替换元素，即其内容直接表现给用户端（如浏览器）。</p><p>例如： label中的内容 标签是一个非置换元素，文字label中的内容”将全被显示。</p><p><a href></a><a name="a6bda5e5"></a></p><h4 id="如果需要手写动画-最小时间间隔是多少"><a href="#如果需要手写动画-最小时间间隔是多少" class="headerlink" title="如果需要手写动画, 最小时间间隔是多少?"></a>如果需要手写动画, 最小时间间隔是多少?</h4><p>多数的显示器是60hz, 1s刷新60次, 理论上最小间隔为1/60 = 16.7ms<br><br>但是实际上留给浏览器渲染的时间还是保持在10ms为好</p><p><a href></a><a name="49e659cc"></a></p><h4 id="单冒号和-双冒号什么区别"><a href="#单冒号和-双冒号什么区别" class="headerlink" title=":单冒号和::双冒号什么区别"></a>:单冒号和::双冒号什么区别</h4><p>双冒号::是创建伪元素</p><blockquote><p>::after</p></blockquote><blockquote><p>::before</p></blockquote><p>:单冒号是伪类, 也就是说不加伪元素</p><blockquote><p>:hover</p></blockquote><blockquote><p>:link</p></blockquote><p><a href></a><a name="11820e83"></a></p><h4 id="nth-of-type和nth-child的区别"><a href="#nth-of-type和nth-child的区别" class="headerlink" title="nth-of-type和nth-child的区别"></a>nth-of-type和nth-child的区别</h4><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190810213800.png#alt=" alt><br><br>如果有参数的话比如3n+1，就迭代n从0开始找元素</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript要点</title>
      <link href="/2019/08/18/javascript-yao-dian/"/>
      <url>/2019/08/18/javascript-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="ES6"></a></p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p><a name="f7fa5f4a"></a></p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>可以用export来对外暴露函数, 外部通过import来引入函数</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951710-7df56948-f88a-475b-a7d1-aecd86c6c532.jpeg#align=left&display=inline&height=228&originHeight=228&originWidth=327&size=0&status=done&width=327" alt></p><p><a name="9db6aea8"></a></p><h4 id="简单介绍一下symbol"><a href="#简单介绍一下symbol" class="headerlink" title="简单介绍一下symbol"></a>简单介绍一下symbol</h4><p>主要是为了解决命名重复问题，可以在对象属性的时候用到，但是不会被枚举</p><blockquote><p>代表用给定名称作为唯一标识，这种类型的值可以这样创建，<code>let id=symbol(“id”)</code><br>Symbl确保唯一，<code>即使采用相同的名称，也会产生不同的值</code><br><code>Object.getOwnPropertySymbols(obj)</code>可以获得所有的symbol。<br>Symbol类型的key是不能通过<code>Object.keys()</code>或者<code>for...in</code>来枚举的</p></blockquote><p><a name="d86f8699"></a></p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>解决了this指向全局的问题, 这里改为了指向当前</p><p>也就是this指向的是当前环境</p><p>箭头函数没有自己的arguments对象，但是可以访问外围函数的arguments对象</p><p><a name="2b9d3d15"></a></p><h4 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h4><ol><li>里面的构造函数写在constructor里面</li><li>并且函数添加是用add(){}, 并没有function关键字</li><li>继承者用extends 父类来继承对象</li><li>构造函数要用到super()来引入继承的构造函数</li></ol><pre><code>class Monkeyi extends Animal {   constructor(type, name) {     super(type, name); // 继承父类     this.x = 2;   }   toString() {     return  &quot;monkey is&quot; `${this.type}` &quot;,name is &quot;`{ this.name}`;   } }</code></pre><p>map多了个set()和get()的方法,     set是使用add()来进行添加的</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566111951706-08e36910-5c94-4dce-b795-bdd3a3e43b1b.png#align=left&display=inline&height=504&originHeight=504&originWidth=537&size=0&status=done&width=537" alt></p><p>他们两个的方法其实都是差不多的, 都是迭代的作用</p><p>map的key可以是任意数据类型, 包括对象</p><p>set类似数组, 但是不允许有重复的元素出现</p><p><a name="eb9715b4"></a></p><h4 id="set和map"><a href="#set和map" class="headerlink" title="set和map"></a>set和map</h4><p>Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><p>promise.all等待传入的请求都完成后才进行下一步,    <strong>成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值</strong></p><p><a name="80f25fb1"></a></p><h4 id="说下promise-all和promise-race"><a href="#说下promise-all和promise-race" class="headerlink" title="说下promise.all和promise.race"></a>说下promise.all和promise.race</h4><p>promise.all等待传入的请求都完成后才进行下一步,    <strong>成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值</strong></p><p>Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><p><a name="eb9715b4-1"></a></p><h4 id="set和map-1"><a href="#set和map-1" class="headerlink" title="set和map"></a>set和map</h4><p>set类似数组, 但是不允许有重复的元素出现</p><p>map的key可以是任意数据类型, 包括对象</p><p>他们两个的方法其实都是差不多的, 都是迭代的作用</p><p><img src="%5Bhttp://upload-images.jianshu.io/upload_images/10750013-295c87ec6115e87b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240%5D(http://upload-images.jianshu.io/upload_images/10750013-295c87ec6115e87b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"> “”屏幕截图.png””)</p><p>map多了个set()和get()的方法,     set是使用add()来进行添加的</p><p><a name="8d1a8692"></a></p><h1 id="严格模式有哪些限制"><a href="#严格模式有哪些限制" class="headerlink" title="严格模式有哪些限制"></a>严格模式有哪些限制</h1><ol><li><p>最明显的就是， 所有变量前面都要用<code>var / let</code>定义</p></li><li><p><code>禁制this</code>指向全局对象, <code>严格模式下的this值就是undefined</code></p></li><li><p><code>禁用了with()</code>语句, 很正常, with本来性能就不好</p></li><li><p>参数和属性不可以重名</p></li><li><p>禁制用八进制表示法</p></li><li><p><code>函数带有申明的就必须写在顶层</code></p></li><li><p>现在的arguments只能用来表示传入的参数, 是不可写的, 并且不可以使用<code>arguments.callee()</code><br><br>这也是很正常的, arguments.callee()用于匿名函数调用自身本身就会有很多问题, 比如递归调用的时候回获取到不同的this, <code>arguments.callee.caller</code>也被废弃了<br><br><code>解决方法</code>用命名函数表达式就可以了</p></li><li><p><code>eval单独作用域</code>, 正常模式下不推荐使用eval, 就是因为其作用域很影响性能, 但是严格模式就很ok , eval的作用域是单独的, 和全局作用域还有局部作用域都无关</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var a = 2;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a 作用域只有在eval中才能访问</span></code></pre></li><li><p>禁制在函数内部遍历调用栈<br><br>functio.caller和function.arguments会报错</p></li><li><p>严格模式下无法删除变量, 只有在configurable设置为true的对象属性才可以被删除</p></li><li><p>对一个对象的只读属性进行赋值会报错</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> <span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> writable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>其他的就和上面比较类似, 就是<code>说了不可以删除, 那就是不可删除 , 说了是只读属性就不可以写入, 什么保留字啊我们在开发过程中没必要去触碰风险</code></p></li></ol><p><a name="03ca9c9b"></a></p><h1 id="JavaScript中垃圾回收机制"><a href="#JavaScript中垃圾回收机制" class="headerlink" title="JavaScript中垃圾回收机制"></a>JavaScript中垃圾回收机制</h1><ol><li>标记清除</li><li>引用计数法</li></ol><hr><p><code>标记清除</code></p><p>这是最常见的垃圾回收方式,      设置为null,    会被垃圾回收机制定时清除,    也可以强制清除</p><p><code>引用计数法</code></p><p>不是很好用, 因为会循环引用</p><p>用引用计数法会存在内存泄露，下面来看原因：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objA<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objB<span class="token punctuation">;</span>    objB<span class="token punctuation">.</span>anotherObject <span class="token operator">=</span> objA<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>特别是在DOM对象中，也容易存在这种问题：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> element<span class="token operator">=</span>document<span class="token punctuation">.</span>getElementById（’‘）；<span class="token keyword">var</span> myObj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span>element<span class="token operator">=</span>element<span class="token punctuation">;</span>element<span class="token punctuation">.</span>someObject<span class="token operator">=</span>myObj<span class="token punctuation">;</span></code></pre><p><a name="326d068e"></a></p><h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><p><code>所有对象都有自己的原型对象（prototype）原型链的尽头就是null。</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951764-071b7794-bb51-45e2-b484-3adfc718692a.jpeg#align=left&display=inline&height=718&originHeight=718&originWidth=654&size=0&status=done&width=654" alt>j’s</p><p>为了解决<code>共享属性问题</code></p><p>同一个构造函数创建的<code>实例之间是无法共享属性的</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951699-425ed32c-234d-4436-a80d-278c5f357267.jpeg#align=left&display=inline&height=416&originHeight=416&originWidth=572&size=0&status=done&width=572" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951739-13142037-381c-4c1f-8dfe-acbd5bac4aad.jpeg#align=left&display=inline&height=139&originHeight=139&originWidth=520&size=0&status=done&width=520" alt></p><p>判断对象是不是另一个对象的原型</p><ul><li><code>instanceof</code>判断是不是原型的`实例``</li><li><code>isPrototypeOf() || Object.getPrototypeOf()</code>判断是不是原型</li><li><code>hasOwnProperty() || in</code>判断是不是<code>原型中的属性还是实例自己的属性</code></li></ul><p><code>_proto_</code>已废弃</p><blockquote><p>他是对象的一个属性<br>instance.constructor.prototype === instance.<em>proto</em><br>实例的构造者就是构造函数, 构造函数原型就是等于实例的原型</p></blockquote><p>constructor类似双向链表的front修改原型的时候也要修改constructor</p><p>prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。</p><p><code>constructor属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951715-f0ba7a01-4006-44f0-954f-de4bbe771070.jpeg#align=left&display=inline&height=305&originHeight=305&originWidth=754&size=0&status=done&width=754" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951771-2c967ecd-78e6-4819-acd9-44f6cafde5aa.jpeg#align=left&display=inline&height=584&originHeight=584&originWidth=907&size=0&status=done&width=907" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951755-b02b29fb-6a5a-4f94-9a9d-4eb2aed2ea46.jpeg#align=left&display=inline&height=1080&originHeight=1080&originWidth=1478&size=0&status=done&width=1478" alt></p><p><a name="5ca0c95b"></a></p><h1 id="讲下js的继承"><a href="#讲下js的继承" class="headerlink" title="讲下js的继承"></a>讲下js的继承</h1><p><a name="43385c22"></a></p><h4 id="1-构造函数继承"><a href="#1-构造函数继承" class="headerlink" title="1. 构造函数继承"></a>1. 构造函数继承</h4><p>(<code>继承构造函数</code>), 也叫类抄写, 比如我们在考试, 你写了一个构造函数, 我要继承你的构造函数, 就在我的构造函数里面用call或者cpply抄写一份你的东西, <code>我给你题目你给我答案</code>, 当然我抄完后还可以在自己的构造函数的<code>选做题</code>里面放一些自己的东西</p><p>案例:    构建树节点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// apply</span><span class="token punctuation">}</span></code></pre><hr><p><a name="2f001441"></a></p><h4 id="2-原型链继承"><a href="#2-原型链继承" class="headerlink" title="2. 原型链继承"></a>2. 原型链继承</h4><p>也叫类继承(<code>也是继承构造函数</code>), 最简单的继承, 比如老大是原型, 你是二当家, 其他人都是小弟都叫实例<code>继承了二当家, 当然默认也是继承了老大</code>, 我们这个帮派一旦老大或者二当家有政策发布, 下面的小弟都要修改</p><p>这就是原型链继承,</p><p>缺点是, <code>上级改动, 下级都要跟着修改</code></p><pre class=" language-javascript"><code class="language-javascript">Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父类的实例作为子类的原型</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 手动指定constructor</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><a name="610db819"></a></p><h4 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h4><blockquote><p>部分引用构造,    部分用原型,    可以自定义私有属性</p></blockquote><p>(<code>继承构造函数</code>), 什么意思, 我们在构造函数基础的基础上再进行讲述</p><p>我还是要抄你试卷, 首先我还是要<code>全抄!!!</code>, 因为你是学霸</p><p>但是我不想只抄一遍, 你有些大题改了我也要知道, 所以你就把你的试卷分成两部分, 一部分是给我<code>给你题目你给我对于的答案, 这部分放在构造函数内</code>, 你可能要修改的部分改了要告诉我, 你就把答案放在你的<code>原型里面</code>你改了我也改</p><p>当然我也可以有自己的想法, 可以加一些自己的答案</p><p>缺点: 调用了两次父类构造函数, 耗费内存, 第一次是让你帮我做题, new一个你的构造函数返回给我, <code>目的是为了成为你的实例好去引用你的原型</code></p><blockquote><p>使用 new 操作符调用了一次构造函数<br>有方法避免多次调用直接去掉 new 操作符<br>写成 Child.prototype = Parent.prototype<br>但是这样并不好，虽然避免出现重复调用但导致修改子类 constructor 的时候父类也被修改了, 也就是<code>如果我再试卷上签了自己的名字</code>那么意味着你的原型的构造者不在是你的构造函数, 而是我的了</p></blockquote><p>这是组合式继承的唯一缺点<code>调用了两次父类构造函数, 生成了两份实例</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用一次父类构造函数, 生成一个实例</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 又调用一次父类构造函数, 生成一个实例</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child</code></pre><hr><p><a name="8701bc4b"></a></p><h4 id="4-原型式继承-继承对象-拷贝继承"><a href="#4-原型式继承-继承对象-拷贝继承" class="headerlink" title="4. 原型式继承(继承对象) 拷贝继承"></a>4. 原型式继承(<code>继承对象</code>) 拷贝继承</h4><p>用es5的object.create(对象)返回一个实例给我抄</p><p>原理是浅拷贝</p><p>我直接抄袭你的对象, 我不想改, 没有想法</p><p>抄袭对象的话不用签名的, 也就是不用constructor</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    Child<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 也可以用ES5的</span><span class="token keyword">var</span> Child <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><a name="4357f4e9"></a></p><h4 id="5-寄生式继承-继承对象"><a href="#5-寄生式继承-继承对象" class="headerlink" title="5. 寄生式继承(继承对象)"></a>5. 寄生式继承(<code>继承对象</code>)</h4><p><code>增强对象</code></p><p>原型式继承的基础上为子类增加属性和方法, 就是继承了对方也添加了自己的方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"增强了对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p><a name="4517e270"></a></p><h4 id="6-寄生组合式继承（用中介存储）完美"><a href="#6-寄生组合式继承（用中介存储）完美" class="headerlink" title="6. 寄生组合式继承（用中介存储）完美"></a>6. 寄生组合式继承（<code>用中介存储</code>）完美</h4><p>通过<code>寄生方式，砍掉父类的实例属性</code>，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><p><code>解决了之前组合继承的两次调用父类构造函数问题</code></p><p>那么第一次调用父类构造函数是不可避免的, 就是parent.call(this)这个是不可省略的</p><p>要精简的是组合式继承的第二次通过调用<code>new Parent()</code>想办法来解决这次的调用</p><p>之前说过不用new,改用parent.prototype来公用同一个原型是不合理的</p><p>因为如果我的原型的constructor指向了我自己的构造函就会导致原型的constructor也会改成我的构造函数, 就不合理了, 因为原型的构造函数还是要指向我的父类的</p><p>那么就可以用到<code>原型式继承</code>的解决方案来解决,</p><blockquote><p>即在原型中间新建一个空的构造函数作为中介, 然后如果我执行<strong>child.prototype.constructor=child就不会影响parent.constructor指向我</strong>会变成空构造函数的构造者变成了我</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951764-65180cc4-7c23-4aa9-8d56-64048055ef28.jpeg#align=left&display=inline&height=385&originHeight=385&originWidth=1019&size=0&status=done&width=1019" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一: </span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> fuc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新建一个中介空function</span>fuc<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用的是空构造函数,就是这里优化了组合继承</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二: </span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> Child  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="a7d2846b"></a></p><h4 id="7-es6的calss继承-推荐使用"><a href="#7-es6的calss继承-推荐使用" class="headerlink" title="7. es6的calss继承(推荐使用)"></a>7. es6的calss继承(<code>推荐使用</code>)</h4><p>优秀的写法,     推荐使用,     语法很清晰</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 该属性在构造函数上，不共享</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends    <span class="token punctuation">}</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 该方法在原型上，共享</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>share <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 原型上的属性，共享</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 继承父类构造函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="530e419b"></a></p><h1 id="闭包的原理-作用-缺点"><a href="#闭包的原理-作用-缺点" class="headerlink" title="闭包的原理, 作用, 缺点"></a>闭包的原理, 作用, 缺点</h1><p><code>（1）什么是闭包：</code></p><p>闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。当在一个函数内定义另外一个函数就会产生闭包。</p><p><code>（2）为什么要用：</code></p><ul><li><p><code>匿名自执行函数：</code>有的函数只需要执行一次，其内部变量无需维护，可以用闭包。</p></li><li><p><code>结果缓存：保存变量</code>我们将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。</p></li><li><p><code>封装：实现类和继承等。</code></p><p>  <code>(3) 缺点</code></p></li></ul><p>闭包会常驻内存, 会增大内存使用, 使用不当就会有内存泄漏</p><p><a name="3019f04b"></a></p><h1 id="讲一下ajax原理和流程"><a href="#讲一下ajax原理和流程" class="headerlink" title="讲一下ajax原理和流程"></a>讲一下ajax原理和流程</h1><p>原理就是在用户和服务器之间加了一个中间层, 通过XMLHTTPRequest()对象来向服务器发送异步请求<br>其中最关键的一就是从服务器中获得请求数据<br>通过监听readystatechange事件，<br>通过这个实例 的readyState属性来判断这个ajax请求状态，<br>其中分为0，1，2，3，4这四种状态<br><code>0未初始化</code><br><code>1载入/正在发送请求</code><br><code>2载入完成/数据接收</code><br><code>3交互/解析数据</code><br><code>4接收数据完成</code></p><p>流程就是</p><ol><li>先建立XMLHTTPRequest</li><li>设定http请求方法</li><li>设定状态变化函数</li><li>发送http请求获取异步返回的数据</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566111951754-22daa794-6137-4ff3-a91c-e48f6dd3cea5.jpeg#align=left&display=inline&height=351&originHeight=351&originWidth=797&size=0&status=done&width=797" alt></p><p><a name="d6d4daad"></a></p><h4 id="fetch和ajax-的主要区别"><a href="#fetch和ajax-的主要区别" class="headerlink" title="fetch和ajax 的主要区别"></a>fetch和ajax 的主要区别</h4><p>fetch是优化版本的ajax, 其实ajax写法比较麻烦,暴露了太多fetch就不用管那么多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Oops, error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>fetch 是全局量 window 的一个方法，它的主要特点有：<br>1、第一个参数是URL:<br>2、第二个是可选参数，可以控制不同配置的 init 对象<br>3、使用了 JavaScript Promises 来处理结果/回调:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>  credentials<span class="token punctuation">:</span> ’same<span class="token operator">-</span>origin'<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>1、fetch()返回的promise将不会拒绝http的错误状态，即使响应是一个HTTP 404或者500<br>2、在默认情况下 <code>fetch不会接受或者发送cookies</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/news'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="1c3afb0c"></a></p><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p><a name="41de7755"></a></p><h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><ol><li><code>jsonp</code>可以解决老版本浏览器跨域访问的问题, 但是只能用<code>get</code>不能用<code>post</code></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">jsonpCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'获得 X 数据:'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:3000?callback=jsonpCallback"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><a name="8ddcadf9"></a></p><h4 id="JSONP跨域原理"><a href="#JSONP跨域原理" class="headerlink" title="JSONP跨域原理"></a>JSONP跨域原理</h4><p>在页面上有三种资源是可以与页面本身不同源的:</p><ol><li>script</li><li>css</li><li>img</li></ol><blockquote><p>jsonp就是利用了</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript小知识点</title>
      <link href="/2019/08/18/javascript-xiao-zhi-shi-dian/"/>
      <url>/2019/08/18/javascript-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="51b2a30f"></a></p><h4 id="JavaScript-堆和栈有哪些"><a href="#JavaScript-堆和栈有哪些" class="headerlink" title="JavaScript 堆和栈有哪些"></a>JavaScript 堆和栈有哪些</h4><ul><li><p>栈(stack)：栈会自动分配内存空间，会自动释放，存放基本类型，简单的数据段，占据固定大小的空间。（<code>基本类型：</code>String，Number，Boolean，Null，Undefined）<code>速度快</code></p></li><li><p>堆(heap)：<code>动态分配的内存，大小不定也不会自动释放</code>，存放引用类型，指那些可能由多个值构成的对象，保存在堆内存中，包含引用类型的变量，实际上保存的不是变量本身，而是指向该对象的<code>指针</code>。（<code>引用类型：</code>Function，Array，Object）<br><br><code>可以重复引用</code></p></li></ul><p><a href></a><a name="28e177bb"></a></p><h4 id="谈谈对this的理解"><a href="#谈谈对this的理解" class="headerlink" title="谈谈对this的理解"></a>谈谈对this的理解</h4><p>this总是指向函数的调用者<br><br>如果有new 关键字,     this指向new出来的那个对象<br><br>在事件中this指向触发这个事件的对象<br><br><code>在函数内部的this就是指向函数本身</code><br><br><code>解决方法就是</code>在外面先用一个变量保存捕获this</p><p><a href></a><a name="6c2803af"></a></p><h4 id="call-bind-apply"><a href="#call-bind-apply" class="headerlink" title="call/bind/apply"></a>call/bind/apply</h4><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190810021839.png#alt=" alt></p><p>bind()方法作用主要是<code>把函数绑定到对象身上</code><br><br>例如：f.bind(obj)，实际上可以理解为obj.f()，这时f函数体内的this自然指向的是obj；<br><br>绑定了,    可以理解为,这个参数被我占用了,之后一直都是我的,    例如:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> func <span class="token operator">=</span> add<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给add()传了第一个参数a</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//103，继续传入b和c</span><span class="token keyword">var</span> func2 <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给func2传入第一个参数，也就是b，此前func已有参数a=100</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//310,继续传入c，100+200+10</span></code></pre><p>通过new的方式创建一个对象，bind()函数在this层面上并不起作用，但是需要注意在参数层面上仍起作用，如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> func <span class="token operator">=</span>  foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined 20，通过new创建对象func，bind绑定的c依旧起作用</span></code></pre><p><a href></a><a name="3e20b1b9"></a></p><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><p>let可以定义块级作用域</p><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br><br>const一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><p><a href></a><a name="41e87233"></a></p><h4 id="web-work"><a href="#web-work" class="headerlink" title="web work"></a>web work</h4><p><code>也是异步处理</code></p><p>Worker对象往js文件发送消息，js文件内部的处理逻辑，处理完毕后，再发送消息回到当前页面，纯异步方式，不影响当前主页面渲染。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//创建线程 work对象</span>        <span class="token keyword">var</span> work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"work.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//发送消息</span>        work<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听消息: 返回的消息</span>        work<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// work.js</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从1加到num</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="7c78c178"></a></p><h4 id="navigator-location"><a href="#navigator-location" class="headerlink" title="navigator  location"></a>navigator  location</h4><p>window.navigate 与 window.location.href 都是实现页面的链接跳转</p><p>window.navigate(‘页面链接地址’) 这个方法是只针对IE,    忘记他</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> userAgentInfo <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>   <span class="token keyword">var</span> Agents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Android"</span><span class="token punctuation">,</span> <span class="token string">"iPhone"</span><span class="token punctuation">,</span>      <span class="token string">"SymbianOS"</span><span class="token punctuation">,</span> <span class="token string">"Windows Phone"</span><span class="token punctuation">,</span>      <span class="token string">"iPad"</span><span class="token punctuation">,</span> <span class="token string">"iPod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>Navigator 对象包含有关浏览器的信息</p><ul><li>window.location.href 返回当前页面的 href (URL)</li><li>window.location.hostname 返回 web 主机的域名</li><li>window.location.pathname 返回当前页面的路径或文件名</li><li>window.location.protocol 返回使用的 web 协议（http: 或 https:）</li><li>window.location.assign 加载新文档</li></ul><p><a href></a><a name="51c2e5b0"></a></p><h4 id="为什么会在低端机上出现动画不流畅抖动等问题"><a href="#为什么会在低端机上出现动画不流畅抖动等问题" class="headerlink" title="为什么会在低端机上出现动画不流畅抖动等问题"></a>为什么会在低端机上出现动画不流畅抖动等问题</h4><p><code>屏幕分辨率问题</code></p><p>屏幕间隔不一定会和设置的步调相同,    使用<code>requestanimationframe</code>可以解决问题</p><p>setTimeout和setInterval的问题是，它们都不精确。它们的内在<a href="http://www.cnblogs.com/xiaohuochai/p/5773183.html#anchor3" target="_blank" rel="noopener">运行机制</a>决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行<code>放入到异步队列里面只有主线程完成后才去执行异步队列,    导致执行时间不确定</code></p><p>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果</p><blockquote><p>requestAnimationFrame会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率</p></blockquote><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><p><a href></a><a name="96f553f6"></a></p><h4 id="Dom0-dom2-dom3"><a href="#Dom0-dom2-dom3" class="headerlink" title="Dom0 dom2 dom3"></a>Dom0 dom2 dom3</h4><ol><li>dom0 事件就是直接通过 onclick 绑定到 html上的事件,     清理dom0 事件时，只需给该事件赋值为 null</li><li>dom2 事件是通过 addEventListener 绑定的事件,  按照绑定顺序执行,  清除 dom2 事件时，使用 removeEventListener</li><li>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型, focus之类的</li></ol><p><a href></a><a name="03da32b8"></a></p><h4 id="Object-create实现原理"><a href="#Object-create实现原理" class="headerlink" title="Object.create实现原理"></a>Object.create实现原理</h4><p>其实就是新建一个空函数<br><br>把传入对象作为新函数的原型并返回它, 来处理</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：将传入的对象作为原型</span><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="955ab1a8"></a></p><h4 id="mouseover和mouseenter的区别"><a href="#mouseover和mouseenter的区别" class="headerlink" title="mouseover和mouseenter的区别"></a>mouseover和mouseenter的区别</h4><p><code>mouseover：</code>当鼠标移入元素或<code>其子元素都会触发事件，所以有一个重复触发，冒泡的过程</code>。对应的移除事件是<code>mouseout</code></p><p><code>mouseenter</code>：当鼠标移入元素本身（<code>不包含元素的子元素</code>）会触发事件，也就是<code>不会冒泡</code>，对应的移除事件是<code>mouseleave</code></p><p><a href></a><a name="92f293aa"></a></p><h4 id="offWidth-clientWidth-scrollwidth有什么区别"><a href="#offWidth-clientWidth-scrollwidth有什么区别" class="headerlink" title="offWidth/clientWidth/scrollwidth有什么区别"></a>offWidth/clientWidth/scrollwidth有什么区别</h4><p><code>scrollWidth/scrollHeight</code></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g3h5k5tfulj30fu09t74q.jpg#alt=image-20190528172033567" alt></p><p><code>clientWidth/clientHeight</code>内两层</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g3h5kz8solj309k07fwfv.jpg#alt=image-20190528172121211" alt></p><p><code>offWidth/offHeight</code>内三层</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g3h5lc8xjaj30al062wf0.jpg#alt=image-20190528172142007" alt></p><p><a href></a><a name="0f49941b"></a></p><h4 id="eval是做什么的"><a href="#eval是做什么的" class="headerlink" title="eval是做什么的"></a>eval是做什么的</h4><p>它的功能是将对应的字符串解析成js并执行，应该避免使用js，因为非常消耗性能<code>（2次，一次解析成js，一次执行）</code></p><p><a href></a><a name="17a2c129"></a></p><h4 id="js有没有块级作用域"><a href="#js有没有块级作用域" class="headerlink" title="js有没有块级作用域"></a>js有没有块级作用域</h4><p>一般情况下是没有块级作用域的</p><p>let可以</p><p>with 基本都不会用<br><br>try-catch catch可以创建块级作用域但是性能很低<br><br>eval</p><p><a href></a><a name="6f573683"></a></p><h4 id="如何实现一个私有变量"><a href="#如何实现一个私有变量" class="headerlink" title="如何实现一个私有变量"></a>如何实现一个私有变量</h4><p>(1)通过defineProperty来实现</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token operator">=</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span>yuxiaoliang<span class="token punctuation">,</span>  getName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//不可枚举不可配置 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href></a><a name="59ba4ccf"></a></p><h4 id="和-、以及Object-is的区别"><a href="#和-、以及Object-is的区别" class="headerlink" title="==和===、以及Object.is的区别"></a>==和===、以及Object.is的区别</h4><p><code>(1) ==</code></p><p>主要存在：强制转换成</p><pre class=" language-javascript"><code class="language-javascript">number<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token operator">==</span>undefined   <span class="token string">" "</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token comment" spellcheck="true">//true </span>  <span class="token string">"0"</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token comment" spellcheck="true">//true </span>  <span class="token string">" "</span> <span class="token operator">!=</span><span class="token string">"0"</span> <span class="token comment" spellcheck="true">//true </span>  <span class="token number">123</span><span class="token operator">==</span><span class="token string">"123"</span> <span class="token comment" spellcheck="true">//true </span>  <span class="token keyword">null</span><span class="token operator">==</span>undefined <span class="token comment" spellcheck="true">//true</span></code></pre><p><code>(2)Object.js</code></p><p>主要的区别就是+0！= -0 而NaN==NaN<br><br>(相对比===和==的改进)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 特例</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// false</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true</span></code></pre><p><a href></a><a name="631c0c3a"></a></p><h4 id="setTimeout、requestAnimationFrame之间的区别"><a href="#setTimeout、requestAnimationFrame之间的区别" class="headerlink" title="setTimeout、requestAnimationFrame之间的区别"></a>setTimeout、requestAnimationFrame之间的区别</h4><p>requestAnimationFrame为的是动画设定的, 为了其他的不干扰动画的重绘</p><p>requestAnimationFrame<code>采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制</code>，增加开销；<code>也不会因为间隔时间太长，使用动画卡顿不流畅</code>，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果</p><blockquote><p>requestAnimationFrame的用法与settimeout很相似，只是不需要设置时间间隔而已。</p></blockquote><p>requestAnimationFrame使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递cancelAnimationFrame用于取消这个函数的执行</p><pre class=" language-javascript"><code class="language-javascript">requestID <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制台输出1和0</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><p><code>cancelAnimationFrame方法用于取消定时器</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//控制台什么都不输出</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>也可以直接使用返回值进行取消</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为ie9不支持requestAnimationFrame</p><p><code>可以用setTimeout来兼容</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>requestAnimationFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> currTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> timeToCall <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16.7</span><span class="token operator">-</span><span class="token punctuation">(</span>currTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> id  <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>currTime <span class="token operator">+</span> timeToCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>timeToCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastTime <span class="token operator">=</span> currTime <span class="token operator">+</span> timeToCall<span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>cancelAnimationFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="3adae073"></a></p><h4 id="Function-proto-getPrototypeOf-是什么"><a href="#Function-proto-getPrototypeOf-是什么" class="headerlink" title="Function.proto(getPrototypeOf)是什么"></a>Function.<em>proto</em>(getPrototypeOf)是什么</h4><p>Function.<strong>proto</strong>==Object.prototype //false</p><p>Function.<strong>proto</strong>==Function.prototype//true</p><p>我们发现Function的原型也是Function。</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5565o628lj30zd0shdk2.jpg#alt=image-20190719151506671" alt></p><p><a href></a><a name="822a992b"></a></p><h4 id="怎么进行js类型判断"><a href="#怎么进行js类型判断" class="headerlink" title="怎么进行js类型判断"></a>怎么进行js类型判断</h4><p><code>typeof()</code><br><br><code>instanceof</code> instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。<br><br><code>Object.prototype.toString.call()等</code></p><p><a href></a><a name="a2e60d94"></a></p><h4 id="什么叫暂停死区"><a href="#什么叫暂停死区" class="headerlink" title="什么叫暂停死区"></a>什么叫暂停死区</h4><p>在代码块内，使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”</p><p><a href></a><a name="e1c44c61"></a></p><h4 id="什么是按需加载"><a href="#什么是按需加载" class="headerlink" title="什么是按需加载"></a>什么是按需加载</h4><p><code>当用户触发了动作时才加载对应的功能。</code>触发的动作，是要看具体的业务场景而言，包括但不限于以下几个情况：鼠标点击、输入文字、拉动滚动条，鼠标移动、窗口大小更改等。加载的文件，可以是JS、图片、CSS、HTML等。</p><p><a href></a><a name="9d1b91e7"></a></p><h4 id="静态作用域什么意思"><a href="#静态作用域什么意思" class="headerlink" title="静态作用域什么意思"></a>静态作用域什么意思</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里结果并不是2, 而是1<br><br>是因为js是静态作用域<br><br>也就是说在函数定义的时候就定好了</p><p>假设JavaScript采用动态作用域，让我们分析下执行过程：执行foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p><p><a href></a><a name="32b825b8"></a></p><h4 id="如果已经有三个promise，A、B和C，想串行执行，该怎么写"><a href="#如果已经有三个promise，A、B和C，想串行执行，该怎么写" class="headerlink" title="如果已经有三个promise，A、B和C，想串行执行，该怎么写"></a>如果已经有三个promise，A、B和C，想串行执行，该怎么写</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// promise</span>A<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// async/await</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href></a><a name="55a04949"></a></p><h4 id="箭头函数和function有什么区别"><a href="#箭头函数和function有什么区别" class="headerlink" title="箭头函数和function有什么区别"></a>箭头函数和function有什么区别</h4><p>箭头函数根本就没有绑定自己的this，在箭头函数中调用 this 时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用</p><p><a href></a><a name="c6b50765"></a></p><h4 id="JSON互转为对象"><a href="#JSON互转为对象" class="headerlink" title="JSON互转为对象"></a>JSON互转为对象</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// JSON字符串转换为JSON对象</span><span class="token keyword">var</span> jsonObj<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JSON对象转为字符串</span><span class="token keyword">var</span> d <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p><a href></a><a name="795a68fe"></a></p><h4 id="xml和json有什么区别"><a href="#xml和json有什么区别" class="headerlink" title="xml和json有什么区别"></a>xml和json有什么区别</h4><p>JSON：js的对象表示法（JS Object Notation）<br><br>JSON：存储和交换文本信息的语法，类似XML<br><br>JSON比XML更小、更快、更易解析</p><p>附赠：JSON &amp; XML<br><br>可读性：差不多，XML可读性更好一些<br><br>可扩展性：差不多<br><br>编码难度：JSON更容易<br><br>解析（码）难度：XML很难，JSON难度几乎为0<br><br>流行度：XML更流行。不过，在Ajax中，几乎都用JSON<br><br>数据体积：JSON体积更小，传输速度更快<br><br>数据交互：JSON和JS的交互更加方便，更容易解析处理，更好的数据交互<br><br>数据描述：XML对数据的描述更好<br><br>传输速度：JSON的速度远远快于XML</p><p><a href></a><a name="970900d8"></a></p><h4 id="JavaScript有哪些方法定义对象"><a href="#JavaScript有哪些方法定义对象" class="headerlink" title="JavaScript有哪些方法定义对象"></a>JavaScript有哪些方法定义对象</h4><ul><li>对象字面量 var obj = {}</li><li>构造函数 var obj = new Object()</li><li>var obj = object.create(Object.prototype)</li></ul><p><a href></a><a name="ac7cebe9"></a></p><h4 id="讲一下什么是渐进增强和优雅降级"><a href="#讲一下什么是渐进增强和优雅降级" class="headerlink" title="讲一下什么是渐进增强和优雅降级"></a>讲一下什么是渐进增强和优雅降级</h4><p><code>渐进增强</code></p><p>是增对浏览器进行构建页面, 保证最基本的内容, 然后再对高级浏览器进行效果交互改进</p><p><code>优雅降级</code></p><p>就是直接做高级内容, 然后在对老式浏览器进行兼容</p><p><a href></a><a name="b6f6a607"></a></p><h4 id="…spread什么意思"><a href="#…spread什么意思" class="headerlink" title="…spread什么意思"></a>…spread什么意思</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5 的写法</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ES6 的写法</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  等同于</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href></a><a name="05539600"></a></p><h4 id="怎么解决回调地狱"><a href="#怎么解决回调地狱" class="headerlink" title="怎么解决回调地狱"></a>怎么解决回调地狱</h4><p>说起回调地狱 首先想到的是<code>异步</code>  在js中我们经常会大量使用异步回调，例如使用<code>ajax</code>请求</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">functionb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们发现上面代码大量使用了回调函数（将一个函数作为参数传递给另个函数）并且有许多 <code>})</code>结尾的符号，使得代码看起来很混乱。</p><p><code>1. 可以使用promise</code>使用then来处理回调</p><p><code>2. 使用generate</code>函数生成器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ni hao"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><code>3. 使用async/await</code>使用异步函数, await表示等待异步值返回</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="f3eee51e"></a></p><h4 id="怎么实现轮播"><a href="#怎么实现轮播" class="headerlink" title="怎么实现轮播"></a>怎么实现轮播</h4><p>图片轮播的原理就是图片排成一行，然后准备一个只有一张图片大小的容器，对这个容器设置超出部分隐藏，在控制定时器来让这些图片整体左移或右移，这样呈现出来的效果就是图片在轮播了。</p><p><code>如果有两个轮播</code>，可封装一个轮播组件，供两处调用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础点</title>
      <link href="/2019/08/18/javascript-ji-chu-dian/"/>
      <url>/2019/08/18/javascript-ji-chu-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="5c9d4b9d"></a></p><h4 id="for-…-of循环和for-…-in循环有何区别"><a href="#for-…-of循环和for-…-in循环有何区别" class="headerlink" title="for … of循环和for … in循环有何区别"></a>for … of循环和for … in循环有何区别</h4><blockquote><p><code>for ... in</code>循环遍历的实际上是对象的属性名称</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '0', '1', '2', 'name'</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'A', 'B', 'C'</span><span class="token punctuation">}</span></code></pre><p><a name="2cc2e048"></a></p><h4 id="怎么判断变量是数组"><a href="#怎么判断变量是数组" class="headerlink" title="怎么判断变量是数组"></a>怎么判断变量是数组</h4><ol><li>用instanceof</li><li>用constructor, <code>Object.constructor === Array</code></li><li>Array. isArray(arr), 不过只支持es5以上</li><li><code>Object.prototype.toString.call(arr) === &#39;[object Array]&#39;</code>这个是非常重要的!!!,ES5内部其实也是这么判断的</li></ol><p><a name="8285f7ff"></a></p><h4 id="讲下浅拷贝和深拷贝"><a href="#讲下浅拷贝和深拷贝" class="headerlink" title="讲下浅拷贝和深拷贝"></a>讲下浅拷贝和深拷贝</h4><p><code>浅拷贝</code>就是简单地把一个对象的属性复制到另外一个对象当中去</p><p>但是有一个问题:</p><p>如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。</p><hr><p><code>深拷贝</code>就是能够实现真正意义上的数组和对象的拷贝。</p><p>它的实现并不难，只要<code>递归调用&quot;浅拷贝&quot;</code>就行了。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134680370-76723511-9f18-4a0f-81c7-6089a85c20f8.jpeg#align=left&display=inline&height=590&originHeight=590&originWidth=754&size=0&status=done&width=754" alt></p><p><a name="c0feb0da"></a></p><h4 id="Ajax解决浏览器缓存问题"><a href="#Ajax解决浏览器缓存问题" class="headerlink" title="Ajax解决浏览器缓存问题"></a>Ajax解决浏览器缓存问题</h4><blockquote><p>主要是通过 <code>no-cache</code> 和不同的 <code>url</code> 来解决</p></blockquote><ul><li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)。</li><li>在ajax发送请求前加上 <code>anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。</code></li><li>在<code>URL后面加上一个随机数： &quot;fresh=&quot; + Math.random()。</code></li><li>在<code>URL后面加上时间搓：&quot;nowtime=&quot; + new Date().getTime()。</code><blockquote><p>这两个加上随机数和时间戳是因为, 浏览器缓存是基于url的缓存<br>如果页面允许缓存，则在一定时间内（缓存时效时间前）再次访问相同的URL，浏览器就不会再次发送请求到服务端，而是直接从缓存中获取指定资源。URL后面添加随机数后，URL就不同了，可以看做是唯一的URL（随机数恰好相同的概率非常低，可以忽略不计），<code>这样浏览器的缓存就不会匹配出URL，每次都会从服务器拉取最新的文件</code>。</p></blockquote></li></ul><p>如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</p><p><a name="efe0432d"></a></p><h4 id="说一下Commonjs、AMD和CMD"><a href="#说一下Commonjs、AMD和CMD" class="headerlink" title="说一下Commonjs、AMD和CMD"></a>说一下Commonjs、AMD和CMD</h4><p>CommonJS是NodeJS的实现规范, 分为三个模块{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p><ul><li>require()用来引入外部模块；</li><li>exports对象用于导出当前模块的方法或变量，唯一的导出口；</li><li>module对象就代表模块本身。</li></ul><hr><p><code>AMD是前期就把依赖加载进去</code>, 依赖加载<code>部分顺序</code></p><p>提前定义</p><p>它要在声明模块的时候制定所有的依赖(dep)，并且还要当做形参传到factory中，像这样：</p><pre><code>1 define([&#39;dep1&#39;,&#39;dep2&#39;],function(dep1,dep2){...});</code></pre><p>要是没什么依赖，就定义简单的模块，下面这样就可以啦：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2</span>     <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token number">3</span>     exports<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token number">4</span>     <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><code>CMD是用到的时候再去把依赖加入进去, 依赖加载分顺序</code></p><p>用require就近依赖</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="5023dcec"></a></p><h4 id="将原生的ajax封装成promise"><a href="#将原生的ajax封装成promise" class="headerlink" title="将原生的ajax封装成promise"></a>将原生的ajax封装成promise</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myNewAjax <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a name="ae7e541c"></a></p><h4 id="JS作用域有什么用"><a href="#JS作用域有什么用" class="headerlink" title="JS作用域有什么用"></a>JS作用域有什么用</h4><ol><li>避免全局污染</li><li>提升性能</li><li>避免命名冲突</li><li>有利于压缩</li><li>保存闭包状态</li><li>使用UMD结构颠倒代码顺序<blockquote><p>它是为了让模块同时兼容<code>AMD</code>和<code>CommonJs</code>规范而出现的<br>所以很丑<br>第一个自执行函数<code>iife</code></p></blockquote></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// AMD</span>  <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">,</span> <span class="token string">'underscore'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Node, CommonJS之类的</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'underscore'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 浏览器全局变量(root 即 window)</span>  root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>jQuery<span class="token punctuation">,</span> root<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    方法</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    私有方法，因为它没被返回 (见下面)</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    公共方法，因为被返回了</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    公共方法，因为被返回了</span><span class="token comment" spellcheck="true">//    暴露公共方法</span><span class="token keyword">return</span> <span class="token punctuation">{</span>  b<span class="token punctuation">:</span> b<span class="token punctuation">,</span>  c<span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="afd31d3f"></a></p><h4 id="谈谈Event-Loop中的Job-queue"><a href="#谈谈Event-Loop中的Job-queue" class="headerlink" title="谈谈Event Loop中的Job queue"></a>谈谈Event Loop中的Job queue</h4><pre class=" language-javascript"><code class="language-javascript">例<span class="token number">1</span>：<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出2,1</span></code></pre><p>当主线程任务执行完毕后，再从event loop中读取任务，因此先输出2，再输出1。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>//输出2,6,5,3,4,1</p><blockquote><p><strong><em>script(主程序代码)—&gt;process.nextTick—&gt;Promises…——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt;<br>I/O——&gt;UI rendering</em></strong></p></blockquote><p><a name="9d055866"></a></p><h4 id="实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）"><a href="#实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）" class="headerlink" title="实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）"></a>实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）</h4><p>通过递归可以简单实现对象的深度克隆，但是这种方法不管是ES6还是ES5实现，都有同样的缺陷，就是只能实现特定的object的深度复制（比如数组和函数），<code>不能实现包装对象Number，String， Boolean，以及Date对象，RegExp对象的复制。</code></p><p>递归克隆</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> newObj<span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    newObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'object'</span><span class="token operator">?</span>    <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是不能实现包装对象的克隆</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> num <span class="token comment" spellcheck="true">// "object"</span><span class="token keyword">var</span> newNum<span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//newNum ->  {} 空对象</span></code></pre><hr><p><code>解决</code></p><p>可以通过<code>valueof()</code>函数来进行克隆表示原始值, <code>其实对于包装类，完全可以用=号来进行克隆，其实没有深度克隆一说</code></p><pre class=" language-javascript"><code class="language-javascript">Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2010'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newDate<span class="token operator">=</span>date<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// newDate->  Fri Jan 01 2010 08:00:00 GMT+0800</span></code></pre><p>对于正则</p><pre class=" language-javascript"><code class="language-javascript">RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flags <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>global <span class="token operator">?</span> <span class="token string">'g'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>ignoreCase <span class="token operator">?</span> <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>multiline <span class="token operator">?</span> <span class="token string">'m'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'/111/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newReg<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//newReg->  /\/111\//</span></code></pre><p><a name="2b86a976"></a></p><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p>法一：<code>indexOf循环去重</code></p><p>法二：<code>ES6 Set去重</code>；<code>Array.from(new Set(array))</code></p><p>法三：<code>Object 键值对去重</code>；把数组的值存成 Object 的 key 值，比如 Object[value1] = true，在判断另一个值的时候，如果 Object[value2]存在的话，就说明该值是重复的。</p><p><a name="962b5602"></a></p><h4 id="如何使不同页面之间进行通信"><a href="#如何使不同页面之间进行通信" class="headerlink" title="如何使不同页面之间进行通信"></a>如何使不同页面之间进行通信</h4><ul><li>使用cookie</li><li>使用web worker</li><li>使用localeStorage和sessionStorage</li></ul><hr><p><code>cookie</code>兼容性好, 但是每次http请求都会携带它, 就会影响速度和流量</p><ol><li>用户在浏览器<code>输入url</code>,<code>发送请求</code>,服务器接受请求</li><li>服务器在<code>响应报文中生成一个Set-Cookie报头,发给客户端</code></li><li>浏览器<code>取出响应中Set-Cookie中内容</code>,<code>以cookie.txt形式保存</code>在客户端</li><li>如果浏览器<code>继续发送请求</code>,浏览器会在<code>硬盘中找到cookie文件</code>,<code>产生Cookie报头,与HTTP请求一起发送</code>.</li><li>服务器<code>接受含Cookie报头的请求</code>,处理其中的cookie信息,<code>找到对应资源给客户端.</code>浏览器<code>每一次请求都会包含已有的cookie.</code></li></ol><p><a name="a6c18d6e"></a></p><h4 id="generator函数"><a href="#generator函数" class="headerlink" title="generator函数"></a>generator函数</h4><p>Generator 函数是一个状态机，封装了多个内部状态</p><p>async-await：是Generator的语法糖</p><p>与Generator相比：</p><ol><li>将function* 替代为 async function</li><li>将yield替代为await</li><li>await后面是promise对象。跟其他类型的数据也OK，但是会直接同步执行，而不是异步。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">yield</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>     <span class="token keyword">yield</span> <span class="token string">'world'</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">'ending'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">var</span> hw <span class="token operator">=</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="0128c443"></a></p><h4 id="proxy为什么要取代Object-defineProperty"><a href="#proxy为什么要取代Object-defineProperty" class="headerlink" title="proxy为什么要取代Object.defineProperty"></a>proxy为什么要取代Object.defineProperty</h4><p>Proxy用于修改某些操作的默认行为，也可以理解为在目标对象之前架设一层拦截，外部所有的访问都必须先通过这层拦截，因此提供了一种机制，可以对外部的访问进行过滤和修改。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>proxy可以直接监对象,    而不仅仅是简单的属性<br>这就是defineProperty的缺点,    需要遍历对象才能赋予get和set</p></blockquote><p>Object.defineProperty无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应。</p><p><code>Object.defineProperty只能劫持对象的属性</code></p><p>Proxy有以下两个优点;</p><blockquote><ul><li>可以劫持整个对象，并返回一个新对象</li><li>有13种劫持操作</li></ul></blockquote><p><a name="855fe691"></a></p><h4 id="讲下websocket"><a href="#讲下websocket" class="headerlink" title="讲下websocket"></a>讲下websocket</h4><p>WebSocket 和 http协议完全是两个不同的概念</p><p><strong>WebSocket协议：</strong>其客户端与服务器建立的是 持久连接；</p><p>解决了http的:</p><ol><li><strong>http协议的被动性</strong></li><li>http的无状态性</li></ol><p><code>轮询</code> 客户端主动请求来促使数据更新；</p><p><code>长轮询</code> 服务端并不是即时返回，<code>而是当有内容更新的时候才返回内容给客户端</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">WebSocketTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的浏览器支持 WebSocket!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打开一个 web socket</span>            <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:9998/echo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Web Socket 已连接上，使用 send() 方法发送数据</span>                ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据发送中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据已接收..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 关闭 websocket</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"连接已关闭..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 浏览器不支持 WebSocket</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的浏览器不支持 WebSocket!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><a name="e6afe359"></a></p><h4 id="JavaScript-的宏事件、微事件"><a href="#JavaScript-的宏事件、微事件" class="headerlink" title="JavaScript 的宏事件、微事件"></a>JavaScript 的宏事件、微事件</h4><p>目的是执行宏事件, 若宏事件中有微事件存在就执行微事件, 然后继续下一个宏事件</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134681654-fc5e5bc8-cc0a-4f25-a11e-f6b7e4ea3c62.png#align=left&display=inline&height=941&originHeight=941&originWidth=741&size=0&status=done&width=741" alt></p><p>手写实现new操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> myNew <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个新对象且将其隐式原型指向构造函数原型</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>      __proto__ <span class="token punctuation">:</span> fun<span class="token punctuation">.</span>prototype    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行构造函数</span>    fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回该对象</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'chen'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "chen", age: 18}</span></code></pre><p><a name="2867ac7c"></a></p><h4 id="说下DocumentFragment"><a href="#说下DocumentFragment" class="headerlink" title="说下DocumentFragment"></a>说下DocumentFragment</h4><p>找出下面代码并优化它</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134680241-9769bb07-2c94-4d88-8af2-956dc8a71f92.jpeg#align=left&display=inline&height=140&originHeight=140&originWidth=427&size=0&status=done&width=427" alt></p><p>对该代码的优化是三个点</p><ol><li>把data.length提出去</li><li>不要在里面进行提取dom(‘list’)</li><li>不要每一次都进行一遍innerHTML, 可以先用字符串拼接然后最后再进行一下innerHTML</li></ol><p><strong>JavaScript每一次对dom进行操作都很好性能, 所以要尽可能地减少对dom的操作</strong></p><p>并且每一次innerHTML还会对页面进行重绘</p><hr><p><code>例如:</code>把<br>第1行<br>第2行<br>…（body之间有100个p元素）插入body里面的问题</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134680181-40e19336-1bb5-4cac-8c60-f6076f088923.jpeg#align=left&display=inline&height=229&originHeight=229&originWidth=370&size=0&status=done&width=370" alt></p><p>正确写法应该是通过<code>DocumentFragment</code>创建的是一个虚拟DOM</p><p>存放在内存中, 对其进行更改不会对文档有影响</p><p>插入到正式的文档中后, 虚拟DOM会被删除</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134680233-cd0dc5de-2174-4d69-b1ae-88531756261a.jpeg#align=left&display=inline&height=234&originHeight=234&originWidth=413&size=0&status=done&width=413" alt></p><p><a name="d74311a8"></a></p><h4 id="节流和防抖原理"><a href="#节流和防抖原理" class="headerlink" title="节流和防抖原理"></a>节流和防抖原理</h4><p>节流就是指<code>连续触发事件</code>但是在 n 秒中<code>只执行一次函数</code>。节流会稀释函数的执行频率。</p><p>防抖，就是指<code>触发事件后</code>在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134681321-b8821df0-0439-4a71-9da7-2a2449ba2612.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=1235&size=0&status=done&width=1235" alt></p><p>可以看下: <a href="https://www.jianshu.com/p/c8b86b09daf0" target="_blank" rel="noopener">节流和防抖</a></p><p><a name="5b9493fb"></a></p><h4 id="哪些操作会造成内存泄漏"><a href="#哪些操作会造成内存泄漏" class="headerlink" title="哪些操作会造成内存泄漏"></a>哪些操作会造成内存泄漏</h4><ul><li>setTimeout的第一个参数使用字符串而不是函数的话就会内存泄漏</li><li>闭包使用不当就会</li><li>函数间相互调用形成闭环也会</li></ul><p><a name="e1d1393b"></a></p><h4 id="new操作符做了什么事情"><a href="#new操作符做了什么事情" class="headerlink" title="new操作符做了什么事情"></a>new操作符做了什么事情</h4><p>new 操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象。</p><p><a name="834a01e0"></a></p><h4 id="说说你知道的JavaScript编写规范"><a href="#说说你知道的JavaScript编写规范" class="headerlink" title="说说你知道的JavaScript编写规范"></a>说说你知道的JavaScript编写规范</h4><p>比如不要在一行声明多个变量<br>使用全等来进行数值比较和布尔值比较<br>不要使用全局函数<br>用对象字面量来代替new Array这种操作<br>switch语句必须带有default<br>if必须有大括号<br>变量应该声明</p><p><a name="e411ec76"></a></p><h4 id="js监听对象属性的改变"><a href="#js监听对象属性的改变" class="headerlink" title="js监听对象属性的改变"></a>js监听对象属性的改变</h4><p>(1)在<code>ES5中可以通过Object.defineProperty</code>来实现已有属性的监听</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  <span class="token keyword">set</span>：<span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>user可以是obj<br>缺点：如果id不在user对象中，则不能监听id的变化</p><p>(2)在ES6中可以通过<code>Proxy来实现</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span>  user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span>，<span class="token punctuation">{</span>  <span class="token keyword">set</span>：<span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript代码实现</title>
      <link href="/2019/08/18/javascript-dai-ma-shi-xian/"/>
      <url>/2019/08/18/javascript-dai-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="e9b5374d"></a></p><h4 id="实现一个通用事件代理绑定函数绑定-触发-解绑"><a href="#实现一个通用事件代理绑定函数绑定-触发-解绑" class="headerlink" title="实现一个通用事件代理绑定函数绑定, 触发, 解绑"></a>实现一个通用事件代理绑定函数<code>绑定, 触发, 解绑</code></h4><blockquote><p>目的是为了实现一个事件类event, 包含: 绑定事件, 触发事件, 解绑事件<br><br>其实是一个发布订阅模式:<br><br><img src="http://upload-images.jianshu.io/upload_images/10750013-47cf4254b23778b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240#alt=image" alt></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为了查找迅速使用了对象</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 绑定事件</span>        <span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果事件方法没有的话就放入到字典进去</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 触发事件</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">fn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> index <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 全部清空</span>                    fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接下来进行订阅者操作, 就是用户操作, 事件绑定和触发</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定后就输出</span>event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解绑后就不显示了</span></code></pre><p><a href></a><a name="83f77b42"></a></p><h4 id="bind-的实现"><a href="#bind-的实现" class="headerlink" title="bind 的实现"></a>bind 的实现</h4><blockquote><p>bind 的绑定本质上还是call/apply的实现</p></blockquote><p>如果让自己来设计, 你会怎么设计</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g56anyrl07j30u80gkaef.jpg#alt=bind%E8%AE%BE%E8%AE%A1" alt></p><p>具体代码如下:</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g562vqdm51j30p00fcwi3.jpg#alt=image-20190720100720681" alt></p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arg<span class="token operator">=</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> context<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bound<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>newArg<span class="token punctuation">)</span><span class="token punctuation">{</span>    arg<span class="token operator">=</span>arg<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newArg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> F<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//4. 这里需要一个寄生组合继承</span>  F<span class="token punctuation">.</span>prototype<span class="token operator">=</span>context<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  bound<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bound<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注释中的<code>4.</code>说要继承原型是因为,例如下:</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g562nwcneyj30do07dgmo.jpg#alt=image-20190720095946949" alt></p><p><a href></a><a name="0220f8cd"></a></p><h4 id="手写一个promise"><a href="#手写一个promise" class="headerlink" title="手写一个promise"></a>手写一个promise</h4><p>主要是要写出两个结果状态, 一个是resolve, 一个是reject</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myPromise</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> self<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"pending"</span> <span class="token comment" spellcheck="true">//定义状态改变前的初始状态</span>    self<span class="token punctuation">.</span>value<span class="token operator">=</span>undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义状态为resolved的时候的状态</span>    self<span class="token punctuation">.</span>reason<span class="token operator">=</span>undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义状态为rejected的时候的状态</span>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个==="pending"，保证了状态的改变是不可逆的</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          self<span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span>          self<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"resolved"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个==="pending"，保证了状态的改变是不可逆的</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          self<span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span>          self<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//捕获构造异常</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token function">constructor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>之后是链式调用then</p><pre class=" language-javascript"><code class="language-javascript">myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>onFullfilled<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> self<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>   <span class="token keyword">switch</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"resolved"</span><span class="token punctuation">:</span>        <span class="token function">onFullfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"rejected"</span><span class="token punctuation">:</span>        <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="3e5807a1"></a></p><h4 id="实现instanceof"><a href="#实现instanceof" class="headerlink" title="实现instanceof"></a>实现instanceof</h4><p>就是一直从左边的原型链上往上找,要是等于右边的原型<br><br>则说明是他的实例<br><br>否则找到原型为空的时候就说明不是原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：右边变量的原型存在于左边变量的原型链上</span><span class="token keyword">function</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    leftValue <span class="token operator">=</span> leftValue<span class="token punctuation">.</span>__proto__  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="28fcbd59"></a></p><h4 id="实现call和apply"><a href="#实现call和apply" class="headerlink" title="实现call和apply"></a>实现call和apply</h4><p>通过改变this指向来完成call和apply,    先让传入对象的一个临时字属性等于操作对象,    然后操作完成后就把结果返回,    并把临时属性删掉</p><p><code>实现call</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mycall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not funciton'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    context <span class="token operator">=</span> context <span class="token operator">||</span> window    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><code>实现apply</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myapply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not funciton'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    context <span class="token operator">=</span> context <span class="token operator">||</span> window    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> result    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><a href></a><a name="492c8b38"></a></p><h4 id="实现双向数据绑定"><a href="#实现双向数据绑定" class="headerlink" title="实现双向数据绑定"></a>实现双向数据绑定</h4><p>主要是通过<code>Object.defineproperty</code>来实现的,     一个数据更新了,     会推送给哪些订阅了这些数据的对象<br><br>在里面设置<code>get()和set()</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 数据劫持</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据了'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据更新了'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> newVal    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newVal  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输入监听</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href></a><a name="0ebf06b5"></a></p><h4 id="实现一个简单的路由"><a href="#实现一个简单的路由" class="headerlink" title="实现一个简单的路由"></a>实现一个简单的路由</h4><p>主要为了解决:<br><br>根据路径<code>存储</code>和<code>更新</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// hash路由</span><span class="token keyword">class</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 路由存储对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前hash</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">// 绑定this，避免监听时this指向改变</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 监听</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 存储</span>    <span class="token function">storeRoute</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> cb <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token function">freshRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentHash<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="72fb58ab"></a></p><h4 id="实现个时间委托函数"><a href="#实现个时间委托函数" class="headerlink" title="实现个时间委托函数"></a>实现个时间委托函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*@param  parentElem 父元素@param  type 事件类型@param  childElem 子元素@param  fn 触发的事件*/</span><span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span>parentElem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> childElem<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fn <span class="token operator">=</span> childElem<span class="token punctuation">;</span>    childElem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 委托给父元素</span>  parentElem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果有孩子元素就代表要做事件处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>      target <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表获取当前触发事件的元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>childElem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定触发元素为target上下文, 传入事件</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果没有我要的子元素就不用进行事件代理</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="25b1ae8f"></a></p><h4 id="多维数组降到一维"><a href="#多维数组降到一维" class="headerlink" title="多维数组降到一维"></a>多维数组降到一维</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新建一个空数组</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对传入的数组进行判断其子元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子元素是数组就用concat拼接进去, concat会降维拼接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 子元素不是数组就直接加入进去就可以</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现模拟new操作</p><p>创建一个对象<br><br>该对象的原型指向构造函数的原型<br><br>然后再把传入的参数在构建函数执行一遍, 再把this指向该对象<br><br>最后返回该对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> myNew <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个新对象且将其隐式原型指向构造函数原型</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>      __proto__ <span class="token punctuation">:</span> fun<span class="token punctuation">.</span>prototype    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行构造函数</span>    fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回该对象</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'chen'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "chen", age: 18}</span></code></pre><p><a href></a><a name="fd78ab0d"></a></p><h4 id="写个深拷贝"><a href="#写个深拷贝" class="headerlink" title="写个深拷贝"></a>写个深拷贝</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把obj2拷贝到obj1中</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            obj1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="ee86bd11"></a></p><h4 id="用setTimeout模拟setInterval"><a href="#用setTimeout模拟setInterval" class="headerlink" title="用setTimeout模拟setInterval"></a>用setTimeout模拟setInterval</h4><p>首先来看setInterval的缺陷，使用setInterval()创建的定时器确保了定时器代码规则地插入队列中。这个问题在于：如果定时器代码在代码再次添加到队列之前还没完成执行，结果就会导致定时器代码连续运行好几次。而之间没有间隔。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span>setTimeout <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span>  setTimeout <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></code></pre><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g59ramxvikj30oq0fbk2z.jpg#alt=" alt></p><p><a href></a><a name="ba29b283"></a></p><h4 id="实现一个基本的Event-Bus"><a href="#实现一个基本的Event-Bus" class="headerlink" title="实现一个基本的Event Bus"></a>实现一个基本的Event Bus</h4><p>主要是做三件事情</p><ol><li>创建构造函数</li><li>创建监听事件</li><li>触发事件</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 组件通信，一个触发与监听的过程</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 存储事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听事件</span>    <span class="token function">addListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 触发事件</span>    <span class="token function">emit</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>        handle<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听事件</span>emitter<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> age <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span></code></pre><p><a href></a><a name="aa552185"></a></p><h4 id="怎么实现图片懒加载"><a href="#怎么实现图片懒加载" class="headerlink" title="怎么实现图片懒加载"></a>怎么实现图片懒加载</h4><p>原理就是:<br><br>浏览器可视高度+滚动距离-图片到顶部的距离<br><br>算出来就知道图片有没有在可视化范围内<br><br>在的话就读取图片数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> imgs <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可视区高度, 三个参数差不多意思</span><span class="token keyword">let</span> clientHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token keyword">function</span> lazyLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 滚动卷去的高度, 这三个参数是差不多的意思</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 得到图片顶部距离可视区顶部的距离</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> clientHeight <span class="token operator">+</span> scrollTop <span class="token operator">-</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop    <span class="token comment" spellcheck="true">// 图片在可视区内</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> clientHeight<span class="token operator">+</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>      imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g59uuwhpz9j30hn0fu752.jpg#alt=" alt></p><p><a href></a><a name="d96550e4"></a></p><h4 id="监听设置rem"><a href="#监听设置rem" class="headerlink" title="监听设置rem"></a>监听设置rem</h4><p>为什么要设置rem<br><br>是因为设计稿大小是固定的<br><br>但是浏览器大小是不固定的<br><br>为了响应式可视化来说最好就是按照比例来换算<br><br>同时需要监听rem的变化</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 原始配置</span><span class="token keyword">function</span> setRem <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> doc <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token keyword">let</span> width <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width  <span class="token comment" spellcheck="true">// 假设设计稿为宽750，则1rem代表10px</span>  <span class="token keyword">let</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">75</span>  doc<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 监听窗口变化</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> setRem<span class="token punctuation">)</span></code></pre><p><a href></a><a name="900a09a3"></a></p><h4 id="实现拖拽计算"><a href="#实现拖拽计算" class="headerlink" title="实现拖拽计算"></a>实现拖拽计算</h4><p>实现拖拽的逻辑是这样的:<br><br>监控距离依靠的是鼠标的移动<br><br>只会监控鼠标的位置变化,通过鼠标的位置变化来推断元素的位置<br><br><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g59za6xi9zj30o00dwn04.jpg#alt=" alt></p><p>先算出鼠标距离元素的距离</p><p>算出来距离后, 看鼠标移动了多少, 移动了的距离加上距离的距离就是元素被拖动的距离</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// drag处于绝对定位状态</span>  <span class="token keyword">let</span> drag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>  drag<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event    <span class="token comment" spellcheck="true">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span>    <span class="token keyword">let</span> diffX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">let</span> diffY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetTop    drag<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> diffX      <span class="token keyword">let</span> top <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> diffY      <span class="token comment" spellcheck="true">// 避免拖拽出可视区</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight      <span class="token punctuation">}</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">'px'</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    drag<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="b24e02eb"></a></p><h4 id="实现防抖和节流"><a href="#实现防抖和节流" class="headerlink" title="实现防抖和节流"></a>实现防抖和节流</h4><p><code>节流:    规定时间内只执行一次</code></p><p>思路是可以用<code>闭包保存上一次执行的时间</code></p><p><code>如果再次被触发事件的话就看下是否在时间范围内</code></p><p>是就不执行, 不是就执行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：在规定时间内只触发一次</span><span class="token keyword">function</span> throttle <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用闭包保存时间</span>  <span class="token keyword">let</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>      prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'节流'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>防抖:    看规定时间内有没有触发第二次, 没有就执行</code></p><p>思路是:</p><p>在规定时间内再次触发会先清除定时器后再重设定时器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路:在规定时间内未触发第二次，则执行</span><span class="token keyword">function</span> debounce <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用闭包保存定时器</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token comment" spellcheck="true">// 在规定时间内再次触发会先清除定时器后再重设定时器</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'防抖'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><a href></a><a name="7160643c"></a></p><h4 id="实现检测横屏"><a href="#实现检测横屏" class="headerlink" title="实现检测横屏"></a>实现检测横屏</h4><p><code>window.orientation</code>:获取屏幕旋转方向</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token number">180</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 正常方向或屏幕旋转180度</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'竖屏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token number">90</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 屏幕顺时钟旋转90度或屏幕逆时针旋转90度</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'横屏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>css检测横屏</code></p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> portrait<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*竖屏...*/</span><span class="token punctuation">}</span> <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*横屏...*/</span><span class="token punctuation">}</span></code></pre><p><a href></a><a name="995e2cfa"></a></p><h4 id="控制一次加载一张图片，加载完后再加载下一张"><a href="#控制一次加载一张图片，加载完后再加载下一张" class="headerlink" title="控制一次加载一张图片，加载完后再加载下一张"></a>控制一次加载一张图片，加载完后再加载下一张</h4><p><code>(1)方法1</code>用obj.onload</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http:..."</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mypic"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innnerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">+</span> <span class="token string">"' />"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>onloading……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>(2)方法2</code>用obj.onreadystatechange</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http:..."</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"complete"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mypic"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innnerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">+</span> <span class="token string">"' />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>onloading……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><a href></a><a name="1d3264c6"></a></p><h4 id="如何实现sleep的效果"><a href="#如何实现sleep的效果" class="headerlink" title="如何实现sleep的效果"></a>如何实现sleep的效果</h4><ol><li>while循环的方式</li><li>通过promise来实现</li><li>通过async封装 await</li><li>通过generate来实现</li></ol><hr><p>大多数方法还是通过promise来实现的</p><p><code>while</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> start<span class="token operator">=</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>expire<span class="token operator">=</span>start<span class="token operator">+</span>ms<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>expire<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>promise</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> temple<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>ms<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> temple<span class="token punctuation">}</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//console.log(222)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>async</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> temple<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> temple<span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>generate</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML小知识点</title>
      <link href="/2019/08/17/html-xiao-zhi-shi-dian/"/>
      <url>/2019/08/17/html-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="ecb9c6c4"></a></p><h4 id="html标签有几个可以逃过同源策略"><a href="#html标签有几个可以逃过同源策略" class="headerlink" title="html标签有几个可以逃过同源策略"></a>html标签有几个可以逃过同源策略</h4><link rel="stylesheet" type="text/css" href="*.css"><script><script><p><a name="5c0b237a"></a></p><h4 id="attribute和property有什么区别"><a href="#attribute和property有什么区别" class="headerlink" title="attribute和property有什么区别"></a>attribute和property有什么区别</h4><blockquote><p>attribute和property有什么区别</p></blockquote><p><a name="af33242e"></a></p><h4 id="img的title和alt有什么区别"><a href="#img的title和alt有什么区别" class="headerlink" title="img的title和alt有什么区别"></a>img的title和alt有什么区别</h4><blockquote><p>title是鼠标滑动到元素上时候显示<br>alt是img的特有属性，用于图片无法加载显示<br>提高了图片可访问性，搜索会重点分析alt</p></blockquote><p><a name="230236f0"></a></p><h4 id="什么是语义化"><a href="#什么是语义化" class="headerlink" title="什么是语义化"></a>什么是语义化</h4><blockquote><p>HTML5语义化标签是指正确的标签包含了正确的内容，结构良好，便于阅读<br>比如nav表示导航条，类似的还有article、header、footer等等标签。</p><ol><li>让人更容易读懂</li><li>让机器更容易读懂</li><li>有助于SEO</li></ol></blockquote><p><a name="39e82639"></a></p><h4 id="html5有哪些新特性"><a href="#html5有哪些新特性" class="headerlink" title="html5有哪些新特性"></a>html5有哪些新特性</h4><blockquote><p>主要是<code>图像    位置    存储    多任务</code><br>websocket<br>video和audio，绘画canvas<br>增加localStorage长期驻留浏览器, sessionStorage浏览器关闭就删除</p></blockquote><p><a name="NoUuk"></a></p><h4 id="html5离线存储怎么使用"><a href="#html5离线存储怎么使用" class="headerlink" title="html5离线存储怎么使用"></a>html5离线存储怎么使用</h4><blockquote><p>新建一个<code>.appcache文件缓存机制</code><br>里面有一份需要解析的清单，会被存储在本地<br>没网的时候显示这个就好了<br>具体的就是在<code>页面头部下加入一个manifest属性</code><br>在<code>里面编写需要存储的离线存储资源清单</code><br>在离线的时候，调用<code>window.applicationCache</code>就可以进行需求实现<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566027888125-814c370a-3094-4cba-8a0f-d624eec42798.jpeg#align=left&display=inline&height=127&originHeight=127&originWidth=160&size=0&status=done&width=160" alt=""></p></blockquote><p><a name="a43a2a9f"></a></p><h4 id="iframe有什么缺点"><a href="#iframe有什么缺点" class="headerlink" title="iframe有什么缺点"></a>iframe有什么缺点</h4><blockquote><p>定义：iframe元素会创建包含另一个文档的内联框架<br>可以将提示文字放在<iframe>之间，来提示某些不支持iframe的浏览器</p><ol><li>会阻塞页面的onload事件</li><li>不利于seo</li><li>会影响页面的并行加载，因为共享池问题对相同域的连接有限制</li></ol></blockquote><p><a name="a2c74cad"></a></p><h4 id="xhtml和html有什么区别"><a href="#xhtml和html有什么区别" class="headerlink" title="xhtml和html有什么区别"></a>xhtml和html有什么区别</h4><blockquote><p>功能上有差别，<code>xhtml有很好的兼容性</code><br>书写情况也有差别，xhtml更加严格必须被<code>严格嵌套，闭合和区分大小写</code>等<br>可以通过开头的Doctype来区分</p></blockquote><p><a name="e8d1f286"></a></p><h4 id="canvas和svg有什么区别"><a href="#canvas和svg有什么区别" class="headerlink" title="canvas和svg有什么区别"></a>canvas和svg有什么区别</h4><blockquote><p>svg绘制出来的<code>元素都可以作为独立的DOM节点</code>, 能够<code>绑定事件</code>,并且是<code>矢量图</code><br>canvas输出的是一张图, 不是矢量的</p></blockquote><p><a name="09b7f8ca"></a></p><h4 id="说一下HTML5-drag-api"><a href="#说一下HTML5-drag-api" class="headerlink" title="说一下HTML5 drag api"></a>说一下HTML5 drag api</h4><blockquote><p>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。<br>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。<br>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。<br>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。<br>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。<br>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。<br>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发</p></blockquote></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript小知识点(一)</title>
      <link href="/2019/08/17/javascript-xiao-zhi-shi-dian-yi/"/>
      <url>/2019/08/17/javascript-xiao-zhi-shi-dian-yi/</url>
      
        <content type="html"><![CDATA[<p><a name="ylXpL"></a></p><h4 id="promise有没有不能满足你需求的情况"><a href="#promise有没有不能满足你需求的情况" class="headerlink" title="promise有没有不能满足你需求的情况"></a><strong>promise有没有不能满足你需求的情况</strong></h4><p><em>有的, 就是在我需要等待一个事件完成后再进行下一步的时候才能做下一步的时候<br>之前我写牛客网本地JS编辑的时候就需要等待读取完成文件后再进行下一步返回数据, 但是如果使用的是Promise就会先返回undefined</em><br><em>使用await和async就可以解决</em><br><a name="HbIo8"></a></p><h4 id="“1”-“2”-“3”-map-parseInt-为何返回-1-NaN-NaN"><a href="#“1”-“2”-“3”-map-parseInt-为何返回-1-NaN-NaN" class="headerlink" title="[“1”, “2”, “3”].map(parseInt) 为何返回[1,NaN,NaN]"></a><a href="https://www.yuque.com/sansenlian/xwpnpg/gh3szc#HbIo8" target="_blank" rel="noopener"></a>[“1”, “2”, “3”].map(parseInt) 为何返回[1,NaN,NaN]</h4><p>:::tips<br>parseInt(<em>string</em>, <em>radix</em>)<br>map的回调函数的参数index索引值作了parseInt的基数radix，导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN<br>:::</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[1,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,9,11,13,15,17,19]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span>……<span class="token function">parseInt</span><span class="token punctuation">(</span>'<span class="token number">9</span>‘<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'14'</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'15'</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">19</span></code></pre><p><a name="OMs8U"></a></p><h4 id="map的参数"><a href="#map的参数" class="headerlink" title="map的参数"></a><a href="https://www.yuque.com/sansenlian/xwpnpg/gh3szc#OMs8U" target="_blank" rel="noopener"></a>map的参数</h4><p>array1.map(callbackfn[, thisArg])    如果省略thisArg，则 undefined 将用作this 值<br>其中function callbackfn(value, index, array)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常用语法</title>
      <link href="/2019/08/16/java-chang-yong-yu-fa/"/>
      <url>/2019/08/16/java-chang-yong-yu-fa/</url>
      
        <content type="html"><![CDATA[<p><a name="z2mW9"></a></p><h3 id="笔试用到的部分"><a href="#笔试用到的部分" class="headerlink" title="笔试用到的部分"></a>笔试用到的部分</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通用头部</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取</span>        String line <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去读一行</span>        <span class="token keyword">int</span> target <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取一个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>双向链表代替:  栈, 队列</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 双向链表代替:  栈, 队列</span>LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span>linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义数组</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加只能用count下标增长来</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr3<span class="token punctuation">;</span>arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr3 <span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转为数字</span></code></pre><p>动态数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态数组</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String li<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>数组排序</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 数组排序</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token operator">-</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map set hash</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// map set hash</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String <span class="token operator">>></span>mapMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>字符串与数组互转</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 字符串转数组</span>String str <span class="token operator">=</span> <span class="token string">"012345"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分割</span><span class="token comment" spellcheck="true">// 数组转字符串</span>StringBuffer str5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String s<span class="token operator">:</span> arr4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    str5<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String str6 <span class="token operator">=</span> str5<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str6<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 1, 2, 3, 4, 5]</span></code></pre><p>字符拼接</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符和对应的ASCII码（整数）可以互相转换</span>ThreadLocalRandom random <span class="token operator">=</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把三个字符拼接成一个字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先转成数字再转成字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转成字符串</span></code></pre><p>Math</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> max_value <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2147483647</span><span class="token keyword">int</span> min_value <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -2147483648</span><span class="token comment" spellcheck="true">// Math</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="tXL1l"></a></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><pre class=" language-java"><code class="language-java">         String str <span class="token operator">=</span> <span class="token string">"hello123"</span><span class="token punctuation">;</span>        String reg <span class="token operator">=</span> <span class="token string">"\\d+"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 看看有没有匹配结果, 返回bool, matches必须全匹配</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\D*\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        <span class="token comment" spellcheck="true">// 匹配的结果显示</span>        Pattern r <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher m <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*    System.out.println("group0: " + m.group(0) );            System.out.println("group1: " + m.group(1) );            System.out.println("group2: " + m.group(2) );            System.out.println("group3: " + m.group(3) ); */</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO MATCH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 字符串分割</span>        String str1 <span class="token operator">=</span> <span class="token string">"1 2 3    4 5"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" +"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String temp <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// helloman</span>        String tel <span class="token operator">=</span> <span class="token string">"13628123409"</span><span class="token punctuation">;</span>        String telReg <span class="token operator">=</span> <span class="token string">"1[358]\\d{9}"</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>telReg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++常用写法</title>
      <link href="/2019/08/16/c-chang-yong-xie-fa/"/>
      <url>/2019/08/16/c-chang-yong-xie-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP字符串匹配算法</title>
      <link href="/2019/08/14/kmp-zi-fu-chuan-pi-pei-suan-fa/"/>
      <url>/2019/08/14/kmp-zi-fu-chuan-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>:::tips<br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener">常见算法github地址——欢迎随手star</a><br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener"></a>:::</p><p>字符串A中找是否存在字符串B，当然前提A比B长</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1565768043850-3fe8617a-a825-49d8-b037-69046d425a54.png#align=left&display=inline&height=221&originHeight=221&originWidth=1340&size=0&status=done&width=1340" alt></p><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190812102019.gif#align=left&alt=&display=inline&message=%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%EF%BC%8C%E8%AF%B7%E9%87%8D%E8%AF%95&percent=0&status=uploading" alt><br>动图来自:<a href="https://blog.csdn.net/weixin_40346046/article/details/79468142" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40346046/article/details/79468142</a></p><p><a name="543c214e"></a></p><h2 id="next数组构建"><a href="#next数组构建" class="headerlink" title="next数组构建"></a>next数组构建</h2><p>next数组构建要求是找前缀表, 比如对于:    ababaa</p><table><thead><tr><th>下标</th><th>前缀表</th><th>目的:<code>找左右对称的长度</code>即next[]</th></tr></thead><tbody><tr><td>0 a</td><td>没有前缀</td><td>-1</td></tr><tr><td>1 b</td><td>a</td><td>0</td></tr><tr><td>2 a</td><td>ab</td><td>0</td></tr><tr><td>3 b</td><td><code>a</code>b<code>a</code></td><td>1</td></tr><tr><td>4 a</td><td><code>abab</code></td><td>2</td></tr><tr><td>5 a</td><td><code>ababa</code></td><td>3</td></tr></tbody></table><p>那么目的是找左右对称的长度，需要我每一个都进行对比计算吗，那不是非常费时间</p><p>其实不用的，可以通过类似斐波那契数的方式，通过上一层的计算来满足下一层的计算，通过动态规划的方式慢慢递增构建，具体举例：</p><p>总共三个角色:</p><ul><li>j:  一直向前移动的下标</li><li>K: 当前最长相等长度的下标</li><li>next数组: 当前数字前面所拥有的前缀的最长相等长度</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1565768042982-02698b87-77d9-469d-a675-95dc13b2169e.png#align=left&display=inline&height=494&originHeight=494&originWidth=932&size=0&status=done&width=932" alt></p><p><a name="X1KeB"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> next <span class="token operator">=</span> <span class="token function">getNextArr</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> hasyArr <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> needleArr <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> hasyArr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> hasyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needleArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> getNextArr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nextStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> nextArr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> nextArrStr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表前缀中当前最长对称的下表</span>    nextArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// j的值默认就在k的后面一位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nextArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果比较,值相等的话就往后移动一步,并且next数值+1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> nextArrStr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nextArrStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextArr<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不相等的话,就跳到前一个next数组进行继续比较</span>            k <span class="token operator">=</span> nextArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nextArr<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见算法github地址</title>
      <link href="/2019/08/14/chang-jian-suan-fa-github-di-zhi/"/>
      <url>/2019/08/14/chang-jian-suan-fa-github-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>:::tips<br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener">常见算法github地址——欢迎随手star</a><br>:::<br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——数组</title>
      <link href="/2019/08/11/leetcode-suan-fa-chu-ji-ti-jie-shu-zu/"/>
      <url>/2019/08/11/leetcode-suan-fa-chu-ji-ti-jie-shu-zu/</url>
      
        <content type="html"><![CDATA[<p><a name="52690216"></a></p><h1 id="1-从排序数组中删除重复项"><a href="#1-从排序数组中删除重复项" class="headerlink" title="1. 从排序数组中删除重复项"></a>1. 从排序数组中删除重复项</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/21/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个排序数组，你需要在<strong>原地</strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong>原地修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例 1:</strong></p><pre><code>给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>示例 2:</strong></p><pre><code>给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>“引用”</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {    print(nums[i]);}</code></pre><p><a name="4b86211f"></a></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> removeDuplicates <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="93841778"></a></p><h1 id="2-买卖股票的最佳时机-II"><a href="#2-买卖股票的最佳时机-II" class="headerlink" title="2. 买卖股票的最佳时机 II"></a>2. 买卖股票的最佳时机 II</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/22/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-1"></a></p><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><pre><code>输入: [7,1,5,3,6,4]输出: 7解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre><p><a name="4b86211f-1"></a></p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} prices * @return {number} */</span><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>sum<span class="token operator">+</span><span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>sum<span class="token operator">=</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="c1440cea"></a></p><h1 id="3-旋转数组"><a href="#3-旋转数组" class="headerlink" title="3. 旋转数组"></a>3. 旋转数组</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/23/" target="_blank" rel="noopener">题目链接</a></p><p><a name="254dd6d2-2"></a></p><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个数组，将数组中的元素向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释: 向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100]</code></pre><p><strong>说明:</strong></p><ul><li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li><li>要求使用空间复杂度为 O(1) 的 <strong>原地</strong> 算法。</li></ul><p><a name="a4db8628"></a></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><blockquote><p>注意: 传入移动的距离需要做转换: <code>k%=nums.length</code></p></blockquote><p><a name="8a33dcfd"></a></p><h3 id="1-最快速的但是耗费空间的复制法"><a href="#1-最快速的但是耗费空间的复制法" class="headerlink" title="1. 最快速的但是耗费空间的复制法"></a>1. 最快速的但是耗费空间的复制法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="7defb30d"></a></p><h3 id="2-空间O-1-时间O-n-2-的插入法"><a href="#2-空间O-1-时间O-n-2-的插入法" class="headerlink" title="2. 空间O(1)时间O(n^2)的插入法"></a>2. 空间O(1)时间O(n^2)的插入法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 就是把5拿出来,然后前面的后移,5再插入到最前面</span>第一次移动： <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>第二次移动： <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>第三次移动： <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><p><a name="2acc902c"></a></p><h3 id="3-优秀的解法-翻转法"><a href="#3-优秀的解法-翻转法" class="headerlink" title="3. 优秀的解法: 翻转法"></a>3. 优秀的解法: <code>翻转法</code></h3><p>划分一个分界线, <code>写一个自旋转函数</code>, 然后左边自旋转下, 右边自旋转下</p><p>然后再整体旋转下</p><pre class=" language-javascript"><code class="language-javascript">第一次翻转： <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>第二次翻转： <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>第三次翻转： <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    k<span class="token operator">%</span><span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>len<span class="token operator">-</span>k<span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token operator">=</span> t<span class="token punctuation">;</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="6c527294"></a></p><h3 id="4-扩展数组法"><a href="#4-扩展数组法" class="headerlink" title="4. 扩展数组法"></a>4. 扩展数组法</h3><p>把数组double一下<code>存入一个新数组</code>: [1,2,3,4,5,6,7,1,2,3,4,5,6,7]</p><p>对新数组进行移动, 把值赋到旧数组</p><p><a name="b26cebd2"></a></p><h1 id="4-存在重复元素"><a href="#4-存在重复元素" class="headerlink" title="4. 存在重复元素"></a>4. 存在重复元素</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/24/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-3"></a></p><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3,1]输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [1,2,3,4]输出: false</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: [1,1,1,3,3,4,3,2,4,2]输出: true</code></pre><p><a name="a4db8628-1"></a></p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>用<code>indexOf</code>和<code>lastIndexOf</code>就可以解决</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> containsDuplicate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="36280f8b"></a></p><h1 id="5-只出现一次的数字"><a href="#5-只出现一次的数字" class="headerlink" title="5. 只出现一次的数字"></a>5. 只出现一次的数字</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/25/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-4"></a></p><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><strong>示例 1:</strong></p><pre><code>输入: [2,2,1]输出: 1</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [4,1,2,1,2]输出: 4</code></pre><p><a name="4b86211f-2"></a></p><h2 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h2><p>异或就ok, <code>异或或消去所有相同的数字</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> singleNumber <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">^</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f302ff13"></a></p><h1 id="6-两个数组的交集"><a href="#6-两个数组的交集" class="headerlink" title="6. 两个数组的交集"></a>6. 两个数组的交集</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/26/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-5"></a></p><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 1:</strong></p><pre><code>输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2,2]</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [4,9]</code></pre><p><strong>说明：</strong></p><ul><li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li><li>我们可以不考虑输出结果的顺序。</li></ul><p><strong>进阶:</strong></p><ul><li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li><li>如果 <em>nums1</em> 的大小比 <em>nums2</em> 小很多，哪种方法更优？</li><li>如果 <em>nums2</em> 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li></ul><p><a name="4b86211f-3"></a></p><h2 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h2><p><a name="81ab1549"></a></p><h3 id="1-用计数统计"><a href="#1-用计数统计" class="headerlink" title="1. 用计数统计"></a>1. 用计数统计</h3><p>对一个数组扫描一遍, 每个数字出现的次数加1</p><p>然后扫描另外一个数组, 看下在另一数组中次数是不是大于1, 是的话就减去1然后加入到结果数组中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> intersect <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> len2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span>            count<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> count<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f45d16e0"></a></p><h3 id="2-进阶问题"><a href="#2-进阶问题" class="headerlink" title="2. 进阶问题"></a>2. 进阶问题</h3><p><a href="https://www.cnblogs.com/zfLee/p/9332552.html" target="_blank" rel="noopener">看看这里</a></p><p><a name="9f0d33ca"></a></p><h1 id="7-加一"><a href="#7-加一" class="headerlink" title="7. 加一"></a>7. 加一</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/27/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-6"></a></p><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字 123。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字 4321。</code></pre><p><a name="4b86211f-4"></a></p><h2 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h2><p>用一个变量表示当前是否进位就好了</p><p><code>记得进位后自己那位置要变成0</code></p><p>如果到了数字首位还有进位的话就要拓展一位数字</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> plusOne <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span>  <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        carry<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len<span class="token number">-2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                carry<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> carry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>        nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="d3b84700"></a></p><h1 id="8-移动零"><a href="#8-移动零" class="headerlink" title="8. 移动零"></a>8. 移动零</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/28/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/28/</a></p><p><a name="254dd6d2-7"></a></p><h2 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>示例:</strong></p><pre><code>输入: [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><p><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p><a name="4b86211f-5"></a></p><h2 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h2><p>比较简单的就直接插入法</p><p>比较好的方法是记录当前有多少0, 然后后面的数字往前移动多少位</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> moveZeroes <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前位置往前移动count</span>            nums<span class="token punctuation">[</span>i<span class="token operator">-</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> len<span class="token operator">-</span>count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f35a5ed6"></a></p><h1 id="9-两数之和"><a href="#9-两数之和" class="headerlink" title="9. 两数之和"></a>9. 两数之和</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/29/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/29/</a></p><p><a name="254dd6d2-8"></a></p><h2 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例:</strong></p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><p><a name="4b86211f-6"></a></p><h2 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h2><p>其实可以用<code>indexOf</code>解决, 但是这玩意时间复杂度甚至有时候都不如暴力</p><p><a name="15915030"></a></p><h3 id="1-冒泡解决"><a href="#1-冒泡解决" class="headerlink" title="1. 冒泡解决"></a>1. 冒泡解决</h3><p>直接用冒泡就好了,</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3a4e286f"></a></p><h3 id="2-哈希表解决"><a href="#2-哈希表解决" class="headerlink" title="2. 哈希表解决"></a>2. 哈希表解决</h3><p>用哈希表存储, 快很多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _numsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _numsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cha <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_numsMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>_numsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token operator">!=</span>i<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>_numsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="593e53e1"></a></p><h1 id="10-有效的数独"><a href="#10-有效的数独" class="headerlink" title="10. 有效的数独"></a>10. 有效的数独</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/30/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-9"></a></p><h2 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h2><p>判断一个 9x9 的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134922580-69cb8a94-57fb-4f56-8627-3f271c90cb8c.png#align=left&display=inline&height=250&originHeight=250&originWidth=250&size=0&status=done&width=250" alt></p><p>上图是一个部分填充的有效的数独。</p><p>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</p><p><strong>示例 1:</strong></p><pre><code>输入:[  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入:[  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出: false解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</code></pre><p><strong>说明:</strong></p><ul><li>一个有效的数独（部分已被填充）不一定是可解的。</li><li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li><li>给定数独序列只包含数字 <code>1-9</code> 和字符 <code>&#39;.&#39;</code> 。</li><li>给定数独永远是 <code>9x9</code> 形式的。</li></ul><p><a name="4b86211f-7"></a></p><h2 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h2><p>其实就是判断:</p><ul><li>行内有无重复</li><li>列有无重复</li><li>3*3有无重复</li></ul><blockquote><p>对于进阶问题: 判断9*9的数独是否有效, 是否可以构成完整的数独</p></blockquote><p><a name="80f35795"></a></p><h3 id="1-用哈希"><a href="#1-用哈希" class="headerlink" title="1. 用哈希"></a>1. 用哈希</h3><p>我把大的3*3理解为一个哈希区域</p><p>行列都用临时数组作为哈希存储就可以了</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134919521-919b1c6a-d761-46f0-a0b6-efd106e49d21.png#align=left&display=inline&height=342&originHeight=342&originWidth=800&size=0&status=done&width=800" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isValidSudoku <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> colum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> _map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存入行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    row<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存入列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colum<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> colum<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存入3*3</span>            <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> _map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="00f15de9"></a></p><h1 id="11-旋转图像"><a href="#11-旋转图像" class="headerlink" title="11. 旋转图像"></a>11. 旋转图像</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/31/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-10"></a></p><h2 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><p><strong>说明：</strong></p><p>你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p><p><strong>示例 1:</strong></p><pre><code>给定 matrix = [  [1,2,3],  [4,5,6],  [7,8,9]],原地旋转输入矩阵，使其变为:[  [7,4,1],  [8,5,2],  [9,6,3]]</code></pre><p><strong>示例 2:</strong></p><pre><code>给定 matrix =[  [ 5, 1, 9,11],  [ 2, 4, 8,10],  [13, 3, 6, 7],  [15,14,12,16]], 原地旋转输入矩阵，使其变为:[  [15,13, 2, 5],  [14, 3, 4, 1],  [12, 6, 8, 9],  [16, 7,10,11]]</code></pre><p><a name="4b86211f-8"></a></p><h2 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h2><p><a name="3375fd7a"></a></p><h3 id="1-按照规则把每个元素旋转一遍"><a href="#1-按照规则把每个元素旋转一遍" class="headerlink" title="1. 按照规则把每个元素旋转一遍"></a>1. 按照规则把每个元素旋转一遍</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134919003-9e3fe907-a39d-4523-9ccf-6a0d3645ba23.png#align=left&display=inline&height=174&originHeight=174&originWidth=196&size=0&status=done&width=196" alt></p><p>比如3*3矩阵, 看最外层定点循环有:</p><pre><code>[0][0] -&gt; [[0][2] -&gt; [2][2] -&gt; [2][0] -&gt; [0][0]</code></pre><p>除了顶点外的变有:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134919471-2a8f5f5d-d9bf-49e5-a464-182de0bceed4.png#align=left&display=inline&height=192&originHeight=192&originWidth=223&size=0&status=done&width=223" alt></p><pre><code>[0][1] -&gt; [1][2] -&gt; [2][1] -&gt; [1][0] -&gt; [0][1]</code></pre><p>需要用一个变量来保存循环过程中的交换, 可以递推出<code>n行n列</code>公式为:</p><pre><code>[i][j] -&gt; [j][n-i-1] -&gt; [n-i-1][n-j-1] -&gt; [n-j-1][i] -&gt; [i][j]</code></pre><p>因为一般元素旋转了代表了另外一般也旋转了. 因此只要扫一遍<code>i到n/2就可以了</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> temp<span class="token punctuation">,</span> l <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="de74cf0f"></a></p><h3 id="2-根据旋转数组的规则数学矩阵旋转"><a href="#2-根据旋转数组的规则数学矩阵旋转" class="headerlink" title="2. 根据旋转数组的规则数学矩阵旋转"></a>2. 根据旋转数组的规则<code>数学矩阵旋转</code></h3><p>可以通过转置矩阵, 然后再交换列就OK了<img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f646.svg#align=left&display=inline&height=18&originHeight=150&originWidth=150&status=done&width=18" alt>‍<img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/2642.svg#align=left&display=inline&height=18&originHeight=150&originWidth=150&status=done&width=18" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134920425-ef206336-624e-490b-8677-91f15e2ed122.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=1341&size=0&status=done&width=1341" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2019/08/11/wei-yun-suan/"/>
      <url>/2019/08/11/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<ul><li>测试第 k 位: <code>s &amp; (1 &lt;&lt; k)</code></li><li>设置第 k 位: <code>s |= (1 &lt;&lt; k)</code></li><li>第 k 位置零: <code>s &amp;= ~(1 &lt;&lt; k)</code></li><li>切换第 k 位值: <code>s ^= ~(1 &lt;&lt; k)</code></li><li>乘以 2: <code>s &lt;&lt; n</code></li><li>除以 2: <code>s &gt;&gt; n</code></li><li>交集: <code>s &amp; t</code></li><li>并集: <code>s | t</code></li><li>减法: <code>s &amp; ~t</code></li><li>交换 <code>x = x ^ y ^ (y = x)</code></li><li>取出最小非 0 位（Extract lowest set bit）: <code>s &amp; (-s)</code></li><li>取出最小 0 位（Extract lowest unset bit）: <code>~s &amp; (s + 1)</code></li><li>交换值:<br><br><code>x ^= y; y ^= x; x ^= y;</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
