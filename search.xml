<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>优秀的计算机读物</title>
      <link href="/2019/08/27/you-xiu-de-ji-suan-ji-du-wu/"/>
      <url>/2019/08/27/you-xiu-de-ji-suan-ji-du-wu/</url>
      
        <content type="html"><![CDATA[<p>掘金计划的书籍很多都很不错：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">https://github.com/xitu/gold-miner</a><br>前端学习资料整合：<a href="https://github.com/fyuanfen/note" target="_blank" rel="noopener">https://github.com/fyuanfen/note</a><br>前端面试题：<a href="https://github.com/haizlin/fe-interview" target="_blank" rel="noopener">https://github.com/haizlin/fe-interview</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器小知识点</title>
      <link href="/2019/08/27/liu-lan-qi-xiao-zhi-shi-dian/"/>
      <url>/2019/08/27/liu-lan-qi-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<ul><li>浏览器可以同时向一个域名发起8个请求，并发过多请求容易超出服务器阈值而被BAN（以前服务器负载均衡能力差, 流量稍微大一点服务器就容易崩溃, 这样做保证了服务器的稳定性, 同时防止黑客利用浏览器发起DDOS攻击）参考：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md" target="_blank" rel="noopener">链接</a><ul><li>有利于浏览器复用现有连接 (keep alive技术)</li><li>突破限制的方法是<ul><li>域名发散（让网站的静态资源分布在多个子域名以充分利用浏览器的并发下载能力）</li><li>域名收敛<blockquote><p>在移动端时代, 由于网络质量参差不齐, 域名解析在整个HTTP请求中耗时占了很大一部分比重. 将域名集中以减少域名解析(DNS)的成本. 这与PC端网络稳定解析迅速存在差异</p></blockquote></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS小知识点</title>
      <link href="/2019/08/25/nodejs-xiao-zhi-shi-dian/"/>
      <url>/2019/08/25/nodejs-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="YiLYM"></a></p><h3 id="时间循环libuv"><a href="#时间循环libuv" class="headerlink" title="时间循环libuv"></a>时间循环libuv</h3><p>参考：<a href>https://segmentfault.com/a/1190000013660033</a><br>MicroTask 主要分化为一下六步骤：<br> 1. timers：执行满足条件的setTimeout、setInterval回调。<br> 2. I/O callbacks：是否有已完成的I/O操作的回调函数，来自上一轮的poll残留。<br> 3. idle，prepare：可忽略<br> 4. poll：等待还没完成的I/O事件，会因timers和超时时间等结束等待。<br> 5. check：执行setImmediate的回调。<br> 6. close callbacks：关闭所有的closing handles，一些onclose事件。<br>还有 MicroTask 和 process.nextTick, 对应 MicroTask Queue 和 NextTick Queue, 和上面合并之后最终过程为:<br> 清空当前循环内的Timers Queue，清空NextTick Queue，清空Microtask Queue。<br> 清空当前循环内的I/O Queue，清空NextTick Queue，清空Microtask Queue。<br> 清空当前循环内的Check Queu，清空NextTick Queue，清空Microtask Queue。<br> 清空当前循环内的Close Queu，清空NextTick Queue，清空Microtask Queue。<br> 进入下轮循环。</p><blockquote><p>nextTick优先级比promise等microtask高。setTimeout和setInterval优先级比setImmediate高。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS基础知识</title>
      <link href="/2019/08/25/nodejs-ji-chu-zhi-shi/"/>
      <url>/2019/08/25/nodejs-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack基础知识</title>
      <link href="/2019/08/25/webpack-ji-chu-zhi-shi/"/>
      <url>/2019/08/25/webpack-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><a name="iDwyL"></a></p><h1 id="webpack打包原理"><a href="#webpack打包原理" class="headerlink" title="webpack打包原理"></a>webpack打包原理</h1><p>如果不考虑chunks（单一的JS文件分离出多个JS，主要还是为了异步加载，按需加载）的情况下，所有文件会被打包进同一个文件中，webpack从入口文件开始分析依赖，每个类型资源都会被作为模块处理，经过相应的loader，转化为合理的js代码后是一个IIFE代码，installedModules对象用来缓存已经被加载的对象. 工具函数<strong>webpack_require</strong>加载模块。</p><ul><li>TreeShaking：用于移除JavaScript中未引用到的代码，预处理的，根据import和export判断</li><li>热更新webpack-dev-server：依靠的是监听函数webpack-dev-middleware ，文件变化会重新打包，webpack-dev-server在整个热模块替换过程中起到的只是一个两段之间信息传递的作用, 并不参与具体的模块传输及更新。webpack-dev-server与客户端之间是websocket长连接，webpack-dev-server检测到变化后通知客户端，然后客户端通知webpack本身，webpack本身再通过（HMR）HotModuleReplaceRuntime来返回具体的模块更新，再通过ajax向webpack-dev-server发送请求，webpack-dev-server再通过JSONP的方式返回更新内容。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566664320194-1070c0c6-b93e-413d-9fc3-a49052d9cd48.png#align=left&display=inline&height=348&name=image.png&originHeight=837&originWidth=805&size=289060&status=done&width=334" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣题解——1101-1163</title>
      <link href="/2019/08/24/li-kou-ti-jie-1101-1163/"/>
      <url>/2019/08/24/li-kou-ti-jie-1101-1163/</url>
      
        <content type="html"><![CDATA[<p><a name="d3c41683"></a></p><h1 id="1101-彼此熟识的最早时间"><a href="#1101-彼此熟识的最早时间" class="headerlink" title="1101 彼此熟识的最早时间"></a>1101 彼此熟识的最早时间</h1><p>中等</p><p><a name="028058f9"></a></p><h1 id="1102-得分最高的路径"><a href="#1102-得分最高的路径" class="headerlink" title="1102 得分最高的路径"></a>1102 得分最高的路径</h1><p>中等</p><p><a name="e7f84c4d"></a></p><h1 id="1103-分糖果-II"><a href="#1103-分糖果-II" class="headerlink" title="1103 分糖果 II"></a>1103 分糖果 II</h1><p>简单</p><p><a name="55fade58"></a></p><h1 id="1104-二叉树寻路"><a href="#1104-二叉树寻路" class="headerlink" title="1104 二叉树寻路"></a>1104 二叉树寻路</h1><p>中等</p><p><a name="4439726b"></a></p><h1 id="1105-填充书架"><a href="#1105-填充书架" class="headerlink" title="1105 填充书架"></a>1105 填充书架</h1><p>中等</p><p><a name="0547f1b6"></a></p><h1 id="1106-解析布尔表达式"><a href="#1106-解析布尔表达式" class="headerlink" title="1106 解析布尔表达式"></a>1106 解析布尔表达式</h1><p>困难</p><p><a name="07c5fc32"></a></p><h1 id="1108-IP-地址无效化"><a href="#1108-IP-地址无效化" class="headerlink" title="1108 IP 地址无效化"></a>1108 IP 地址无效化</h1><p>简单</p><p><a name="d2d76a06"></a></p><h1 id="1109-航班预订统计"><a href="#1109-航班预订统计" class="headerlink" title="1109 航班预订统计"></a>1109 航班预订统计</h1><p>中等</p><p><a name="86cf3d13"></a></p><h1 id="1110-删点成林"><a href="#1110-删点成林" class="headerlink" title="1110 删点成林"></a>1110 删点成林</h1><p>中等</p><p><a name="1e4f8724"></a></p><h1 id="1111-有效括号的嵌套深度"><a href="#1111-有效括号的嵌套深度" class="headerlink" title="1111 有效括号的嵌套深度"></a>1111 有效括号的嵌套深度</h1><p>中等</p><p><a name="2170611c"></a></p><h1 id="1114-按序打印"><a href="#1114-按序打印" class="headerlink" title="1114 按序打印"></a>1114 按序打印</h1><p>简单</p><p><a name="46b1502f"></a></p><h1 id="1115-交替打印FooBar"><a href="#1115-交替打印FooBar" class="headerlink" title="1115 交替打印FooBar"></a>1115 交替打印FooBar</h1><p>中等</p><p><a name="7fc10ca7"></a></p><h1 id="1116-打印零与奇偶数"><a href="#1116-打印零与奇偶数" class="headerlink" title="1116 打印零与奇偶数"></a>1116 打印零与奇偶数</h1><p>中等</p><p><a name="f70da132"></a></p><h1 id="1117-H2O-生成"><a href="#1117-H2O-生成" class="headerlink" title="1117 H2O 生成"></a>1117 H2O 生成</h1><p>困难</p><p><a name="b30eab00"></a></p><h1 id="1118-一月有多少天"><a href="#1118-一月有多少天" class="headerlink" title="1118 一月有多少天"></a>1118 一月有多少天</h1><p>简单</p><p><a name="75b3c8a3"></a></p><h1 id="1119-删去字符串中的元音"><a href="#1119-删去字符串中的元音" class="headerlink" title="1119 删去字符串中的元音"></a>1119 删去字符串中的元音</h1><p>简单</p><p><a name="4732d1fe"></a></p><h1 id="1120-子树的最大平均值"><a href="#1120-子树的最大平均值" class="headerlink" title="1120 子树的最大平均值"></a>1120 子树的最大平均值</h1><p>中等</p><p><a name="bac15940"></a></p><h1 id="1121-将数组分成几个递增序列"><a href="#1121-将数组分成几个递增序列" class="headerlink" title="1121 将数组分成几个递增序列"></a>1121 将数组分成几个递增序列</h1><p>困难</p><p><a name="b4f378d5"></a></p><h1 id="1122-数组的相对排序"><a href="#1122-数组的相对排序" class="headerlink" title="1122 数组的相对排序"></a>1122 数组的相对排序</h1><p>简单</p><p><a name="4617f5d3"></a></p><h1 id="1123-最深叶节点的最近公共祖先"><a href="#1123-最深叶节点的最近公共祖先" class="headerlink" title="1123 最深叶节点的最近公共祖先"></a>1123 最深叶节点的最近公共祖先</h1><p>中等</p><p><a name="e97b18d8"></a></p><h1 id="1124-表现良好的最长时间段"><a href="#1124-表现良好的最长时间段" class="headerlink" title="1124 表现良好的最长时间段"></a>1124 表现良好的最长时间段</h1><p>中等</p><p><a name="64c3138c"></a></p><h1 id="1125-最小的必要团队"><a href="#1125-最小的必要团队" class="headerlink" title="1125 最小的必要团队"></a>1125 最小的必要团队</h1><p>困难</p><p><a name="1249d3c7"></a></p><h1 id="1128-等价多米诺骨牌对的数量"><a href="#1128-等价多米诺骨牌对的数量" class="headerlink" title="1128 等价多米诺骨牌对的数量"></a>1128 等价多米诺骨牌对的数量</h1><p>简单</p><p><a name="838364ca"></a></p><h1 id="1129-颜色交替的最短路径"><a href="#1129-颜色交替的最短路径" class="headerlink" title="1129 颜色交替的最短路径"></a>1129 颜色交替的最短路径</h1><p>中等</p><p><a name="f953ba0f"></a></p><h1 id="1130-叶值的最小代价生成树"><a href="#1130-叶值的最小代价生成树" class="headerlink" title="1130 叶值的最小代价生成树"></a>1130 叶值的最小代价生成树</h1><p>中等</p><p><a name="fd2eed86"></a></p><h1 id="1131-绝对值表达式的最大值"><a href="#1131-绝对值表达式的最大值" class="headerlink" title="1131 绝对值表达式的最大值"></a>1131 绝对值表达式的最大值</h1><p>中等</p><p><a name="3f84e4ca"></a></p><h1 id="1133-最大唯一数"><a href="#1133-最大唯一数" class="headerlink" title="1133 最大唯一数"></a>1133 最大唯一数</h1><p>简单</p><p><a name="e83889f6"></a></p><h1 id="1134-阿姆斯特朗数"><a href="#1134-阿姆斯特朗数" class="headerlink" title="1134 阿姆斯特朗数"></a>1134 阿姆斯特朗数</h1><p>简单</p><p><a name="fddf992c"></a></p><h1 id="1135-最低成本联通所有城市"><a href="#1135-最低成本联通所有城市" class="headerlink" title="1135 最低成本联通所有城市"></a>1135 最低成本联通所有城市</h1><p>中等</p><p><a name="e9bcecde"></a></p><h1 id="1136-平行课程"><a href="#1136-平行课程" class="headerlink" title="1136 平行课程"></a>1136 平行课程</h1><p>困难</p><p><a name="14430c00"></a></p><h1 id="1137-第-N-个泰波那契数"><a href="#1137-第-N-个泰波那契数" class="headerlink" title="1137 第 N 个泰波那契数"></a>1137 第 N 个泰波那契数</h1><p>简单</p><p><a name="55e1ffcc"></a></p><h1 id="1138-字母板上的路径"><a href="#1138-字母板上的路径" class="headerlink" title="1138 字母板上的路径"></a>1138 字母板上的路径</h1><p>中等</p><p><a name="f333d05b"></a></p><h1 id="1139-最大的以-1-为边界的正方形"><a href="#1139-最大的以-1-为边界的正方形" class="headerlink" title="1139 最大的以 1 为边界的正方形"></a>1139 最大的以 1 为边界的正方形</h1><p>中等</p><p><a name="13b02ea1"></a></p><h1 id="1140-石子游戏-II"><a href="#1140-石子游戏-II" class="headerlink" title="1140 石子游戏 II"></a>1140 石子游戏 II</h1><p>中等</p><p><a name="5a4a8e96"></a></p><h1 id="1144-递减元素使数组呈锯齿状"><a href="#1144-递减元素使数组呈锯齿状" class="headerlink" title="1144 递减元素使数组呈锯齿状"></a>1144 递减元素使数组呈锯齿状</h1><p>中等</p><p><a name="ee5e2eb9"></a></p><h1 id="1145-二叉树着色游戏"><a href="#1145-二叉树着色游戏" class="headerlink" title="1145 二叉树着色游戏"></a>1145 二叉树着色游戏</h1><p>中等</p><p><a name="63658692"></a></p><h1 id="1146-快照数组"><a href="#1146-快照数组" class="headerlink" title="1146 快照数组"></a>1146 快照数组</h1><p>中等</p><p><a name="5247ca34"></a></p><h1 id="1147-段式回文"><a href="#1147-段式回文" class="headerlink" title="1147 段式回文"></a>1147 段式回文</h1><p>困难</p><p><a name="4e7aea37"></a></p><h1 id="1150-检查一个数是否在数组中占绝大多数"><a href="#1150-检查一个数是否在数组中占绝大多数" class="headerlink" title="1150 检查一个数是否在数组中占绝大多数"></a>1150 检查一个数是否在数组中占绝大多数</h1><p>简单</p><p><a name="5605fed2"></a></p><h1 id="1151-最少交换次数来组合所有的-1"><a href="#1151-最少交换次数来组合所有的-1" class="headerlink" title="1151 最少交换次数来组合所有的 1"></a>1151 最少交换次数来组合所有的 1</h1><p>中等</p><p><a name="eadb682b"></a></p><h1 id="1152-用户网站访问行为分析"><a href="#1152-用户网站访问行为分析" class="headerlink" title="1152 用户网站访问行为分析"></a>1152 用户网站访问行为分析</h1><p>中等</p><p><a name="1d535a11"></a></p><h1 id="1153-字符串转化"><a href="#1153-字符串转化" class="headerlink" title="1153 字符串转化"></a>1153 字符串转化</h1><p>困难</p><p><a name="e0fefb79"></a></p><h1 id="1154-一年中的第几天"><a href="#1154-一年中的第几天" class="headerlink" title="1154 一年中的第几天"></a>1154 一年中的第几天</h1><p>简单</p><p><a name="1849b679"></a></p><h1 id="1155-掷骰子的N种方法"><a href="#1155-掷骰子的N种方法" class="headerlink" title="1155 掷骰子的N种方法"></a>1155 掷骰子的N种方法</h1><p>中等 <a href="https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum/</a><br>第一想到的是路径总和，但是 <code>O(f ^ d）</code>  但肯定不可以，指数级别的果断想DP或者回溯<br>假设 （3，6，10）<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566633313271-69bf9716-f930-4de3-8e1b-8d5ad92b3d92.png#align=left&display=inline&height=208&name=image.png&originHeight=334&originWidth=863&size=46453&status=done&width=537" alt="image.png"><br>可以得出状态转移方程为：<br><img src="https://cdn.nlark.com/yuque/__latex/99b604ef93290f7bd0b31de091fb5255.svg#card=math&code=dp%5Bi%5D%5Bj%5D%20%3D%20dp%5Bi%20-%201%5D%5Bj%20-%201%5D%20%2B%20dp%5Bi%20-%201%5D%5Bj%20-%202%5D%20%2B%20...%20%2B%20dp%5Bi%20-%201%5D%5Bj%20-%20f%5D%EF%BC%8C%E5%85%B6%E4%B8%ADi%E4%B8%BA%E5%B1%82%E6%95%B0%EF%BC%8Cj%E4%B8%BA%E7%9B%AE%E6%A0%87%E7%B4%AF%E5%8A%A0%E5%92%8C&height=24.137931034482758&width=678.2758620689656" alt></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> numRollsToTarget <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>f<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>target<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>f<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>target<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="8fRx8"></a></p><h1 id="1156-单字符重复子串的最大长度"><a href="#1156-单字符重复子串的最大长度" class="headerlink" title="1156 单字符重复子串的最大长度"></a>1156 单字符重复子串的最大长度</h1><p>中等</p><p><a name="3ea72d82"></a></p><h1 id="1157-子数组中占绝大多数的元素"><a href="#1157-子数组中占绝大多数的元素" class="headerlink" title="1157 子数组中占绝大多数的元素"></a>1157 子数组中占绝大多数的元素</h1><p>困难</p><p><a name="69ec08f5"></a></p><h1 id="1160-拼写单词"><a href="#1160-拼写单词" class="headerlink" title="1160 拼写单词"></a>1160 拼写单词</h1><p>简单</p><p><a name="fdcb76b7"></a></p><h1 id="1161-最大层内元素和"><a href="#1161-最大层内元素和" class="headerlink" title="1161 最大层内元素和"></a>1161 最大层内元素和</h1><p>中等</p><p><a name="c291d007"></a></p><h1 id="1162-地图分析"><a href="#1162-地图分析" class="headerlink" title="1162 地图分析"></a>1162 地图分析</h1><p>中等</p><p><a name="697ee12c"></a></p><h1 id="1163-按字典序排在最后的子串"><a href="#1163-按字典序排在最后的子串" class="headerlink" title="1163 按字典序排在最后的子串"></a>1163 按字典序排在最后的子串</h1><p>困难</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——精简</title>
      <link href="/2019/08/23/shu-ju-jie-gou-jing-jian/"/>
      <url>/2019/08/23/shu-ju-jie-gou-jing-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考王道数据结构</p></blockquote><p><a name="TrweM"></a></p><h1 id="栈、队列、线性表"><a href="#栈、队列、线性表" class="headerlink" title="栈、队列、线性表"></a>栈、队列、线性表</h1><p>对于n个元素进制，出栈序列个数——catalan数，例如三个元素入栈<br><img src="https://cdn.nlark.com/yuque/__latex/fc7a25ba832b9a8d0b3e6bc2535471ca.svg#card=math&code=%5Cfrac%7B1%7D%7Bn%2B1%7D%20C_%7B2%20n%7D%5E%7Bn%7D%3D%5Cfrac%7B1%7D%7Bn%2B1%7D%20%5Cfrac%7B%282%20n%29%20%21%7D%7Bn%20%21%20%5Ctimes%20n%20%21%7D%3D%5Cfrac%7B6%20%5Ctimes%205%20%5Ctimes%204%7D%7B4%20%5Ctimes%203%20%5Ctimes%202%20%5Ctimes%201%7D%3D5.&height=42.64367816091954&width=354.82758620689657" alt></p><p>循环队列判断空和满<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566522116609-6e6f0a59-7185-4aee-9154-bbf30cd9e458.png#align=left&display=inline&height=190&originHeight=445&originWidth=476&size=0&status=done&width=203" alt></p><ul><li>队满条件：(Q.rear+1)%MaxSize == Q.front</li><li>队空条件：Q.front == Q.rear</li></ul><p>中缀表达式转为后缀表达式可以用到栈，局部变量一般用栈来存储<br>通常使用队列来处理函数和过程调用<br><a name="q7JPd"></a></p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树的节点数等于所有节点的度数加一：N+N+…N == 1xN + 2xN+…mxN<br>高度为h的m叉树至多结点数：n=(m-1)/(m-1)    根据等差数列求和得出<br>n个结点的m叉树的最小高度：ceil(<img src="https://cdn.nlark.com/yuque/__latex/73c27e9dc3b321486cf7631dfc990b5a.svg#card=math&code=%5Clog%20_%7Bm%7D%28n%28m-1%29%2B1%29%0A&height=20.919540229885058&width=142.41379310344828" alt>）<br>n个结点的二叉链表中有n+1个空链域<br>先序遍历和中序遍历可以建立一个二叉树，以先序入栈，中序出栈，可能性也是一个catalan数<br>要构建一个二叉树必须要知道中序遍历结果<br>二叉搜索树的中序遍历是递增序列<br>二叉排序数的删除：</p><ul><li>右子树为空，左子女填补</li><li>左子树为空，右子女填补</li><li>左右子树都不为空：右子树中序第一个子女上位</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566528113403-7fddf9a5-c477-4cbd-908f-6ec9cac6a8ac.png#align=left&display=inline&height=150&name=&originHeight=359&originWidth=966&size=0&status=done&width=403" alt><br>平衡二叉树的插入：<br>每次调整的对象都是最小不平衡子树，然后不断往上调整，分为四种旋转<br>n个节点的平衡二叉树最大深度为O(logn)，平均查找长度为O(logn)<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566528692711-90015396-0d3b-4f88-a188-2a007d6bce41.png#align=left&display=inline&height=117&originHeight=652&originWidth=761&size=0&status=done&width=136" alt><br>哈弗曼树的构造和计算：总是选两个根节点最小值组成一棵树<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566529355443-8d750ece-0c2c-4cf3-9f6e-2e5798f2c7a4.png#align=left&display=inline&height=317&originHeight=698&originWidth=877&size=0&status=done&width=398" alt><br>哈夫曼编码就是，左边是0，右边是1来生成路径编码<br>哈弗曼树的带权路径长度WPL最小，也叫最优二叉树，构造过程中新建了 N-1个结点可以得出 哈夫曼树的节点总数为 2N-1<br>哈弗曼树并不唯一，但是带权路径一定是相同的<br><a name="dFqZ3"></a></p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p>图不可以是空图<br>强连通图：定点间都有路径（直接距离），强连通分量：极大强连通子图，这两个都是针对有向图<br>无向图中有7个定点，保证任何情况下都是连通，则前六个全连通，将第七个点连通就可以了：<img src="https://cdn.nlark.com/yuque/__latex/b547edda87354326a7d57e875e09fc8c.svg#card=math&code=6%20%5Ctimes%205%20%2F%202%2B1%0A&height=20.919540229885058&width=82.8735632183908" alt><br>简单路径：路径序列中，定点不重复出现的路径<br>简单回路：除了第一个顶点和最后一个顶点外，其余顶点不重复出现的回路叫简单回路<br>回路对应路径，简单回路对应简单路径<br>存在回路就不存在拓扑排序<br>最小生成树：</p><ul><li>prim算法，构建当前最小的临近边，类似Dijkstra算法，贪心</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566530754169-e06fc7a9-a105-4a8e-8d2b-febd4670954d.png#align=left&display=inline&height=274&name=&originHeight=576&originWidth=972&size=0&status=done&width=462" alt><br>不能构成环的前提下，找顶点集中边最小的加入，直到所有顶点都找到，注意回退的时候是回退到经过节点可以达到的下一个最小值的节点上</p><ul><li>Kruskal算法：适合边稀疏，但是顶点多的图</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566530933486-300c4edc-1b07-43ba-972a-5fbb62ff37b5.png#align=left&display=inline&height=287&originHeight=539&originWidth=921&size=0&status=done&width=490" alt></p><ul><li>破圈法：把他们变成无环</li></ul><p>最短路径：</p><ul><li>Dijksra算法：基于贪心算法</li></ul><p>需要有个    dist[]    一维数组来存储更新到其他点的最短路径，每一个数字都跳跃一遍就结束<br>具体的看<a href="https://www.yuque.com/sansenlian/blog/gx195n" target="_blank" rel="noopener">https://www.yuque.com/sansenlian/blog/gx195n</a></p><ul><li>Floyd算法</li></ul><p>主要逻辑是：A -&gt; B 加入以 C 为中转城市，有：A -&gt; C -&gt; B 发现以C为中转城市的距离会更短，那就替换A -&gt; B位置是距离，大家都作为中转城市试一下：<br><img src="https://cdn.nlark.com/yuque/__latex/4716468149cfe90af1c6cf5770270224.svg#card=math&code=Path%5Bi%5D%5Bj%5D%20%3D%20Min%28%7BPath%5Bi%5D%5Bk%5D%20%2B%20Path%5Bk%5D%5Bj%5D%7D%2Ck%3D0%2C1%2C...%2Cn-1%29&height=20.919540229885058&width=440.11494252873564" alt><br>拓扑排序：<br>由一个有向无环图DAG组成，无环图，每次出来一个没有入度的节点<br>关键路径：<br><a name="phlXO"></a></p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>B树B+树B-树B*树：需要搜索树的前提</p><ul><li>B数（多路平衡查找树）：不支持顺序查找，插入溢出就分裂，删除填补的位置可以找兄弟借<ul><li>每个节点最多m棵子树，最多含有m-1个关键字</li><li>每个节点至少有<img src="https://cdn.nlark.com/yuque/__latex/afccd1fd0cbaaf3881ff5365b9644c10.svg#card=math&code=%5Clceil%28m%2F2%29%5Crceil&height=20.919540229885058&width=59.54022988505747" alt>棵子树，即最多 <img src="https://cdn.nlark.com/yuque/__latex/d9342eeba7bb5f1691f59756cf877644.svg#card=math&code=%5Clceil%28m%2F2%29%5Crceil-1&height=20.919540229885058&width=88.50574712643679" alt>个关键字</li><li>若根节点不是终端节点，至少有两棵子树</li><li><img src="https://cdn.nlark.com/yuque/__latex/e236c444120952ae85e2296478aa51db.svg#card=math&code=%5Clog%20_%7Bm%7D%28n%2B1%29%20%5Cleq%20h%20%5Cleq%20%5Clog%20_%7B%5Clceil%20m%20%2F%202%20%5Crceil%7D%28%28n%2B1%29%20%2F%202%29%2B1%0A&height=23.333333333333332&width=307.35632183908046" alt></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566550752668-d769ee77-119c-4e56-bbee-2dc51bb2a084.png#align=left&display=inline&height=160&name=image.png&originHeight=500&originWidth=1048&size=856454&status=done&width=336" alt="image.png"></p><ul><li>B+树：可以支持顺序查找<ul><li>节点子树个数和关键字个数相等</li><li><img src="https://cdn.nlark.com/yuque/__latex/01cccef0b543842d2ba7ea4e34c57d7f.svg#card=math&code=%5Clceil%20m%20%2F%202%5Crceil%20%5Cleqslant%20%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%AA%E6%95%B0%E3%80%81%E5%AD%90%E6%A0%91%E4%B8%AA%E6%95%B0%20%5Cleqslant%20m%0A&height=24.137931034482758&width=263.1034482758621" alt></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566551642903-0255fc22-0d50-42ca-9b5f-1f196e7eca00.png#align=left&display=inline&height=151&name=image.png&originHeight=426&originWidth=1026&size=806873&status=done&width=364" alt="image.png"><br>散列表，处理冲突的方法：</p><ul><li>开放定址法：分配到空闲空间去<ul><li><br></li></ul></li><li>拉链法：用一个线性表存储冲突的值</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——详解</title>
      <link href="/2019/08/23/shu-ju-jie-gou-xiang-jie/"/>
      <url>/2019/08/23/shu-ju-jie-gou-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Power By <a href="mailto:sansenlian@foxmail.com" target="_blank" rel="noopener">sansenlian@foxmail.com</a></p></blockquote><p><a name="6AnbR"></a></p><h1 id="第一章-线性表"><a href="#第一章-线性表" class="headerlink" title="第一章    线性表"></a>第一章    线性表</h1><p><a name="LqU6l"></a></p><h1 id="第二章-栈和队列"><a href="#第二章-栈和队列" class="headerlink" title="第二章    栈和队列"></a>第二章    栈和队列</h1><p><a name="uHgWu"></a></p><h1 id="第三章-树与二叉树"><a href="#第三章-树与二叉树" class="headerlink" title="第三章    树与二叉树"></a>第三章    树与二叉树</h1><p><a name="3E9jW"></a></p><h1 id="第四章-图"><a href="#第四章-图" class="headerlink" title="第四章    图"></a>第四章    图</h1><p><a name="7OaKm"></a></p><h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><p><a name="fa4Id"></a></p><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><p><a name="aerJX"></a></p><h4 id="1-Dijkstra最短路径"><a href="#1-Dijkstra最短路径" class="headerlink" title="1. Dijkstra最短路径"></a>1. Dijkstra最短路径</h4><p>不允许边有负值    O(n2)<br>如果不要求求出分别到达每个点的最短路径就直接用一个dist[]一维数组就好<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566537731266-76744107-9f23-4f75-acc9-5af49a6235e9.png#align=left&display=inline&height=234&name=image.png&originHeight=292&originWidth=600&size=80214&status=done&width=480" alt="image.png"><br>求出1号到其他个点的最短距离，如果要求出到达每个点的最短路径，就要再用一个数组path[]来存储路径<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566537858095-cb22268e-857b-4acd-b19e-5fa0fb28cf2a.png#align=left&display=inline&height=290&name=image.png&originHeight=362&originWidth=480&size=118958&status=done&width=384" alt="image.png"><br>一号到其他点的初始距离为：</p><table><thead><tr><th>0</th><th>1</th><th>12</th><th>INF</th><th>INF</th><th>INF</th></tr></thead></table><p>可以发现到2的距离最短，那就取2号来作为跳跃点去更新dist[]数组</p><table><thead><tr><th>0</th><th>1</th><th>1+9</th><th>1+3</th><th>INF</th><th>INF</th></tr></thead></table><p>跟新完后继续看下dist[]数组，发现4的距离最短，那么就可以再用4作为跳跃点来做下一步计算</p><table><thead><tr><th>0</th><th>1</th><th>1+3+4</th><th>1+3</th><th>1+3+13</th><th>1+3+15</th></tr></thead></table><p>然后继续做下一步，直到所有点都作为跳跃点（松弛）才结束</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mark <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化 dist</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化 mark</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始Dijkstra</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>t<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 找到离i最近的点,并且没有被标记过的点</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>                    min <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    t <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mark<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 找到最近的点后就开始开始更新 dist</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                    dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dist<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果要存储路径就加上：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566547652396-3b25a831-0c6a-4089-ba6e-1d7b6df69a5b.png#align=left&display=inline&height=262&name=image.png&originHeight=408&originWidth=710&size=54138&status=done&width=457" alt="image.png"><br><a name="BZPue"></a></p><h4 id="2-Floyd算法求各顶点之间的最短路径"><a href="#2-Floyd算法求各顶点之间的最短路径" class="headerlink" title="2. Floyd算法求各顶点之间的最短路径"></a>2. Floyd算法求各顶点之间的最短路径</h4><p>可以使用对每个边进行一遍Dijkstra，但是就会有边不允许负值的情况，但是用Floyd就可以允许边为负值，但是不允许有负值的边组成回路</p><p><a name="L15TK"></a></p><h1 id="第五章-查找"><a href="#第五章-查找" class="headerlink" title="第五章    查找"></a>第五章    查找</h1><p><a name="4Mcuw"></a></p><h1 id="第六章-排序"><a href="#第六章-排序" class="headerlink" title="第六章    排序"></a>第六章    排序</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法中级题解——动态规划</title>
      <link href="/2019/08/23/leetcode-suan-fa-zhong-ji-ti-jie-dong-tai-gui-hua/"/>
      <url>/2019/08/23/leetcode-suan-fa-zhong-ji-ti-jie-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<p><a name="1."></a></p><h1 id="1-跳跃游戏"><a href="#1-跳跃游戏" class="headerlink" title="1. 跳跃游戏"></a>1. 跳跃游戏</h1><p><a name="1350e94a"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><a name="t4x1l"></a></p><h4 id="1-解法一"><a href="#1-解法一" class="headerlink" title="1. 解法一"></a>1. 解法一</h4><p>用数组标记是否可以访问<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566491788435-28f5c497-f782-47ae-902b-25e4308a40bb.png#align=left&display=inline&height=160&name=image.png&originHeight=400&originWidth=710&size=328627&status=done&width=284" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> canJump <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> dog <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>dog<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>                        cat<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cat<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>undefined<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="rY8z0"></a></p><h4 id="2-解法二：贪心"><a href="#2-解法二：贪心" class="headerlink" title="2. 解法二：贪心"></a>2. 解法二：贪心</h4><p>维护当前所能达到最远的距离即可</p><p><a name="2."></a></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p><a name="1350e94a-1"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>可能一开始会想到用递归，但是不到20就会超时</p><ul><li><p>错误的方式：递归</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> uniquePaths <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">cat</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>m <span class="token operator">||</span> j<span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token function">cat</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token function">cat</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token number">-1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">cat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//console.log(count)</span>      <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>正确的方式：算公式用动态规划</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566497079634-6ca707a9-2367-4259-a0cb-5d84c41d7fbb.png#align=left&display=inline&height=224&name=image.png&originHeight=560&originWidth=1694&size=353164&status=done&width=677.6" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> uniquePaths <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> cl <span class="token operator">=</span> cat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> cl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">1</span>        <span class="token punctuation">}</span>        cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>cat<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cat<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3."></a></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><a name="1350e94a-2"></a></p><h2 id="题目详情-2"><a href="#题目详情-2" class="headerlink" title="题目详情"></a>题目详情</h2><p><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p><a name="4."></a></p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><a name="1350e94a-3"></a></p><h2 id="题目详情-3"><a href="#题目详情-3" class="headerlink" title="题目详情"></a>题目详情</h2><p><a name="4161afd7-3"></a></p><h2 id="题解跳跃游戏"><a href="#题解跳跃游戏" class="headerlink" title="题解跳跃游戏"></a>题解跳跃游戏</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——其他</title>
      <link href="/2019/08/21/leetcode-suan-fa-chu-ji-ti-jie-qi-ta/"/>
      <url>/2019/08/21/leetcode-suan-fa-chu-ji-ti-jie-qi-ta/</url>
      
        <content type="html"><![CDATA[<p><a name="1."></a></p><h1 id="1-位1的个数"><a href="#1-位1的个数" class="headerlink" title="1. 位1的个数"></a>1. 位1的个数</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/64/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/64/</a><br><a name="1350e94a"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F" target="_blank" rel="noopener">汉明重量</a>）。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>00000000000000000000000000001011<br><strong>输出：</strong>3<br><strong>解释：</strong>输入的二进制串 <code>**00000000000000000000000000001011** 中，共有三位为 &#39;1&#39;。</code><br><strong>示例 2：</strong><br><strong>输入：</strong>00000000000000000000000010000000<br><strong>输出：</strong>1<br><strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong> 中，共有一位为 ‘1’。<br><strong>示例 3：</strong><br><strong>输入：</strong>11111111111111111111111111111101<br><strong>输出：</strong>31<br><strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 ‘1’。<br> <br><strong>提示：</strong></p><ul><li><p>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</p></li><li><p>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284" target="_blank" rel="noopener">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</p><p><br><strong>进阶</strong>:<br>如果多次调用这个函数，你将如何优化你的算法？<br><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2></li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> hammingWeight <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cat <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cat<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/0/g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="1.-1"></a></p><h1 id="2-汉明距离"><a href="#2-汉明距离" class="headerlink" title="2. 汉明距离"></a>2. 汉明距离</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/65/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/65/</a><br><a name="1350e94a-1"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p>两个整数之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。<br>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。<br><strong>注意：</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 2.<br><strong>示例:</strong><br><strong>输入:</strong> x = 1, y = 4</p><p><strong>输出:</strong> 2</p><p><strong>解释:</strong><br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>       ↑   ↑</p><p>上面的箭头指出了对应二进制位不同的位置。<br><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> hammingDistance <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">^</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/0/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="1.-2"></a></p><h1 id="3-颠倒二进制位"><a href="#3-颠倒二进制位" class="headerlink" title="3. 颠倒二进制位"></a>3. 颠倒二进制位</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/66/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/66/</a><br><a name="1350e94a-2"></a></p><h2 id="题目详情-2"><a href="#题目详情-2" class="headerlink" title="题目详情"></a>题目详情</h2><p>颠倒给定的 32 位无符号整数的二进制位。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> 00000010100101000001111010011100<br><strong>输出:</strong> 00111001011110000010100101000000<br><strong>解释: *<em>输入的二进制串 *</em>00000010100101000001111010011100 **表示无符号整数</strong> 43261596，<strong><br>     因此返回 964176192，其二进制表示形式为 **00111001011110000010100101000000</strong>。<br><strong>示例 2：</strong><br><strong>输入：</strong>11111111111111111111111111111101<br><strong>输出：</strong>10111111111111111111111111111111<br><strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，<br>      因此返回 3221225471 其二进制表示形式为 <strong>10101111110010110010011101101001。</strong><br> <br><strong>提示：</strong></p><ul><li><p>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</p></li><li><p>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284" target="_blank" rel="noopener">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 2</strong> 中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</p><p><br><strong>进阶</strong>:<br>如果多次调用这个函数，你将如何优化你的算法？<br><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>可以用交换，当然也可以用字符串拼接的方式，注意，需要补全到32位</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> reverseBits <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> cat <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> len <span class="token operator">=</span> cat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          cat <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> cat          len<span class="token operator">++</span>      <span class="token punctuation">}</span>      cat <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> len<span class="token number">-1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> t <span class="token operator">=</span> cat<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>          cat<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> cat<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>          cat<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>          left<span class="token operator">++</span><span class="token punctuation">;</span>          right<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><p><a name="1.-3"></a></p><h1 id="4-帕斯卡三角形"><a href="#4-帕斯卡三角形" class="headerlink" title="4. 帕斯卡三角形"></a>4. 帕斯卡三角形</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/67/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/67/</a><br><a name="1350e94a-3"></a></p><h2 id="题目详情-3"><a href="#题目详情-3" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个非负整数 _numRows，_生成杨辉三角的前 _numRows _行。<br><img src="https://cdn.nlark.com/yuque/0/2019/gif/437349/1566410672672-88ff4a7d-86b8-463d-9b66-6987cde19441.gif#align=left&display=inline&height=240&originHeight=240&originWidth=260&size=0&status=done&width=260" alt><br>在杨辉三角中，每个数是它左上方和右上方的数的和。<br><strong>示例:</strong><br><strong>输入:</strong> 5<br><strong>输出:</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>     <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> generate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> leverl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leverl<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token keyword">let</span> n <span class="token operator">=</span> numRows<span class="token number">-2</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">let</span> len <span class="token operator">=</span> leverl<span class="token punctuation">.</span>length<span class="token punctuation">;</span>           <span class="token keyword">let</span> t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leverl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>leverl<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>           t<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           leverl <span class="token operator">=</span> t<span class="token punctuation">;</span>           res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leverl<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//console.log(res)</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="1.-4"></a></p><h1 id="5-有效的括号"><a href="#5-有效的括号" class="headerlink" title="5. 有效的括号"></a>5. 有效的括号</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/68/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/68/</a><br><a name="1350e94a-4"></a></p><h2 id="题目详情-4"><a href="#题目详情-4" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。<br><strong>示例 1:</strong><br><strong>输入:</strong> “()”<br><strong>输出:</strong> true<br><strong>示例 2:</strong><br><strong>输入:</strong> “()[]{}”<br><strong>输出:</strong> true<br><strong>示例 3:</strong><br><strong>输入:</strong> “(]”<br><strong>输出:</strong> false<br><strong>示例 4:</strong><br><strong>输入:</strong> “([)]”<br><strong>输出:</strong> false<br><strong>示例 5:</strong><br><strong>输入:</strong> “{[]}”<br><strong>输出:</strong> true<br><a name="4161afd7-4"></a></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span>  <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'{'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> out <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> out<span class="token operator">!=</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'}'</span> <span class="token operator">&amp;&amp;</span> out<span class="token operator">!=</span><span class="token string">'{'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">']'</span> <span class="token operator">&amp;&amp;</span> out<span class="token operator">!=</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="1.-5"></a></p><h1 id="6-缺失数字"><a href="#6-缺失数字" class="headerlink" title="6. 缺失数字"></a>6. 缺失数字</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/69/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/26/others/69/</a><br><a name="1350e94a-5"></a></p><h2 id="题目详情-5"><a href="#题目详情-5" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个包含 <code>0, 1, 2, ..., n</code> 中 <em>n</em> 个数的序列，找出 0 .. <em>n</em> 中没有出现在序列中的那个数。<br><strong>示例 1:</strong><br><strong>输入:</strong> [3,0,1]<br><strong>输出:</strong> 2<br><strong>示例 2:</strong><br><strong>输入:</strong> [9,6,4,2,3,5,7,0,1]<br><strong>输出:</strong> 8<br><strong>说明:</strong><br>你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?<br><a name="4161afd7-5"></a></p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> missingNumber <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> sum_add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>sum_add<span class="token operator">+</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token operator">-</span>sum_add<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础数学求解算法</title>
      <link href="/2019/08/21/ji-chu-shu-xue-qiu-jie-suan-fa/"/>
      <url>/2019/08/21/ji-chu-shu-xue-qiu-jie-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><a name="GQyuH"></a></p><h3 id="辗转相除法（欧几里得算法）——最大公约数"><a href="#辗转相除法（欧几里得算法）——最大公约数" class="headerlink" title="辗转相除法（欧几里得算法）——最大公约数"></a>辗转相除法（欧几里得算法）——最大公约数</h3><p>定理：两个正整数 a 和 b（a 大于 b）,它们的最大公约数等于 a 除以 b 的余数 c 和 较小数 b 之间的最大公约数。gcd(num1,num2)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">25</span><span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">// 不为0 继续和较小的数字比较</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 结束</span></code></pre><p><a name="CoFyO"></a></p><h3 id="埃拉托斯特尼筛法（标记法）——求质数"><a href="#埃拉托斯特尼筛法（标记法）——求质数" class="headerlink" title="埃拉托斯特尼筛法（标记法）——求质数"></a>埃拉托斯特尼筛法（标记法）——求质数</h3><p>如果对一个个数字进行判断是不是质数，那么判断到1000左右就会超时，用标记法就很完美<br><img src="https://cdn.nlark.com/yuque/0/2019/gif/437349/1566390737132-b14dfa3c-c9aa-43d0-ab26-0ae5a718003c.gif#align=left&display=inline&height=369&name=&originHeight=369&originWidth=445&size=0&status=done&width=445" alt><br><a name="D428S"></a></p><h3 id="旋转矩阵90rot——求A转置矩阵然后再交换列"><a href="#旋转矩阵90rot——求A转置矩阵然后再交换列" class="headerlink" title="旋转矩阵90rot——求A转置矩阵然后再交换列"></a>旋转矩阵90rot——求A转置矩阵然后再交换列</h3><p><a name="AJIbx"></a></p><h3 id="求冥——换底公式"><a href="#求冥——换底公式" class="headerlink" title="求冥——换底公式"></a>求冥——换底公式</h3><p><img src="https://cdn.nlark.com/yuque/__latex/6eb69670e8a18b97cbc8af4736aa9c01.svg#card=math&code=%5Clog%20_%7Ba%7D%20b%3D%5Cfrac%7B%5Clog%20_%7Bc%7D%20b%7D%7B%5Clog%20_%7Bc%7D%20a%7D&height=45.05747126436782&width=107.816091954023" alt><br>比如求3的冥次方可以用这样的方法求：<br><img src="https://cdn.nlark.com/yuque/__latex/9bd1cbbbaa73685724cf1811d184e9c3.svg#card=math&code=%5Clog%20_%7B3%7D%20n%3D%5Cfrac%7B%5Clog%20_%7B10%7D%20n%7D%7B%5Clog%20_%7B10%7D%203%7D&height=45.05747126436782&width=118.27586206896552" alt><br><a name="KOLVl"></a></p><h3 id="根据三角形边求面积"><a href="#根据三角形边求面积" class="headerlink" title="根据三角形边求面积"></a>根据三角形边求面积</h3><p><img src="https://cdn.nlark.com/yuque/__latex/4312fb373ba1660c447da59d25da1876.svg#card=math&code=S%3D%5Csqrt%7Bp%28p-a%29%28p-b%29%28p-c%29%7D%EF%BC%8Cp%3D%5Cfrac%7Ba%2Bb%2Bc%7D%7B2%7D&height=38.62068965517241&width=325.86206896551727" alt><br><a name="Fq9cr"></a></p><h3 id="判断是否在多边形内部"><a href="#判断是否在多边形内部" class="headerlink" title="判断是否在多边形内部"></a>判断是否在多边形内部</h3><ol><li>面积法：目标点与每条边组成的多边形面积是否等于多边形面积</li><li>夹角法：目标点与所有边的夹角和为360就表明在内部</li><li>射线法： <code>关键</code> 用在地图领域</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566820507195-19a3030a-19a1-4719-9948-faf3ea946236.png#align=left&display=inline&height=138&name=image.png&originHeight=303&originWidth=418&size=53751&status=done&width=191" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566822062964-7979f095-4143-47b7-af8a-fe86bc86ec07.png#align=left&display=inline&height=165&originHeight=293&originWidth=836&size=0&status=done&width=472" alt><br>向右或向左水平射出一条射线，相交为奇数就在内部，相交为偶数就为外部，有四种情况：</p><ul><li>点在多边形边上（或点在多边形点上），计算点与两个多边形顶点的连线斜率是否相等</li><li>射线经过的情况</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——数学</title>
      <link href="/2019/08/21/leetcode-suan-fa-chu-ji-ti-jie-shu-xue/"/>
      <url>/2019/08/21/leetcode-suan-fa-chu-ji-ti-jie-shu-xue/</url>
      
        <content type="html"><![CDATA[<p><a name="1."></a></p><h1 id="1-Fizz-Buzz"><a href="#1-Fizz-Buzz" class="headerlink" title="1.  Fizz Buzz"></a>1.  Fizz Buzz</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/60/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/60/</a><br><a name="1350e94a"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>写一个程序，输出从 1 到 <em>n</em> 数字的字符串表示。</p><ol><li><p>如果 <em>n</em> 是3的倍数，输出“Fizz”；</p></li><li><p>如果 <em>n</em> 是5的倍数，输出“Buzz”；</p></li></ol><p>3.如果 <em>n</em> 同时是3和5的倍数，输出 “FizzBuzz”。</p><p><strong>示例：</strong></p><pre><code>n = 15,返回:[    &quot;1&quot;,    &quot;2&quot;,    &quot;Fizz&quot;,    &quot;4&quot;,    &quot;Buzz&quot;,    &quot;Fizz&quot;,    &quot;7&quot;,    &quot;8&quot;,    &quot;Fizz&quot;,    &quot;Buzz&quot;,    &quot;11&quot;,    &quot;Fizz&quot;,    &quot;13&quot;,    &quot;14&quot;,    &quot;FizzBuzz&quot;]</code></pre><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> fizzBuzz <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> str_3 <span class="token operator">=</span> <span class="token string">"Fizz"</span><span class="token punctuation">,</span>str_5<span class="token operator">=</span><span class="token string">"Buzz"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> num <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> multi_3 <span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> multi_5 <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>multi_3 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>multi_5<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str_3<span class="token operator">+</span>str_5<span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>multi_5 <span class="token operator">&amp;&amp;</span> multi_3<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str_5<span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>multi_3 <span class="token operator">&amp;&amp;</span> multi_5<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str_3<span class="token punctuation">)</span>            <span class="token keyword">else</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(res)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="2."></a></p><h1 id="2-计数质数"><a href="#2-计数质数" class="headerlink" title="2. 计数质数"></a>2. 计数质数</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/61/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/61/</a><br><a name="1350e94a-1"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p>统计所有小于非负整数 <em>n</em> 的质数的数量。</p><p><strong>示例:</strong></p><pre><code>输入: 10输出: 4解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</code></pre><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>用 <code>埃拉托斯特尼筛法</code> 标记法就可以解决，如果一个个求质数的话求到1000就不超时了<br><img src="https://cdn.nlark.com/yuque/0/2019/gif/437349/1566391754308-6d0fdd1c-bf73-4564-9b81-69211638b804.gif#align=left&display=inline&height=278&originHeight=369&originWidth=445&size=0&status=done&width=335" alt></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> countPrimes <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> hashMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> j <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>t<span class="token operator">=</span>i<span class="token operator">*</span>j<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">==</span>undefined<span class="token punctuation">)</span> hashMap<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                t<span class="token operator">=</span>i<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>undefined<span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3."></a></p><h1 id="3-3的幂"><a href="#3-3的幂" class="headerlink" title="3. 3的幂"></a>3. 3的幂</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/62/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/62/</a><br><a name="1350e94a-2"></a></p><h2 id="题目详情-2"><a href="#题目详情-2" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。</p><p><strong>示例 1:</strong></p><pre><code>输入: 27输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 0输出: false</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: 9输出: true</code></pre><p><strong>示例 4:</strong></p><pre><code>输入: 45输出: false</code></pre><p><strong>进阶：</strong><br>你能不使用循环或者递归来完成本题吗？<br><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>可以用换底公式求：<br><img src="https://cdn.nlark.com/yuque/__latex/9bd1cbbbaa73685724cf1811d184e9c3.svg#card=math&code=%5Clog%20_%7B3%7D%20n%3D%5Cfrac%7B%5Clog%20_%7B10%7D%20n%7D%7B%5Clog%20_%7B10%7D%203%7D&height=44&width=117" alt></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> isPowerOfThree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cat <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span> <span class="token operator">==</span> cat<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="0VmTU"></a></p><h1 id="4-罗马数字转整数"><a href="#4-罗马数字转整数" class="headerlink" title="4. 罗马数字转整数"></a>4. 罗马数字转整数</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/63/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/25/math/63/</a>罗马数字转整数<br><a name="1350e94a-3"></a></p><h2 id="题目详情-3"><a href="#题目详情-3" class="headerlink" title="题目详情"></a>题目详情</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><pre><code>字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p><strong>示例 1:</strong></p><pre><code>输入: &quot;III&quot;输出: 3</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: &quot;IV&quot;输出: 4</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: &quot;IX&quot;输出: 9</code></pre><p><strong>示例 4:</strong></p><pre><code>输入: &quot;LVIII&quot;输出: 58解释: L = 50, V= 5, III = 3.</code></pre><p><strong>示例 5:</strong></p><pre><code>输入: &quot;MCMXCIV&quot;输出: 1994解释: M = 1000, CM = 900, XC = 90, IV = 4.</code></pre><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>不一定要用取两个数字拿出来判断比较，可以看下，如果当前位置原来计算机会读成什么意义，做个差值弥补就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这些数字最多只会出现一次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"IV"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"IX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"XL"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"XC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"CD"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"CM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"I"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"V"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"X"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"L"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"C"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"D"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"M"</span><span class="token punctuation">:</span>                    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——设计问题</title>
      <link href="/2019/08/21/leetcode-suan-fa-chu-ji-ti-jie-she-ji-wen-ti/"/>
      <url>/2019/08/21/leetcode-suan-fa-chu-ji-ti-jie-she-ji-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a name="1."></a></p><h1 id="1-Shuffle-an-Array"><a href="#1-Shuffle-an-Array" class="headerlink" title="1. Shuffle an Array"></a>1. Shuffle an Array</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/24/design/58/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/24/design/58/</a><br><a name="1350e94a"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>打乱一个没有重复元素的数组。</p><p><strong>示例:</strong></p><pre><code>// 以数字集合 1, 2 和 3 初始化数组。int[] nums = {1,2,3};Solution solution = new Solution(nums);// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。solution.shuffle();// 重设数组到它的初始状态[1,2,3]。solution.reset();// 随机返回数组[1,2,3]打乱后的结果。solution.shuffle();</code></pre><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> Solution <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>restore <span class="token operator">=</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Solution<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reset <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restore<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Solution<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shuffle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回打乱</span>        <span class="token keyword">let</span> len <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>restore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restore<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> t <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="2."></a></p><h1 id="2-最小栈"><a href="#2-最小栈" class="headerlink" title="2. 最小栈"></a>2. 最小栈</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/24/design/59/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/24/design/59/</a><br><a name="1350e94a-1"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。</li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><pre><code>MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin();   --&gt; 返回 -3.minStack.pop();minStack.top();      --&gt; 返回 0.minStack.getMin();   --&gt; 返回 -2.</code></pre><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>用两个栈来解决，一个存最小值，push的时候做些手脚就好了</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> MinStack <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    MinStack<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> min_num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min_num <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>min_num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min_num<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    MinStack<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pop <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    MinStack<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    MinStack<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getMin <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> min_num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>min_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> min_num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS零碎知识点</title>
      <link href="/2019/08/21/css-ling-sui-zhi-shi-dian/"/>
      <url>/2019/08/21/css-ling-sui-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<ul><li>四种选择器的解析速度由快到慢依次是：ID、class、tag和universal(*)，所以要少用通配符选择器</li><li>少使用后代选择器，因为也很低效，例如： html body ul li a { }</li><li><code>去除inline-block元素间的间隙</code> ：设置font-size或者letter-spacing或者word-spacing，`使用margin负值</li><li>relative 是相对于static位置调整 left, right, top, bottom 但不影响其他元素布局</li><li>absolute 相对非static的父类或祖先位置进行调整, 而且已经脱离标准文档流</li><li>fixed 是相对浏览器, 而且已经脱离标准文档流</li><li>使用 transform 时，可以让 GPU 参与运算，动画的 FPS 更高</li><li>translate不会引起浏览器的重绘和重排</li><li><br></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——动态规划</title>
      <link href="/2019/08/20/leetcode-suan-fa-chu-ji-ti-jie-dong-tai-gui-hua/"/>
      <url>/2019/08/20/leetcode-suan-fa-chu-ji-ti-jie-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<p><a name="1."></a></p><h1 id="1-爬楼梯"><a href="#1-爬楼梯" class="headerlink" title="1. 爬楼梯"></a>1. 爬楼梯</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/54/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/54/</a><br><a name="1350e94a"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><p><strong>示例 1：</strong></p><pre><code>输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1.  1 阶 + 1 阶2.  2 阶</code></pre><p><strong>示例 2：</strong></p><pre><code>输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1.  1 阶 + 1 阶 + 1 阶2.  1 阶 + 2 阶3.  2 阶 + 1 阶</code></pre><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="https://cdn.nlark.com/yuque/__latex/2e47cc0d1ede979804ab58c370556a63.svg#card=math&code=%7Bf%28n%29%3Df%28n-2%29%2Bf%28n-1%29%2C%20n%3E2%7D&height=24&width=250" alt><br>第n个阶梯由前面的走法累加而成</p><ul><li>1的时候有一种方法</li><li>2的时候有两种方法，2或者1+1</li><li>…<br><a name="oYzlm"></a><h4 id="1-迭代"><a href="#1-迭代" class="headerlink" title="1. 迭代"></a>1. 迭代</h4></li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> climbStairs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> fn <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        fn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>fn<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fn<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="wWia0"></a></p><h4 id="2-递归"><a href="#2-递归" class="headerlink" title="2. 递归"></a>2. 递归</h4><p>超过42会超时</p><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">var</span> climbStairs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Time Limit Exceeded when n >= 42</span>        <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p><a name="2."></a></p><h1 id="2-买卖股票的最佳时机"><a href="#2-买卖股票的最佳时机" class="headerlink" title="2. 买卖股票的最佳时机"></a>2. 买卖股票的最佳时机</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/55/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/55/</a><br><a name="1350e94a-1"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例 1:</strong></p><pre><code>输入: [7,1,5,3,6,4]输出: 5解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>依照当前情况做下一步判断<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566307333406-620a2e96-4f20-4e67-83eb-782e595ba8bc.png#align=left&display=inline&height=338&name=image.png&originHeight=423&originWidth=773&size=145560&status=done&width=618.4" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>prices<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> maxNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> chazhi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            chazhi<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//console.log(chazhi)</span>        len<span class="token operator">=</span>chazhi<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chazhi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>sum<span class="token operator">=</span>sum<span class="token operator">+</span>chazhi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>chazhi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> sum <span class="token operator">=</span> sum<span class="token operator">+</span>chazhi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//console.log(sum)</span>            maxNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3."></a></p><h1 id="3-最大子序和"><a href="#3-最大子序和" class="headerlink" title="3. 最大子序和"></a>3. 最大子序和</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/56/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/56/</a><br><a name="1350e94a-2"></a></p><h2 id="题目详情-2"><a href="#题目详情-2" class="headerlink" title="题目详情"></a>题目详情</h2><p>最大子序和</p><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例:</strong></p><pre><code>输入: [-2,1,-3,4,-1,2,1,-5,4],输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</code></pre><p><strong>进阶:</strong></p><p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。<br><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566308727275-e25bbd8d-0110-43e0-8e9a-f9811f620dea.png#align=left&display=inline&height=345&name=image.png&originHeight=431&originWidth=851&size=175503&status=done&width=680.8" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> maxSubArray <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>prices<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> maxNum <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> sum<span class="token operator">=</span>sum<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>sum<span class="token operator">=</span>sum<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>               <span class="token keyword">else</span> sum<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>           <span class="token punctuation">}</span><span class="token keyword">else</span> sum<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           maxNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxNum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="4."></a></p><h1 id="4-打家劫舍"><a href="#4-打家劫舍" class="headerlink" title="4. 打家劫舍"></a>4. 打家劫舍</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/57/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/23/dynamic-programming/57/</a><br><a name="1350e94a-3"></a></p><h2 id="题目详情-3"><a href="#题目详情-3" class="headerlink" title="题目详情"></a>题目详情</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>在不触动警报装置的情况下，</strong>能够偷窃到的最高金额。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3,1]输出: 4解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。     偷窃到的最高金额 = 1 + 3 = 4 。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [2,7,9,3,1]输出: 12解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</code></pre><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>典型的动态规划，要还是不要问题<br><img src="https://cdn.nlark.com/yuque/__latex/90a941821b0dc8a4b42e341c2ab84c31.svg#card=math&code=%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bl%7D%7Bf%280%29%3D%5Coperatorname%7Bnums%7D%20%5B0%5D%7D%20%5C%5C%20%7Bf%281%29%3D%5Cmax%20%28%5Coperatorname%7Bnums%7D%5B1%5D%2C%20f%280%29%5D%7D%20%5C%5C%20%7Bf%28n%29%3D%5Cmax%20%28%5Coperatorname%7Bnums%7D%5Bn%5D%2Bf%28n-2%29%2C%20f%28n-1%29%29%7D%5Cend%7Barray%7D%5Cright.&height=72&width=334" alt></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> rob <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> max_num <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fn <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>fn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>fn<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fn<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            max_num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max_num<span class="token punctuation">,</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//console.log(fn[i]);</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max_num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——排序和搜索</title>
      <link href="/2019/08/20/leetcode-suan-fa-chu-ji-ti-jie-pai-xu-he-sou-suo/"/>
      <url>/2019/08/20/leetcode-suan-fa-chu-ji-ti-jie-pai-xu-he-sou-suo/</url>
      
        <content type="html"><![CDATA[<p><a name="K1lJc"></a></p><h1 id="1-合并两个有序数组"><a href="#1-合并两个有序数组" class="headerlink" title="1. 合并两个有序数组"></a>1. 合并两个有序数组</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/8/sorting-and-searching/52/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/8/sorting-and-searching/52/</a><br><a name="n5hky"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定两个有序整数数组 <em>nums1</em> 和 <em>nums2_，将 _nums2</em> 合并到 <em>nums1</em> 中<em>，</em>使得 <em>num1</em> 成为一个有序数组。</p><p><strong>说明:</strong></p><ul><li>初始化 <em>nums1</em> 和 <em>nums2</em> 的元素数量分别为 <em>m</em> 和 <em>n</em>。</li><li>你可以假设 <em>nums1</em> 有足够的空间（空间大小大于或等于 <em>m + n_）来保存 _nums2</em> 中的元素。</li></ul><p><strong>示例:</strong></p><pre><code>输入:nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6],       n = 3输出: [1,2,2,3,5,6]</code></pre><p><a name="9Jirl"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以使用后插法就快很多了，虽然也可以直接用第三方数组来存储，但是空间大了很多</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> merge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token operator">--</span>m<span class="token punctuation">;</span>        <span class="token operator">--</span>n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记得有等号</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums1<span class="token punctuation">[</span>len<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">?</span>nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">:</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记得有等号</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums1<span class="token punctuation">[</span>len<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//console.log(nums1)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="eTzm8"></a></p><h1 id="2-第一个错误的版本"><a href="#2-第一个错误的版本" class="headerlink" title="2. 第一个错误的版本"></a>2. 第一个错误的版本</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/8/sorting-and-searching/53/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/8/sorting-and-searching/53/</a><br><a name="oHk5g"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 <code>bool isBadVersion(version)</code> 接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p><strong>示例:</strong></p><pre><code>给定 n = 5，并且 version = 4 是第一个错误的版本。调用 isBadVersion(3) -&gt; false调用 isBadVersion(5) -&gt; true调用 isBadVersion(4) -&gt; true所以，4 是第一个错误的版本。</code></pre><p><a name="UDcHC"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>isBadVersion是个function，判断第n个是不是错误版本，我们要返回第一个错误版本可以用二分来查找符合从版本，适当加入个把线性查找可以提高整体效率避免最坏情况出现。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> solution <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>isBadVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @param {integer} n Total versions         * @return {integer} The first bad version         */</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果第一个就错误就直接返回</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">let</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">;</span>            <span class="token keyword">let</span> mid<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">></span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>                <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> l<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——树</title>
      <link href="/2019/08/20/leetcode-suan-fa-chu-ji-ti-jie-shu/"/>
      <url>/2019/08/20/leetcode-suan-fa-chu-ji-ti-jie-shu/</url>
      
        <content type="html"><![CDATA[<p><a name="28369ad1"></a></p><h1 id="0-二叉树的构建"><a href="#0-二叉树的构建" class="headerlink" title="0. 二叉树的构建"></a>0. 二叉树的构建</h1><p>如果大家要在本地跑代码可以看下这里，需要先建立二叉树，可以按照先序遍历的方式，只不过遍历的时候创建树而已，树的结构：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="0155c3d5"></a></p><h2 id="层序遍历创建二叉树"><a href="#层序遍历创建二叉树" class="headerlink" title="层序遍历创建二叉树"></a>层序遍历创建二叉树</h2><p>不是用递归，用的是<code>加入队列</code>并不断判断<code>队列长度</code>来决定是否结束</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566274165467-01cf90e7-3a07-4723-8888-62e96d660148.png#align=left&display=inline&height=1014&originHeight=1014&originWidth=1115&size=0&status=done&width=1115" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** 层序方式建立树,这也是最常见的* @params {arr} arr[] 传入的数组* @return {TreeNode} node 返回根节点* */</span><span class="token keyword">function</span> <span class="token function">levelOderCreateTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> undefined <span class="token operator">||</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> node<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.log(currentNode.val,len)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">levelOderCreateTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="a7735977"></a></p><h2 id="前序遍历创建二叉树"><a href="#前序遍历创建二叉树" class="headerlink" title="前序遍历创建二叉树"></a>前序遍历创建二叉树</h2><p>采用递归的方式，<code>先传入node</code>再去根据数组赋值</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566274165708-6f2b2447-5c83-4b15-afd5-af5d06637896.png#align=left&display=inline&height=447&originHeight=447&originWidth=1413&size=0&status=done&width=1413" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**   @function {PreOderreateTree}    先序遍历方式创建二叉树,修改传入的node节点*   @params {TreeNode} node*   @params {Array} arr 传入的数组* */</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">PreOderCreateTree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> undefined <span class="token operator">||</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createTree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createTree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="ddbc6135"></a></p><h2 id="创建二叉树代码——为了本地测试"><a href="#创建二叉树代码——为了本地测试" class="headerlink" title="创建二叉树代码——为了本地测试"></a>创建二叉树代码——为了本地测试</h2><p>修改下传入数组就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">levelOderCreateTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> undefined <span class="token operator">||</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> node<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                currentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// console.log(currentNode.val,len)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">levelOderCreateTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="e3f778b4"></a></p><h1 id="1-二叉树的最大深度"><a href="#1-二叉树的最大深度" class="headerlink" title="1. 二叉树的最大深度"></a>1. 二叉树的最大深度</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/47/" target="_blank" rel="noopener">题目</a></p><p><a name="1350e94a"></a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><pre><code>3   / \  9  20    /  \   15   7</code></pre><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>找深度，最容易想到的就是直接用层序遍历，但是函数要求返回一个number</p><p>所以用不递归</p><blockquote><p>层序遍历应该写的非常熟练<br>信手拈来的感觉</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> maxDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> queue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            level <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="367aaf9e"></a></p><h1 id="2-验证二叉搜索树"><a href="#2-验证二叉搜索树" class="headerlink" title="2. 验证二叉搜索树"></a>2. 验证二叉搜索树</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/48/" target="_blank" rel="noopener">题目</a></p><p><a name="1350e94a-1"></a></p><h2 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><ul><li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li><li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><p><strong>示例 1:</strong></p><pre><code>输入:    2   / \  1   3输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入:    5   / \  1   4     / \    3   6输出: false解释: 输入为: [5,1,4,null,null,3,6]。     根节点的值为 5 ，但是其右子节点值为 4 。</code></pre><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>二叉搜索树中序遍历一定是有序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isValidBST <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>val<span class="token operator">==</span>undefined<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// left</span>            root<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>left<span class="token operator">!=</span>undefined <span class="token operator">&amp;&amp;</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// mid</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// right</span>            root<span class="token punctuation">.</span>right <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right<span class="token operator">!=</span>undefined<span class="token operator">&amp;&amp;</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(res)</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="c9e33275"></a></p><h1 id="3-对称二叉树"><a href="#3-对称二叉树" class="headerlink" title="3. 对称二叉树"></a>3. 对称二叉树</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/49/" target="_blank" rel="noopener">题目</a></p><p><a name="1350e94a-2"></a></p><h2 id="题目详情-2"><a href="#题目详情-2" class="headerlink" title="题目详情"></a>题目详情</h2><p>对称二叉树</p><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p><pre><code>1   / \  2   2 / \ / \3  4 4  3</code></pre><p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p><pre><code>1   / \  2   2   \   \   3    3</code></pre><p><strong>说明:</strong></p><p>如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p><p><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566274426403-84e100c9-f2c1-468e-93bf-60b9eda64732.png#align=left&display=inline&height=289&name=image.png&originHeight=445&originWidth=626&size=166949&status=done&width=407" alt="image.png"><br><a name="T8wJr"></a></p><h4 id="1-递归"><a href="#1-递归" class="headerlink" title="1. 递归"></a>1. 递归</h4><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> isSymmetric <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> Symmetric <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一方面为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 一方面为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左右为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 值不相等</span>            <span class="token keyword">return</span> <span class="token function">Symmetric</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Symmetric</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按照图中画的来比较</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">Symmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="8mjsM"></a></p><h4 id="2-迭代"><a href="#2-迭代" class="headerlink" title="2. 迭代"></a>2. 迭代</h4><p>用一个栈来保存，模拟层序遍历</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> isSymmetric <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> left <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>val <span class="token operator">!=</span> left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f7ef8f43"></a></p><h1 id="4-二叉树的层次遍历"><a href="#4-二叉树的层次遍历" class="headerlink" title="4. 二叉树的层次遍历"></a>4. 二叉树的层次遍历</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/50/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/50/</a></p><p><a name="1350e94a-3"></a></p><h2 id="题目详情-3"><a href="#题目详情-3" class="headerlink" title="题目详情"></a>题目详情</h2><p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。<br>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token number">3</span>   <span class="token operator">/</span> \  <span class="token number">9</span>  <span class="token number">20</span>    <span class="token operator">/</span>  \   <span class="token number">15</span>   <span class="token number">7</span></code></pre><p>返回其层次遍历结果：</p><pre><code>[  [3],  [9,20],  [15,7]]</code></pre><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p><a name="iv47w"></a></p><h4 id="1-非递归写法"><a href="#1-非递归写法" class="headerlink" title="1. 非递归写法"></a>1. 非递归写法</h4><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> levelOrder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token operator">!=</span>undefined<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token operator">!=</span>undefined<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="bKzrI"></a></p><h4 id="2-递归写法"><a href="#2-递归写法" class="headerlink" title="2.递归写法"></a>2.递归写法</h4><p>怎么写递归呢，很多时候是把while循环里面的给解开成为递归，我们发现是要递归遍历每一层，那么每一层还是可以通过刚刚的非递归的方式来实现<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566284882711-7f3dba70-59af-4064-9238-7b4ce1a306de.png#align=left&display=inline&height=327&name=image.png&originHeight=409&originWidth=882&size=313747&status=done&width=705.6" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> levelOrder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">recircle</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token operator">!=</span>undefined<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token operator">!=</span>undefined<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>            <span class="token function">recircle</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">recircle</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="0ba864b3"></a></p><h1 id="5-将所有有序数组转换为二叉树"><a href="#5-将所有有序数组转换为二叉树" class="headerlink" title="5. 将所有有序数组转换为二叉树"></a>5. 将所有有序数组转换为二叉树</h1><p><a name="1350e94a-4"></a></p><h2 id="题目详情-4"><a href="#题目详情-4" class="headerlink" title="题目详情"></a>题目详情</h2><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/51/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/7/trees/51/</a><br>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1。</p><p><strong>示例:</strong></p><pre><code>给定有序数组: [-10,-3,0,5,9],一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：      0     / \   -3   9   /   / -10  5</code></pre><p><a name="4161afd7-4"></a></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>其实就二分建立树</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> sortedArrayToBST <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>             <span class="token keyword">let</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">></span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是除法就要转为整数</span>            <span class="token comment" spellcheck="true">//console.log(right,left,nums[mid],mid)</span>            <span class="token keyword">let</span> _node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> _node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里都是length-1，如果用slice处理就是直接length</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣题解——351-400</title>
      <link href="/2019/08/20/li-kou-ti-jie-351-400/"/>
      <url>/2019/08/20/li-kou-ti-jie-351-400/</url>
      
        <content type="html"><![CDATA[<p><a name="7038bceb"></a></p><h2 id="351-安卓系统手势解锁"><a href="#351-安卓系统手势解锁" class="headerlink" title="351 安卓系统手势解锁"></a>351 安卓系统手势解锁</h2><p>中等</p><p><a name="eb55929e"></a></p><h2 id="352-将数据流变为多个不相交区间"><a href="#352-将数据流变为多个不相交区间" class="headerlink" title="352 将数据流变为多个不相交区间"></a>352 将数据流变为多个不相交区间</h2><p>困难</p><p><a name="790df407"></a></p><h2 id="353-贪吃蛇"><a href="#353-贪吃蛇" class="headerlink" title="353 贪吃蛇"></a>353 贪吃蛇</h2><p>中等</p><p><a name="27a95bdb"></a></p><h2 id="354-俄罗斯套娃信封问题"><a href="#354-俄罗斯套娃信封问题" class="headerlink" title="354 俄罗斯套娃信封问题"></a>354 俄罗斯套娃信封问题</h2><p>困难</p><p><a name="d18d6700"></a></p><h2 id="355-设计推特"><a href="#355-设计推特" class="headerlink" title="355 设计推特"></a>355 设计推特</h2><p>中等</p><p><a name="ae56dfab"></a></p><h2 id="356-直线镜像"><a href="#356-直线镜像" class="headerlink" title="356 直线镜像"></a>356 直线镜像</h2><p>中等</p><p><a name="dd85e244"></a></p><h2 id="357-计算各个位数不同的数字个数"><a href="#357-计算各个位数不同的数字个数" class="headerlink" title="357 计算各个位数不同的数字个数"></a>357 计算各个位数不同的数字个数</h2><p>中等</p><p><a name="269330de"></a></p><h2 id="358-K-距离间隔重排字符串"><a href="#358-K-距离间隔重排字符串" class="headerlink" title="358 K 距离间隔重排字符串"></a>358 K 距离间隔重排字符串</h2><p>困难</p><p><a name="e172912f"></a></p><h2 id="359-日志速率限制器"><a href="#359-日志速率限制器" class="headerlink" title="359 日志速率限制器"></a>359 日志速率限制器</h2><p>简单</p><p><a name="4ef5bba7"></a></p><h2 id="360-有序转化数组"><a href="#360-有序转化数组" class="headerlink" title="360 有序转化数组"></a>360 有序转化数组</h2><p>中等</p><p><a name="9a4d6916"></a></p><h2 id="361-轰炸敌人"><a href="#361-轰炸敌人" class="headerlink" title="361 轰炸敌人"></a>361 轰炸敌人</h2><p>中等</p><p><a name="7e7fd5e2"></a></p><h2 id="362-敲击计数器"><a href="#362-敲击计数器" class="headerlink" title="362 敲击计数器"></a>362 敲击计数器</h2><p>中等</p><p><a name="2122a242"></a></p><h2 id="363-矩形区域不超过-K-的最大数值和"><a href="#363-矩形区域不超过-K-的最大数值和" class="headerlink" title="363 矩形区域不超过 K 的最大数值和"></a>363 矩形区域不超过 K 的最大数值和</h2><p>困难</p><p><a name="787c9de1"></a></p><h2 id="364-加权嵌套序列和-II"><a href="#364-加权嵌套序列和-II" class="headerlink" title="364 加权嵌套序列和 II"></a>364 加权嵌套序列和 II</h2><p>中等</p><p><a name="6819d8db"></a></p><h2 id="365-水壶问题"><a href="#365-水壶问题" class="headerlink" title="365 水壶问题"></a>365 水壶问题</h2><p>中等</p><p><a name="1c80c251"></a></p><h2 id="366-寻找完全二叉树的叶子节点"><a href="#366-寻找完全二叉树的叶子节点" class="headerlink" title="366 寻找完全二叉树的叶子节点"></a>366 寻找完全二叉树的叶子节点</h2><p>中等</p><p><a name="2b86544d"></a></p><h2 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367 有效的完全平方数"></a>367 有效的完全平方数</h2><p>简单</p><p><a name="4b1a5a14"></a></p><h2 id="368-最大整除子集"><a href="#368-最大整除子集" class="headerlink" title="368 最大整除子集"></a>368 最大整除子集</h2><p>中等</p><p><a name="143510f8"></a></p><h2 id="369-给单链表加一"><a href="#369-给单链表加一" class="headerlink" title="369 给单链表加一"></a>369 给单链表加一</h2><p>中等</p><p><a name="ac9c866a"></a></p><h2 id="370-区间加法"><a href="#370-区间加法" class="headerlink" title="370 区间加法"></a>370 区间加法</h2><p>中等</p><p><a name="5ca5a14e"></a></p><h2 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371 两整数之和"></a>371 两整数之和</h2><p>简单</p><p><a name="025ea6d9"></a></p><h2 id="372-超级次方"><a href="#372-超级次方" class="headerlink" title="372 超级次方"></a>372 超级次方</h2><p>中等</p><p><a name="17dccf5d"></a></p><h2 id="373-查找和最小的K对数字"><a href="#373-查找和最小的K对数字" class="headerlink" title="373 查找和最小的K对数字"></a>373 查找和最小的K对数字</h2><p>中等</p><p><a name="035b7492"></a></p><h2 id="374-猜数字大小"><a href="#374-猜数字大小" class="headerlink" title="374 猜数字大小"></a>374 猜数字大小</h2><p>简单</p><p><a name="b5d8d2ab"></a></p><h2 id="375-猜数字大小-II"><a href="#375-猜数字大小-II" class="headerlink" title="375 猜数字大小 II"></a>375 猜数字大小 II</h2><p>中等</p><p><a name="7463a4fd"></a></p><h2 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376 摆动序列"></a>376 摆动序列</h2><p>中等</p><p><a name="05bbce69"></a></p><h2 id="377-组合总和-Ⅳ"><a href="#377-组合总和-Ⅳ" class="headerlink" title="377 组合总和 Ⅳ"></a>377 组合总和 Ⅳ</h2><p>中等</p><p><a name="1bfe8068"></a></p><h2 id="378-有序矩阵中第K小的元素"><a href="#378-有序矩阵中第K小的元素" class="headerlink" title="378 有序矩阵中第K小的元素"></a>378 有序矩阵中第K小的元素</h2><p>中等</p><p><a name="a0fd730c"></a></p><h2 id="379-电话目录管理系统"><a href="#379-电话目录管理系统" class="headerlink" title="379 电话目录管理系统"></a>379 电话目录管理系统</h2><p>中等</p><p><a name="61bb0cce"></a></p><h2 id="380-常数时间插入、删除和获取随机元素"><a href="#380-常数时间插入、删除和获取随机元素" class="headerlink" title="380 常数时间插入、删除和获取随机元素"></a>380 常数时间插入、删除和获取随机元素</h2><p>中等</p><p><a name="880f18e0"></a></p><h2 id="381-O-1-时间插入、删除和获取随机元素-允许重复"><a href="#381-O-1-时间插入、删除和获取随机元素-允许重复" class="headerlink" title="381 O(1) 时间插入、删除和获取随机元素 - 允许重复"></a>381 O(1) 时间插入、删除和获取随机元素 - 允许重复</h2><p>困难</p><p><a name="1e17277e"></a></p><h2 id="382-链表随机节点"><a href="#382-链表随机节点" class="headerlink" title="382 链表随机节点"></a>382 链表随机节点</h2><p>中等</p><p><a name="379eab6b"></a></p><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383 赎金信"></a>383 赎金信</h2><p>简单</p><p><a name="473e3355"></a></p><h2 id="384-打乱数组"><a href="#384-打乱数组" class="headerlink" title="384 打乱数组"></a>384 打乱数组</h2><p>中等</p><p><a name="09c121fd"></a></p><h2 id="385-迷你语法分析器"><a href="#385-迷你语法分析器" class="headerlink" title="385 迷你语法分析器"></a>385 迷你语法分析器</h2><p>中等</p><p><a name="16c1919b"></a></p><h2 id="386-字典序排数"><a href="#386-字典序排数" class="headerlink" title="386 字典序排数"></a>386 字典序排数</h2><p>中等</p><p><a name="6bde22bf"></a></p><h2 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387 字符串中的第一个唯一字符"></a>387 字符串中的第一个唯一字符</h2><p>简单</p><p><a name="d36a4900"></a></p><h2 id="388-文件的最长绝对路径"><a href="#388-文件的最长绝对路径" class="headerlink" title="388 文件的最长绝对路径"></a>388 文件的最长绝对路径</h2><p>中等</p><p><a name="32f85117"></a></p><h2 id="389-找不同"><a href="#389-找不同" class="headerlink" title="389 找不同"></a>389 找不同</h2><p>简单</p><p><a name="61aa7632"></a></p><h2 id="390-消除游戏"><a href="#390-消除游戏" class="headerlink" title="390 消除游戏"></a>390 消除游戏</h2><p>中等</p><p><a name="7ffa1706"></a></p><h2 id="391-完美矩形"><a href="#391-完美矩形" class="headerlink" title="391 完美矩形"></a>391 完美矩形</h2><p>困难</p><p><a name="62b58519"></a></p><h2 id="392-判断子序列"><a href="#392-判断子序列" class="headerlink" title="392 判断子序列"></a>392 判断子序列</h2><p>中等</p><p><a name="e978fe77"></a></p><h2 id="393-UTF-8-编码验证"><a href="#393-UTF-8-编码验证" class="headerlink" title="393 UTF-8 编码验证"></a>393 UTF-8 编码验证</h2><p>中等</p><p><a name="fd0c2c5b"></a></p><h2 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394 字符串解码"></a>394 字符串解码</h2><p><code>中等</code></p><ul><li>先用正则匹配到所有符合情况的字符串, 返回数组</li><li>对这些数组进行解析然后替换原来的位置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> decodeString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+\[\w+\]/g</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> rep <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="cfd2fbe8"></a></p><h2 id="395-至少有K个重复字符的最长子串"><a href="#395-至少有K个重复字符的最长子串" class="headerlink" title="395 至少有K个重复字符的最长子串"></a>395 至少有K个重复字符的最长子串</h2><p>中等</p><p><a name="de25c93d"></a></p><h2 id="396-旋转函数"><a href="#396-旋转函数" class="headerlink" title="396 旋转函数"></a>396 旋转函数</h2><p>中等</p><p><a name="00966a41"></a></p><h2 id="397-整数替换"><a href="#397-整数替换" class="headerlink" title="397 整数替换"></a>397 整数替换</h2><p>中等</p><p><a name="7486911a"></a></p><h2 id="398-随机数索引"><a href="#398-随机数索引" class="headerlink" title="398 随机数索引"></a>398 随机数索引</h2><p>中等</p><p><a name="8ba008b2"></a></p><h2 id="399-除法求值"><a href="#399-除法求值" class="headerlink" title="399 除法求值"></a>399 除法求值</h2><p>中等</p><p><a name="8ffd6555"></a></p><h2 id="400-第N个数字"><a href="#400-第N个数字" class="headerlink" title="400 第N个数字"></a>400 第N个数字</h2><p>简单</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法做题要点</title>
      <link href="/2019/08/20/suan-fa-zuo-ti-yao-dian/"/>
      <url>/2019/08/20/suan-fa-zuo-ti-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="qGNhr"></a></p><h1 id="第一章-技巧部分"><a href="#第一章-技巧部分" class="headerlink" title="第一章    技巧部分"></a>第一章    技巧部分</h1><p><a name="bm7gG"></a></p><h3 id="先审题想思路，写好伪代码再直接敲"><a href="#先审题想思路，写好伪代码再直接敲" class="headerlink" title="先审题想思路，写好伪代码再直接敲"></a>先审题想思路，写好伪代码再直接敲</h3><p>很关键，写代码的时候边写边敲除非是先写算法框架，不然的话很费时间，思路要先定下来<br>千万不要审题失误！！！<br>一步错，步步错！！<br>然后就是多画图，画图能解决很多重复计算的问题<br>多举例，举例可以解决找规律的问题<br>概率题可以用画圈圈看交并集</p><p><a name="JhOyJ"></a></p><h3 id="能用正则就用正则"><a href="#能用正则就用正则" class="headerlink" title="能用正则就用正则"></a>能用正则就用正则</h3><p>字符串的题目能用正则就用正则, 会快很多也很好做，比如:</p><pre class=" language-javascript"><code class="language-javascript">s <span class="token operator">=</span> <span class="token string">"3[a2[c]]"</span><span class="token punctuation">,</span> 返回 <span class="token string">"accaccacc"</span><span class="token punctuation">.</span></code></pre><p>这种完全就可以用正则来匹配，速度上快很多</p><ul><li>正则中：exec，test</li><li>字符串中：search，match，replace，split</li></ul><p><a name="56HNf"></a></p><h3 id="数据不符合、超时、爆栈"><a href="#数据不符合、超时、爆栈" class="headerlink" title="数据不符合、超时、爆栈"></a>数据不符合、超时、爆栈</h3><p>数据不符合需要先进行边界判断<br>超时可以优化，一般很少题目会有时间复杂度O(n^3)的，用动态规划，空间换时间，优化排序算法来解决<br>ps：如果空间没有什么要求，尽管直接用空间换时间，快非常多！！<br>爆栈的一般是递归冗余问题，用迭代代替递归，或者剪枝算法，动态规划来代替贪心</p><p><a name="wQ8Mr"></a></p><h4 id="递归转迭代"><a href="#递归转迭代" class="headerlink" title="递归转迭代"></a>递归转迭代</h4><p>可以把递归出口转为while的出口<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566287402767-2fd5c2d9-54d2-40a8-92bd-ae941440161e.png#align=left&display=inline&height=299&name=image.png&originHeight=415&originWidth=731&size=235456&status=done&width=527" alt="image.png"><br><a name="ohSuz"></a></p><h4 id="数组部分"><a href="#数组部分" class="headerlink" title="数组部分"></a>数组部分</h4><p>可以考虑双指针<br>从后面遍历到前面<br><a name="MlnaT"></a></p><h3 id="动态规划做法"><a href="#动态规划做法" class="headerlink" title="动态规划做法"></a>动态规划做法</h3><p>动态规划通常是求公式，和当前节点要还是不要的选择，选择上就两种！！！要还是不要！！！<br>这样解题快很多</p><p><a name="dBZFs"></a></p><h3 id="其他技巧部分"><a href="#其他技巧部分" class="headerlink" title="其他技巧部分"></a>其他技巧部分</h3><p>大数规模的找组合问题就是明示用回溯来解决<br></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 判断是不是整数</span><span class="token keyword">let</span> cat <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span> <span class="token operator">==</span> cat</code></pre><p><a name="7Tqjq"></a></p><h1 id="第二章-注意事项"><a href="#第二章-注意事项" class="headerlink" title="第二章    注意事项"></a>第二章    注意事项</h1><p>mod: 10^9+7 (1000000007)    JS整数范围为：-2^53  ——  2^53   (包含边界)<br>mod的加法性质： 最后取模等效于步步取模<code>(A + B) mod M = (A mod M + B mod M) mod M</code><br>如果直觉判断过程中就会溢出就要进行取模mod<a href="https://www.geeksforgeeks.org/modulo-1097-1000000007/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/modulo-1097-1000000007/</a><br>因为两个数字相加也是小于maxInt的，虽然js没有maxint，过程中取模和结果取模结果上看是一样的，还避免了溢出<br></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1,000,000,007</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2,147,483,647</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue升级webpack版本到webpack4</title>
      <link href="/2019/08/20/vue-sheng-ji-webpack-ban-ben-dao-webpack4/"/>
      <url>/2019/08/20/vue-sheng-ji-webpack-ban-ben-dao-webpack4/</url>
      
        <content type="html"><![CDATA[<p>用vue来实验下, 目的是把webpack3升级至^4.0</p><p>更新思路是</p><ol><li>先更新</li><li>看是否废弃掉了</li></ol><pre><code>yarn global add @vue/cli-init vue init webpack hello_vue</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270477696-e5bb5fcb-0338-4247-8d8b-58b125da36b4.png#align=left&display=inline&height=310&originHeight=310&originWidth=1217&size=0&status=done&width=1217" alt></p><pre><code>cd hello_vue npm start</code></pre><p>需要先验证工程是正确的, 可以运行后去看下webpack版本</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476315-ad332bb9-9818-4ae6-bbef-a5e96687453a.png#align=left&display=inline&height=426&originHeight=426&originWidth=673&size=0&status=done&width=673" alt></p><p>发现是3.6</p><pre><code>npm install webpack@latest -Dnpm install webpack-dev-server@latest -Dnpm i webpack-cli@latest -Dnpm i html-webpack-plugin@latest -Dnpm i eslint-loader@latest -Dnpm i vue-loader@latest -Dnpm i css-loader@latest -Dnpm i postcss-loader@latest -Dnpm start</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476347-684c63c7-9ebf-4379-992b-8453749354e9.png#align=left&display=inline&height=390&originHeight=390&originWidth=709&size=0&status=done&width=709" alt></p><p>根据npm start 报错来修改升级</p><p>然后发现</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476458-c64269d0-ecae-4397-bfc2-7bd9db823f7d.png#align=left&display=inline&height=562&originHeight=562&originWidth=2988&size=0&status=done&width=2988" alt></p><p>再去写入配置文件</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270482713-2197cb07-226f-413b-8cfe-0f7204008032.png#align=left&display=inline&height=1098&originHeight=1098&originWidth=1848&size=0&status=done&width=1848" alt></p><p>配置和完成后就ok了</p><p>再去配置mode</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270477302-237a8343-d8f1-4955-b983-5c6d7140da7d.png#align=left&display=inline&height=472&originHeight=472&originWidth=1432&size=0&status=done&width=1432" alt></p><pre><code>npm run build</code></pre><p>打包看下有没有错</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476525-865e4b4b-90e9-4239-a451-63dd2564076f.png#align=left&display=inline&height=230&originHeight=230&originWidth=3108&size=0&status=done&width=3108" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476448-e8e6c66e-075c-4ff3-9d5d-981a237f3d83.png#align=left&display=inline&height=494&originHeight=494&originWidth=1756&size=0&status=done&width=1756" alt></p><p>去官方文档把对应的代码加到配置和pro中去</p><pre class=" language-javascript"><code class="language-javascript">optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>          splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>               chunks<span class="token punctuation">:</span> <span class="token string">'async'</span><span class="token punctuation">,</span>               minSize<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>               maxSize<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>               minChunks<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>               maxAsyncRequests<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>               maxInitialRequests<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>               automaticNameDelimiter<span class="token punctuation">:</span> <span class="token string">'~'</span><span class="token punctuation">,</span>               automaticNameMaxLength<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>               name<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    vendors<span class="token punctuation">:</span> <span class="token punctuation">{</span>                         test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]/</span><span class="token punctuation">,</span>                         priority<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                         minChunks<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                         priority<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>                         reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>               <span class="token punctuation">}</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476966-9ce1695a-a4e5-4341-971d-cdf2ebbe815c.png#align=left&display=inline&height=778&originHeight=778&originWidth=2124&size=0&status=done&width=2124" alt></p><p>注意有三个地方都要注释掉</p><p>然后发现报错:</p><p>Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead</p><pre><code>npm install extract-text-webpack-plugin@next -D</code></pre><p>next代表还没正式发布的版本, 是在latest之后的</p><p>然后就是报错</p><p>Error: Path variable [contenthash] not implemented in this context: static/css/[name].[contenthash].css</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476443-ddc95f3c-cec0-40bb-99b1-af11b736238d.png#align=left&display=inline&height=936&originHeight=936&originWidth=2022&size=0&status=done&width=2022" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270476620-5cf82482-8fed-4842-b596-39bf5ad27a17.png#align=left&display=inline&height=624&originHeight=624&originWidth=3138&size=0&status=done&width=3138" alt></p><p>这样就正式更新至webpack4完成</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React小知识点</title>
      <link href="/2019/08/20/react-xiao-zhi-shi-dian/"/>
      <url>/2019/08/20/react-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="4d420778"></a></p><h3 id="什么是JSX"><a href="#什么是JSX" class="headerlink" title="什么是JSX"></a>什么是JSX</h3><p>JSX叫做JavaScript eXtension</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270276688-18f38e03-edae-4129-a207-03492f1310e3.png#align=left&display=inline&height=628&originHeight=628&originWidth=749&size=0&status=done&width=749" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React基础知识点</title>
      <link href="/2019/08/20/react-ji-chu-zhi-shi-dian/"/>
      <url>/2019/08/20/react-ji-chu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="c904bf94"></a></p><h1 id="介绍下react"><a href="#介绍下react" class="headerlink" title="介绍下react"></a>介绍下react</h1><p>React 是一个用于构建用户界面的 JAVASCRIPT 库。React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）<br>React特点有：<br>1.<code>声明式设计</code> −React采用声明范式，可以轻松描述应用。<br>2.<code>高效</code> −React通过对DOM的模拟，最大限度地减少与DOM的交互。<br>3.<code>灵活</code> −React可以与已知的库或框架很好地配合。<br>4.<code>JSX</code>− JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。<br>5.<code>组件</code> − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。<br>6.<code>单向响应的数据流</code> − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</p><blockquote><p>单向数据流<br><code>在React中，数据是单向流动的，是从上向下的方向，即从父组件到子组件的方向。</code><br><code>state和props是其中重要的概念</code>，如果顶层组件初始化props，那么React会向下遍历整颗组件树，重新渲染相关的子组件。其中state表示的是每个组件中内部的的状态，这些状态只在组件内部改变。<br>把组件看成是一个函数，那么他接受props作为参数，内部由state作为函数的内部参数，返回一个虚拟dom的实现。**</p></blockquote><p><a name="06d37c0d"></a></p><h1 id="react和Vue的原理，区别，亮点，作用"><a href="#react和Vue的原理，区别，亮点，作用" class="headerlink" title="react和Vue的原理，区别，亮点，作用"></a>react和Vue的原理，区别，亮点，作用</h1><p>参考:  <a href="https://funteas.com/topic/594c8531842666e9759ad21d" target="_blank" rel="noopener">https://funteas.com/topic/594c8531842666e9759ad21d</a></p><p>我曾经看过vue作者<code>尤雨溪的一个专访</code>他说过这样一段话(大概内容)：做框架的时候我们也很纠结，到底是定制内容少一点好还是定制内容多一点好。定制少了，很多人不知道一些情况应该怎么处理，所以他就乱来，写的代码乱七八糟，性能也不好，然后他就会认为你的框架没做好，有的人还去网上喷你。但是当大家经验越来越丰富，反而希望受到框架的限制越少越好。因为随着经验的增加，大家都知道了各种场景下应该怎么处理，优化自己的代码。限制越少，自我发挥的空间就越大。</p><p>vue的选择居于react与angular之间，<code>框架自身的语法比react多一点，但是又比angular少一点。</code>react的简单在于，它的<code>核心API其实非常少。</code>所以我们会看到很多地方在说<code>react其实是一个UI库，并不是一个完整的框架。</code>他只是告诉我们如何创建组件以及组件之间如何进行数据传递。<code>甚至于创建组件的方式正是使用ES6的class语法(createClass将会在react 16被丢弃)。</code>因此开发中<code>react的使用对于ES6的语法依赖非常高</code>。因为<code>react自身本来就没有多少强限制的语法。</code></p><p>我们只需要掌握组件里的<code>props，state，ref，生命周期</code>，就好像没有过多额外的知识了。<code>就连如果想要在jsx模板来遍历渲染，还得使用原生的map方法。</code>而react的高阶组件，理解之后发现，其实就是JavaScript函数式编程中所涉及到的思维方式。所以在我看来，</p><blockquote><p><code>react的最大特点就是简单并且与原生JavaScript非常接近</code>。<code>即给开发者带来的束缚非常少</code>。<code>一个功能的实现，如果你知道使用原生JavaScript如何实现，那么你就一定能够很轻松的知道使用react如何实现。</code>当然，核心API简单并不代表上手容易。在使用之初，如果你经验缺乏，那么你用react写出来的页面，性能可能会非常差。因为无意识的，你的组件可能会有非常多的多余的渲染。</p></blockquote><p>比如很多人在学习react的时候，会接触到<code>一个倒计时的例子</code>，这个例子使用修改组件中state的方式来实现。但是其实后来大家会慢慢知道，这种方式是非常错误的。<code>因为state的每次修改</code>，<code>都会导致组件及其所有子组件的重新渲染。这是成本非常高的行为。</code>当然，我还知道很多人，在调试react的时候，由于高频的重复渲染直接把浏览器都卡死的。这些问题都是尤雨溪所担心的限制过少带来的。</p><blockquote><p>而<code>react由于没有真正意义上的双向绑定。因此在处理一些复杂场景会非常麻烦，比如复杂的表单验证。</code></p></blockquote><p>而相对而言，vue提供的能力则更多一点，这些便捷的能力会让初学者感觉到非常的幸福，因为很多效果只需要一些简单的代码既可以实现。我大概列举几条我个人认为非常棒的能力：</p><p><code>统一管理的计算属性</code></p><p>JavaScript的表达式非常便利，无论是vue还是react，表达式的能力是必不可少的。但正如vue官方文档所说，在模板中放入太多的逻辑会让模板过重且难以维护。<code>而vue的组件中提供了一个计算属性来统一管理表达式。</code><br>class的动态语法让我感觉非常爽<br>在实践中我们会发现非常多这样的场景，<code>需要根据不同的状态来决定一个元素class的具体值。</code>而如果仅仅只是简单的表达式或者条件判断在jsx模板中，例如下面这个样子就会让人感觉非常难受</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span>{active</span> <span class="token attr-name">?</span> <span class="token attr-name">'note</span> <span class="token attr-name">active'</span> <span class="token attr-name">:</span> <span class="token attr-name">'note'}</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>当稍微复杂一点的逻辑还这样处理就是难受到忍不了了。而vue中支持的语法则非常轻松的搞定了这个问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可以放在任何你觉得舒服的位置</span><span class="token keyword">const</span> pcls <span class="token operator">=</span> <span class="token punctuation">{</span>active<span class="token punctuation">:</span> active<span class="token punctuation">,</span>note<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>pcls<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>这样我们继续添加更多的class名也不会造成额外的复杂度了。<br>当然，这仅仅只是一个工具方法就能搞定的问题，在使用react时，大家可以借助classnames来完成同样的功能。但vue是直接支持了。<br><code>双向绑定</code><br>由于react并不支持双向绑定，<code>因此在复杂的表单验证时实现起来非常痛苦</code>。<code>而vue在以单向数据流为核心的同时，又没有完全抛弃双向绑定，这让在这样复杂的表单验证场景开发效率比react高出非常多。</code>这也是vue省事儿的一个方面。</p><blockquote><p>修饰符<br>我们在写事件处理逻辑时，<code>常常需要e.preventDefault</code>等操作。vue提供的修饰符功能可以帮助我们省去这些代码，极为方便。用多了就会发现，真TM好用。</p></blockquote><p><a name="42d7865a"></a></p><h1 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h1><p>当然是使用的diff算法，diff算法有三种优化形式：<br><code>tree diff：</code>将新旧两颗DOM树按照层级遍历，<code>只对同级的DOM节点进行比较</code>，即同一父节点下的所有子节点，当发现节点已经不存在，则该节点及其子节点会被完全删除，不会进一步比较<br><code>component diff：</code>不同组件之间的对比，如果<code>组件类型相同</code>，暂不更新，否则删除旧的组件，再创建一个新的组件，插入到删除组件的位置<br><code>element diff:</code> 在<code>类型相同的组件内</code>，<code>再继续对比组件内部的元素</code></p><p><a name="9bf70180"></a></p><h1 id="react的生命周期"><a href="#react的生命周期" class="headerlink" title="react的生命周期"></a>react的生命周期</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566270238506-71dfbbce-c623-4927-9be4-4a2dc55c0959.jpeg#align=left&display=inline&height=312&originHeight=312&originWidth=554&size=0&status=done&width=554" alt><br><code>初始化阶段：</code></p><ol><li>getDefaultProps获取实例的默认属性</li><li>getInitialState获取每个实例的初始化状态</li><li>ComponentWillMount：组件将被装载，渲染到页面上</li><li>render：组件在这里生成虚拟的DOM节点</li><li>ComponentDidMount:组件真正被装载之后<br><br><code>运行中状态：</code></li><li>componentWillReceiveProps:组件将要接收到属性的时候调用</li><li>shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）<code>shouldComponentUpdate(nextProps, nextState) 是其中非常非常重要的一环, 这个方法用来判断是否需要调用 render 方法重新描绘 dom</code>。<code>因为 dom 的描绘非常消耗性能</code>，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。</li><li>componentWillUpdate:组件即将更新不能修改属性和状态</li><li>render:组件重新描绘 componentDidUpdate:组件已经更新 销毁阶段：</li><li>componentWillUnmount:组件即将销毁</li></ol><p><a name="47044208"></a></p><h1 id="组件之间的通信"><a href="#组件之间的通信" class="headerlink" title="组件之间的通信"></a>组件之间的通信</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue小知识点</title>
      <link href="/2019/08/20/vue-xiao-zhi-shi-dian/"/>
      <url>/2019/08/20/vue-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="dbb15160"></a></p><h3 id="vue路由的钩子函数"><a href="#vue路由的钩子函数" class="headerlink" title="vue路由的钩子函数"></a>vue路由的钩子函数</h3><p>首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。<code>例如用户跳转的网页先判断登录没</code>没有登录就跳转到登录页面</p><p>beforeEach主要有3个参数<code>to，from，next：</code></p><p>to：route即将进入的目标路由对象，</p><p>from：route当前导航正要离开的路由</p><p>next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转</p><p><a name="445a2389"></a></p><h3 id="什么是mvvm"><a href="#什么是mvvm" class="headerlink" title="什么是mvvm"></a>什么是mvvm</h3><p>MVVM 是 Model-View-ViewModel 的缩写。<br><code>Model</code>代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。<br><code>View</code>代表UI 组件，它负责将数据模型转化成UI 展现出来。<br><code>ViewModel</code> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566270180192-6dbec004-dbef-4f76-a9ca-d707f2ea3e86.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=1597&size=0&status=done&width=1597" alt><br>在MVVM架构下，<code>View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互</code>，Model和 ViewModel之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。<br>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而<code>View 和 Model 之间的同步工作完全是自动的，无需人为干涉</code>，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p><p><a name="52502120"></a></p><h3 id="你知道什么是spa、seo与ssr"><a href="#你知道什么是spa、seo与ssr" class="headerlink" title="你知道什么是spa、seo与ssr"></a>你知道什么是spa、seo与ssr</h3><p><code>spa</code>全称是 <strong>single page application</strong><br>在传统的网站中，不同的页面之间的切换都是直接从服务器加载一整个新的页面，而在SPA这个模型中，是通过动态地重写页面的部分与用户交互，而避免了过多的数据交换，响应速度自然相对更高。</p><p>常见的spa框架有: angular react vue</p><p>基本上前面所说的前后端分离的优点它都有，另外还有以下的一些<code>优点</code></p><ul><li>页面之间的切换非常快</li><li>一定程度上减少了后端服务器的压力（不用管页面逻辑和渲染）</li><li>后端程序只需要提供API，完全不用管客户端到底是Web界面还是手机等</li></ul><p><code>SPA的缺点</code></p><ul><li>首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后再渲染页面。</li><li>不利于SEO</li></ul><hr><p><code>seo</code>搜索引擎优化: 之前对于SEO的了解不多，也是最近才对SEO有了一些基本的了解。<strong>SEO</strong>（<strong>Search Engine Optimization</strong>），中文一般译作：搜索引擎优化。SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。</p><p>但是一般的seo不支持ajax异步请求爬取</p><hr><p>但是由于sap应用不利于seo所以ssr出现</p><p><code>**SSR**是</code>的缩写，在普通的SPA中，一般是将框架及网站页面代码发送到浏览器，然后在浏览器中生成和操作DOM（这里也是第一次访问SPA网站在同等带宽及网络延迟下比传统的在后端生成HTML发送到浏览器要更慢的主要原因），但其实也可以将SPA应用打包到服务器上，在服务器上渲染出HTML，发送到浏览器，这样的HTML页面还不具备交互能力，所以还需要与SPA框架配合，在浏览器上“混合”成可交互的应用程序。</p><p>所以，只要能合理地运用SSR技术，不仅能一定程度上解决首屏慢的问题，还能获得更好的SEO。</p><p>常用的ssr框架有: react的next, vue的nuxt</p><p><code>SSR的优点</code></p><ul><li>更快的响应时间，不用等待所有的JS都下载完成，浏览器便能显示比较完整的页面了。</li><li>更好的SSR，我们可以将SEO的关键信息直接在后台就渲染成HTML，而保证搜索引擎的爬虫都能爬取到关键数据。</li></ul><p><code>SSR的缺点</code></p><ul><li>相对于仅仅需要提供静态文件的服务器，SSR中使用的渲染程序自然会占用更多的CPU和内存资源</li><li>一些常用的浏览器API可能无法正常使用，比如<code>window</code>、<code>docment</code>和<code>alert</code>等，如果使用的话需要对运行的环境加以判断</li><li>开发调试会有一些麻烦，因为涉及了浏览器及服务器，对于SPA的一些组件的生命周期的管理会变得复杂</li><li>可能会由于某些因素导致服务器端渲染的结果与浏览器端的结果不一致。</li></ul><hr><p>前后端分离降低了前端和后端的耦合度，提高了开发效率；</p><p>SPA是前后端分离中前端的一种解决方案；</p><p>SEO对与很多网站很重要而普通的SPA又不利于SEO；</p><p>SSR的出现一定程度上解决了SPA中首屏慢的问题，又极大减少了普通SPA对于SEO的不利影响。</p><p><a name="32a81e12"></a></p><h3 id="vue为什么要求组件模板只能有一个根元素"><a href="#vue为什么要求组件模板只能有一个根元素" class="headerlink" title="vue为什么要求组件模板只能有一个根元素"></a>vue为什么要求组件模板只能有一个根元素</h3><p>一句话概述:<code>为了让组件能够正常的生成一个vue实例，那么这个div会被自然的处理成程序的入口。</code></p><hr><p>为什么template下也必须有且只能有一个div呢？</p><p>这里我们要先看一看template这个标签，这个标签是HTML5出来的新标签，它有三个特性：</p><p><code>1.隐藏性：</code>该标签不会显示在页面的任何地方，即便里面有多少内容，它永远都是隐藏的状态；</p><p><code>2.任意性：</code>该标签可以写在页面的任何地方，甚至是head、body、sciprt标签内；</p><p><code>3.无效性：</code>该标签里的任何HTML内容都是无效的，不会起任何作用；</p><p><strong>但是呢，你可以通过<code>innerHTML</code>来获取到里面的内容。</strong></p><p><code>template里面的内容就是会被vue处理为虚拟dom并渲染的内容</code>，导致结果又回到了开始</p><p><code>既然一个.vue单文件组件是一个vue实例，那么这个实例的入口在哪里</code>？</p><p>如果在template下有多个div，那么该如何指定这个vue实例的根入口？</p><p>为了让组件能够正常的生成一个vue实例，那么这个div会被自然的处理成程序的入口。</p><p>通过这个‘根节点’，来递归遍历整个vue‘树’下的所有节点，并处理为vdom，最后再渲染成真正的HTML，插入在正确的位置</p><blockquote><p>可以理解为是一颗树, 如果要遍历下面的子元素来生成DOM树那只能有一个根节点, 因为树只有一个根节点</p></blockquote><p><a name="67e49db4"></a></p><h3 id="prop和state的区别"><a href="#prop和state的区别" class="headerlink" title="prop和state的区别"></a>prop和state的区别</h3><p>1、prop用于定义外部接口，state用于记录内部状态；</p><p>2、prop的赋值在外部世界使用组件时，state的赋值在组件内部；</p><p>3、组件不应该改变prop的值，但是state的存在目的就是让组件来改变的</p><p><a name="b60df6b4"></a></p><h3 id="为什么vue要放弃ES6的class"><a href="#为什么vue要放弃ES6的class" class="headerlink" title="为什么vue要放弃ES6的class"></a>为什么vue要放弃ES6的class</h3><p>Function-based API的优势:</p><p>更好的 TS 支持,   Props 和其它需要注入到 this 的属性导致<strong>类型声明</strong>依然存在问题</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// data </span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// computed </span>        <span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// method </span>        <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// watch</span>         <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// lifecycle </span>        <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 暴露给模版或渲染函数 </span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong><em>###</em></strong> <strong>vue中 key 值的作用</strong></p><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，<code>key的作用主要是为了高效的更新虚拟DOM。</code></p><p>key是一个用于指明身份的东西, 如果我有一列的items如果我没有对每个item都有自己唯一的标记</p><p>那么更新虚拟DOM的时候会是这样的</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566270179959-74c313f2-8d11-4288-986c-87465335bd51.jpeg#align=left&display=inline&height=767&originHeight=767&originWidth=1454&size=0&status=done&width=1454" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础知识</title>
      <link href="/2019/08/20/vue-ji-chu-zhi-shi/"/>
      <url>/2019/08/20/vue-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><a name="Vue-cli"></a></p><h1 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h1><p><a name="d04d61de"></a></p><h4 id="vue-cli如何新增自定义指令"><a href="#vue-cli如何新增自定义指令" class="headerlink" title="vue-cli如何新增自定义指令"></a>vue-cli如何新增自定义指令</h4><p>主要是<code>directives</code>实现的<br><code>1. 创建局部指令</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 创建指令(可以多个)</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指令名称</span>        dir1<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 指令中第一个参数是当前使用指令的DOM</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 对DOM进行操作</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'200px'</span><span class="token punctuation">;</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'200px'</span><span class="token punctuation">;</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'#000'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>2. 全局指令</code></p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'dir2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>3. 指令的使用</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>dir1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>dir2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p><a name="8808f398"></a></p><h4 id="如何自定义一个过滤器"><a href="#如何自定义一个过滤器" class="headerlink" title="如何自定义一个过滤器"></a>如何自定义一个过滤器</h4><p><code>写法1</code>局部写法:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        msg<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>      capitalize<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>写法2</code>全局定义写法</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'capitalize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>  value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>具体的使用方法</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     {{msg| capitalize }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><a name="Vuex"></a></p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>主要是为了存储状态用的，类似存一些全局变量</p><p>在组件化的应用中，会有着大量的组件层级关系，深嵌套的组件与浅层父组件进行数据交互，变得十分繁琐困难。而vuex，站在一个服务级别的角度，可以毫无阻碍地将应用的状态传递到每一个层级的组件中。vuex就相当于整个应用的管家</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566270143157-6cd1d61c-cd83-47e4-a0ce-492fa03479c7.jpeg#align=left&display=inline&height=551&originHeight=551&originWidth=701&size=0&status=done&width=701" alt><br>vuex是用在保存状态的<br>回想下过程<br>组件发送dispatch去触发action(异步), 然后action去提交到mutations,相当于一个处理中心(通过他才能修改state),根据里面的需求去改变state状态, 最后渲染回组件中<br>主要运用场景为:<code>单页面应用</code><br>例如组件之间的状态、音乐播放、登录状态、加入购物车</p><hr><p><code>state</code><br>Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。<br><code>mutations</code><br>mutations定义的方法动态修改Vuex 的 store 中的状态或数据。<br><code>getters</code><br>类似vue的计算属性，主要用来过滤一些数据。<br><code>action</code><br>actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。<code>view 层通过 store.dispath 来分发 action</code>。</p><hr><p>当项目非常复杂的时候可以让每一个模块拥有自己的state、mutation、action、getters使结构清晰</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token punctuation">:</span> moduleB<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="96a0b08c"></a></p><h1 id="Vue与Angular以及React的区别"><a href="#Vue与Angular以及React的区别" class="headerlink" title="Vue与Angular以及React的区别"></a>Vue与Angular以及React的区别</h1><p>与AngularJS的区别<br><code>相同点：</code><br>都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。</p><p><code>不同点：</code><br>AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。</p><hr><p>与React的区别<br><code>相同点：</code><br>React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；</p><p><code>中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；</code>在组件开发中都支持mixins的特性。<br>不同点：<br><code>React采用的Virtual DOM会对渲染出来的结果做脏检查；</code></p><p><code>Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。</code></p><p><a name="7b6bbc53"></a></p><h1 id="vue实现路由的方式"><a href="#vue实现路由的方式" class="headerlink" title="vue实现路由的方式"></a>vue实现路由的方式</h1><p><a name="f0d87001"></a></p><h3 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h3><p><code>hash模式：</code>在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；比如<a href="http://domain/#admin的location.hash=&quot;#admin&quot;" target="_blank" rel="noopener">http://domain/#admin的location.hash=&quot;#admin&quot;</a><br><a href="https://www.cnblogs.com/canger/p/7595641.html" target="_blank" rel="noopener">hash模式</a><br>特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。<br>hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 <a href="http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回" target="_blank" rel="noopener">http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回</a> 404 错误。<br>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。<br>比如，下面URL的原意是指定一个颜色值：<br>　　<a href="http://www.example.com/?color=#fff" target="_blank" rel="noopener">http://www.example.com/?color=#fff</a><br>但是，浏览器实际发出的请求是：<br>　　GET /?color= HTTP/1.1<br>　　Host: <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a><br>可以看到，”#fff”被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：<br>　　<a href="http://example.com/?color=%23fff" target="_blank" rel="noopener">http://example.com/?color=%23fff</a></p><p><a name="3762e606"></a></p><h3 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h3><p><code>history模式：</code>history采用HTML5的新特性；且提供了两个新方法：<code>pushState（），replaceState（）</code>可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。<br>history 模式下，前端的 URL 必须和实际向后端发起请求的 <code>URL 一致</code>，如 <a href="http://www.xxx.com/items/id。后端如果缺少对" target="_blank" rel="noopener">http://www.xxx.com/items/id。后端如果缺少对</a> /items/id 的路由处理，将返回 404 错误。</p><p><a name="120b02f2"></a></p><h1 id="组件之间的参数传递"><a href="#组件之间的参数传递" class="headerlink" title="组件之间的参数传递"></a>组件之间的参数传递</h1><p><code>父组件与子组件传值</code><br>父组件传给子组件：子组件通过props方法接受数据;<br>子组件传给父组件：$emit方法传递参数</p><p><code>非父子组件间的数据传递</code></p><ul><li>兄弟组件传值 eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适。<br><br>（虽然也有不少人推荐直接用VUEX，具体来说看需求咯。技术只是手段，目的达到才是王道。）</li></ul><p><a name="ea7c5069"></a></p><h1 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> obj        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> newValue            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">.</span>txt <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="e852ead2"></a></p><h4 id="为什么用proxy代替object-defineProperty"><a href="#为什么用proxy代替object-defineProperty" class="headerlink" title="为什么用proxy代替object.defineProperty"></a>为什么用proxy代替object.defineProperty</h4><p>因为object.defineProperty只能对对象的属性做监听操作，如果整个属性发生了变化它是比较难监听的， 除非是遍历对象把一个个都监听一遍</p><p>但是这样的话就写起来很麻烦， 而且不能监听数组下标变化后的元素变化</p><p>但是proxy可以， proxy是对对象进行监听， 对象发生改变了就触发事件，就解决了Object.defineProperty的痛点</p><p><a name="9c9f8839"></a></p><h1 id="virtual-dom"><a href="#virtual-dom" class="headerlink" title="virtual dom"></a>virtual dom</h1><p><code>用JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</code><br>当状态变更的时候，<code>重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</code><br>把所记录的差异应用到所构建的真正的DOM树上，视图就更新了。Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。</p><blockquote><p>diff算法中diff其实是一个JSON数据, 比对完信息后不是采用直接插入的方式, 而是采用打补丁的替换方式, 如果更新才是用插入</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566270143165-8361ac7b-97c7-407b-87db-01cf3d76435f.jpeg#align=left&display=inline&height=501&originHeight=501&originWidth=959&size=0&status=done&width=959" alt></p><p><a name="mixin"></a></p><h1 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h1><p>提取逻辑并创建可以被重用的项</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./Child'</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> toggle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mixins/toggle'</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'modal'</span><span class="token punctuation">,</span>      mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>toggle<span class="token punctuation">]</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        appChild<span class="token punctuation">:</span> Child      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><a name="a3c47d16"></a></p><h1 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566270143021-9a086bb9-49dc-452b-900c-0d769c36e261.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=788&size=0&status=done&width=788" alt><br><code>beforeCreate（创建前）</code> 在数据观测和初始化事件还未开始<br><code>created（创建后）</code> 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来</p><p><code>beforeMount（载入前）</code> 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。<br><code>mounted（载入后）</code> 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。</p><p><code>beforeUpdate（更新前）</code> 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br><code>updated（更新后）</code> 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p><p><code>beforeDestroy（销毁前）</code> 在实例销毁之前调用。实例仍然完全可用。<br><code>destroyed（销毁后）</code> 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><p><a name="577f941d"></a></p><h4 id="不同组件之间的嵌套生命周期会怎么样"><a href="#不同组件之间的嵌套生命周期会怎么样" class="headerlink" title="不同组件之间的嵌套生命周期会怎么样"></a>不同组件之间的嵌套生命周期会怎么样</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566270144098-3aa0a3bd-489b-4799-a485-ae3fd36ecf89.png#align=left&display=inline&height=669&originHeight=669&originWidth=436&size=0&status=done&width=436" alt></p><p><a name="42d7865a"></a></p><h1 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h1><p>**<code>实现的步骤</code></p><ul><li>用JavaScript对象模拟DOM</li><li>把此虚拟DOM转成真实DOM并插入页面中</li><li>如果有事件发生修改了虚拟DOM</li><li>比较两棵虚拟DOM树的差异，得到差异对象</li><li>把差异对象应用到真正的DOM树上</li></ul><p>先调用render生成虚拟dom,再来patch</p><p>虚拟DOM是一个JSON对象格式,  把真实DOM抽象出来</p><p>当数据发生改变时，set方法会让调用 <code>Dep.notify</code> 通知所有订阅者Watcher，订阅者就会调用 <code>patch</code> 给真实的DOM打补丁，更新相应的视图。</p><p>如果两个节点都是一样的，那么就深入检查他们的子节点。如果两个节点不一样那就说明 <code>Vnode</code> 完全被改变了，就可以直接替换 <code>oldVnode</code> 。</p><p>虽然这两个节点不一样但是他们的子节点一样怎么办？别忘了，diff可是逐层比较的，如果第一层不一样那么就不会继续深入比较第二层了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的排序</title>
      <link href="/2019/08/20/javascript-de-pai-xu/"/>
      <url>/2019/08/20/javascript-de-pai-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Chrome中数组规模超过10用快排否则用插入排序， Firefox是归并</p></blockquote><p>用<code>console.time(字符串)</code>和<code>console.timeEnd(字符串)</code>组合可以判断时间</p><blockquote><p>先看下, 冒泡, 快排, 系统冒泡, 三种排序结果时间比较<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566268920039-6acf6753-4e6e-4e1f-9e49-705807604319.png#align=left&display=inline&height=366&originHeight=366&originWidth=1194&size=0&status=done&width=1194" alt><br>可以看到, 一般情况下快排最快, 修改后的冒泡比系统自带冒泡快些(因为有排序后就停止了, 系统的一定要全扫描就算已经排序好了)</p></blockquote><p><a name="060aa7df"></a></p><h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><p><code>想想一拳超人的根据中心快速左右移动</code>, 就是取一个数作为基准, 大于它的放在右边, 小于放左边</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 递归出口, 长度小于等于0 的时候就要退出了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token keyword">var</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>测试用例</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// -------------------- 测试用例 --------------------------</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">4657</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入15个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"排序初始数组: "</span><span class="token operator">+</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"quickSort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3, 4, 6, 7, 8, 9, 21, 26, 45, 54, 56, 56, 89, 89, 4657]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"快排结果: "</span><span class="token operator">+</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"quickSort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// quickSort: 3770.940185546875ms</span></code></pre><p><a name="5d7ecc89"></a></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p><code>用交换的方式, 每次把最值找出来排序</code></p><blockquote><p>在数组数量小的时候冒泡还是比较快的</p></blockquote><p>两层循环一次次把最大值或最小值排序到相应位置, <code>要从大到小或从小到大更改下比较就好了</code></p><blockquote><p>通过我的调查我发现, 对于算法不了解的人最一开始想到的是:</p><ol><li><code>简单选择排序</code> 通过选择找最值</li><li><code>冒泡排序</code> 通过交换找最值</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// -------------------- 冒泡排序 ----------------------------</span><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> change <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 外层循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 需要定义一个flag 用于判断该次已经排序完毕了, 不然会有冗余扫描</span>        change <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内层循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 说明改变过了</span>                change <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>change <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>测试用例</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// -------------------- 测试用例 --------------------------</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">4657</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入15个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"排序初始数组: "</span><span class="token operator">+</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"bubbleSort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 叠加时间判断速度</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// [3, 4, 6, 7, 8, 9, 21, 26, 45, 54, 56, 56, 89, 89, 4657]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"冒泡排序结果: "</span><span class="token operator">+</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"bubbleSort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//bubbleSort: 167.6572265625ms</span></code></pre><p><a name="d17a0c1c"></a></p><h1 id="系统默认sort排序"><a href="#系统默认sort排序" class="headerlink" title="系统默认sort排序"></a>系统默认sort排序</h1><p>也是冒泡方式的一种, 区别是<code>没有设置flag</code>意思是一定是<code>O(n^2)</code>一定要循环到n^2</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// -------------- 系统默认排序 --------------------</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"defaultSort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 系统的默认排序方法</span><span class="token punctuation">}</span></code></pre><p><code>测试用例</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// -------------------- 测试用例 --------------------------</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">4657</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入15个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"排序初始数组: "</span><span class="token operator">+</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3, 4, 6, 7, 8, 9, 21, 26, 45, 54, 56, 56, 89, 89, 4657]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"系统默认sort排序: "</span><span class="token operator">+</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"defaultSort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// defaultSort: 452.140869140625ms</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript零碎知识</title>
      <link href="/2019/08/20/javascript-ling-sui-zhi-shi/"/>
      <url>/2019/08/20/javascript-ling-sui-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>正则匹配<code>reg.exec(str)</code>是一次匹配一个, 返回数组, 可以获取下标, 如果要匹配需要循环</p><p><code>str.match(reg)</code>可以一次匹配多个,  但是不记录下标</p><p>数组返回空要判断</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用arr.length == 0来判断</span>arr <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>arr <span class="token operator">==</span> <span class="token string">"[]"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>arr <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>undefined <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'20'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '1020'</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行f函数，返回子函数</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行子函数，返回孙函数</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行孙函数，返回重孙函数</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">" World"</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>foo <span class="token operator">+</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello World</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>foo <span class="token operator">+</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Ref Error</span></code></pre><ul><li>创建二维数组，js中其实没有很明确的二维数组概念<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cl <span class="token operator">=</span> cat<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> cl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> pf <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pv <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pv<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> ps <span class="token operator">=</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>ps <span class="token operator">=</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 合适的IIFE:</span>  <span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">2</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>包装对象和基本类型是不相等的</li><li>宿主对象是由运行时环境（浏览器或 Node）提供，比如window、XMLHTTPRequest</li><li>原生对象是由 ECMAScript 规范定义的 JavaScript 内置对象，比如String、Math、RegExp、Object、Function等等</li><li><br></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>需求实现</title>
      <link href="/2019/08/18/xu-qiu-shi-xian/"/>
      <url>/2019/08/18/xu-qiu-shi-xian/</url>
      
        <content type="html"><![CDATA[<p><a href></a><a name="62a31500"></a></p><h3 id="鼠标悬浮显示下拉菜单"><a href="#鼠标悬浮显示下拉菜单" class="headerlink" title="鼠标悬浮显示下拉菜单"></a>鼠标悬浮显示下拉菜单</h3><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190803211318.gif#alt=" alt></p><p><a href="http://jsrun.pro/HNbKp" target="_blank" rel="noopener">代码地址</a></p><p><a href></a><a name="b3d0036a"></a></p><h3 id="搜索显示历史搜索记录"><a href="#搜索显示历史搜索记录" class="headerlink" title="搜索显示历史搜索记录"></a>搜索显示历史搜索记录</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络问题</title>
      <link href="/2019/08/18/wang-luo-wen-ti/"/>
      <url>/2019/08/18/wang-luo-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a name="88PhR"></a></p><h1 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h1><ul><li>GET请求可以被添加到书签中，也可保存在浏览器历史记录中，请求可以被浏览器缓存，POST不能</li><li>get请求会浏览器主动cache，而post支持多种编码方式</li><li>get比post更不安全，GET请求收到URL长度限制，同时由于传递的参数完全暴露在URL中所以数据长度也受限制, POST不会</li><li>GET请求幂等, 也就是说多次执行的结果和只执行一次的结果完全相同</li><li>GET产生一个TCP数据包；POST产生两个TCP数据包。</li><li><code>get参数通过url传递，post放在request body中</code><blockquote><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。&gt; 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。参考：&gt; <a href="https://github.com/nzhl/front-end-interview/blob/master/%E7%BD%91%E7%BB%9C.md" target="_blank" rel="noopener">链接</a><br><a name="w4gHu"></a></p></blockquote><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><a name="QaLeB"></a><h3 id="HTTP-1-0-1-1-2-0"><a href="#HTTP-1-0-1-1-2-0" class="headerlink" title="HTTP 1.0/1.1/2.0"></a>HTTP 1.0/1.1/2.0</h3><a name="aTCtl"></a><h4 id="HTTP-1-0-与-HTTP-1-1-的不同"><a href="#HTTP-1-0-与-HTTP-1-1-的不同" class="headerlink" title="HTTP 1.0 与 HTTP 1.1 的不同"></a>HTTP 1.0 与 HTTP 1.1 的不同</h4></li></ul><ol><li><code>HTTP 1.1支持长连接</code>（PersistentConnection）和请求的流水线（Pipelining）处理</li></ol><p><code>在1.0时的会话方式：</code></p><ol><li>建立连接</li><li>发出请求信息</li><li>回送响应信息</li><li>关掉连接</li></ol><p><code>HTTP 1.1的持续连接，也需要增加新的请求头来帮助实现，</code>例如，Connection请求头的值为Keep-Alive 时，客户端通知服务器返回本次请求结果后保持连接；Connection请求头的值为close时，客户端通知服务器返回本次请求结果后关闭连接。HTTP 1.1还提供了与身份认证、状态管理和Cache缓存等机制相关的请求头和响应头。<br>请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。例如：一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。  <code>HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求</code>，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容。</p><ol start="2"><li><code>HTTP 1.1增加host字段</code></li></ol><p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名        （hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web         Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果        没有Host头域会报告一个错误（400 Bad Request）。此外，服务器应该接受以绝对路径标记的资源请求。</p><ol start="3"><li><code>100(Continue) Status(节约带宽)</code></li></ol><p><code>HTTP/1.1加入了一个新的状态码</code><br><code>100（Continue）</code>。客户端事先发送一个只带头域的请求，如果服务器因为权限拒绝了请求，就回送响应码        <code>401（Unauthorized）</code>；如果服务器接收此请求就回送响应码100，客户端就可以继续发送带实体的完整请        求了。100 (Continue) 状态代码的使用，允许客户端在发request消息body之前先用request header试探一下        server，看server要不要接收request body，再决定要不要发request body。</p><ol start="4"><li><p><code>HTTP/1.1中引入了Chunked分块</code>transfer-coding来解决上面这个问题，发送方将消息分割成若干个任意大小的数据块，每个数据块在发送时都会附上块的长度，最后用一个零长度的块作为消息结束的标志。这种方法允许发送方只缓冲消息的一个片段，避免缓冲整个消息带来的过载。</p></li><li><p><code>加入了一些cache的新特性</code>，当缓存对象的Age超过Expire时变为stale对象，<code>cache不需要直接抛弃stale对象，而是与源服务器进行重新激活（revalidation）。</code><br><a name="rvbcr"></a></p><h4 id="HTTP-2-0的提升"><a href="#HTTP-2-0的提升" class="headerlink" title="HTTP 2.0的提升"></a>HTTP 2.0的提升</h4><p>基于HTTPS<code>提升访问速度</code>（可以对于，请求资源所需时间更少，访问速度更快，相比http1.0）</p></li><li><p><code>允许多路复用</code>：多路复用<code>允许同时通过单一的HTTP/2连接发送多重请求-响应信息</code>。这个功能相当于是长连接的增强，每个request请求可以随机的混杂在一起，接收方可以根据request的id将request再归属到各自不同的服务端请求里面，另外多路复用中也支持了流的优先级，允许客户端告诉服务器那些内容是更<code>优先级的资源</code>，可以优先传输，</p></li><li><p><code>二进制分帧</code>：HTTP2.0会将所有的传输信息分割为更小的信息或者帧，并对他们进行二进制编码</p></li><li><p><code>首部压缩</code>  HPACK算法. SPDY则通过DEFLATE压缩算法来进行支持</p></li><li><p><code>服务器端推送</code><br><a name="NtD9i"></a></p><h3 id="http状态码和含义"><a href="#http状态码和含义" class="headerlink" title="http状态码和含义"></a>http状态码和含义</h3><p><code>1xx</code>100continue表示<code>继续</code>，一般在发送post请求的时候，发送了http header后服务端会返回这个消息<br><code>2xx</code></p></li></ol><ul><li>200 OK：正常返回信息， 即返回的数据为全量的数据，如果文件不通过GZIP压缩的话，文件是多大，则要有多大传输量。</li><li>201 Created：请求成功并<code>创建了新的资源</code></li><li>202 Accept：服务器接受了请求但<code>还没处理</code></li><li>206 : 返回了部分内容, 主要用于断点续传</li></ul><p><code>3xx</code></p><ul><li>301：网页已永久性移动到新位置</li><li>302 Found：<code>临时重定向</code>，只是找到了新地址但是没有跳转</li><li>303 See Other：<code>临时重定向</code>，使用get请求新的url</li><li>304 Not Modified：自从上次请求后网站资源没有更新过<br><br>如果客户端发送了一个带条件的GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。</li></ul><p><code>4xx 客户端错误</code></p><ul><li><p>400 bad request：请求<code>格式不对</code>，服务器无法解析,<code>请求无效</code></p><blockquote><p>前端提交数据的字段名称和字段类型与后台的实体没有保持一致<br>前端提交到后台的数据应该是json字符串类型，但是前端没有将对象JSON.stringify转化成字符串。<br>解决方法：<br>对照字段的名称，保持一致性<br>将obj对象通过JSON.stringify实现序列化</p></blockquote></li><li><p>401 请求<code>未授权</code>, 当前请求需要用户验证</p></li><li><p>403 Forbidden <code>禁止访问</code>, 服务器已经得到请求，但是拒绝执行</p></li><li><p>404 <code>未找到与URL匹配的资源</code></p></li><li><p>405 ： Method Not Allowed 请求方法（GET、POST、PUT等）对指定的资源不适用，用来访问本资源的HTTP方法不被允许。</p></li><li><p>416 :  所要求的内容无法满足, 在断点续传中用户请求了超出内容范围的内容</p></li></ul><p><code>5xx 服务器错误</code></p><ul><li><p>500 网络服务错误，最常见的服务器错误</p></li><li><p>501 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</p></li><li><p>502 这是服务器上的一个错误网关</p></li><li><p>503 服务器暂时无法访问，可能过载或维护</p></li><li><p>504   这是代表着网关超时是现象出现了。</p></li><li><p>505   http的版本是不受支持的<br><a name="XxmET"></a></p><h3 id="http请求的几种方法和用途"><a href="#http请求的几种方法和用途" class="headerlink" title="http请求的几种方法和用途"></a>http请求的几种方法和用途</h3></li><li><p>GET和POST</p></li><li><p>PUT和post有点像，但是是指定了资源要在服务器存储的位置，post没有</p></li><li><p>head只请求头部</p><blockquote><p>Head请求有以下特点：<br><code>只请求资源的首部，</code><br><code>检查超链接的有效性</code><br><code>检查网页是否被修改</code><br><code>用于自动搜索机器人获取网页的标志信息，获取rss种子信息，或者传递安全认证信息等</code></p></blockquote></li><li><p>delete删除服务器上的某资源</p></li><li><p>option表示url所支持的方法，方法包含在一个allow头里面</p></li><li><p>trace用于激发一个远程应用层消息回路</p></li><li><p>connect把请求连接到透明的tcp/ip通道<br><a name="xtEnf"></a></p><h3 id="HTTP断点续传"><a href="#HTTP断点续传" class="headerlink" title="HTTP断点续传"></a>HTTP断点续传</h3><p>参考：<a href="https://juejin.im/post/5b555f055188251af25700aa" target="_blank" rel="noopener">链接</a></p></li><li><p>服务器响应头中包含Accept-Ranges:byte, 说明当前资源支持范围请求 (因为范围请求是HTTP1.1才开始支持的)</p></li><li><p>双端都支持范围请求后, 在请求头部中假如 Ranges: 0 - Content-Length, 例如已经下载了1000bytes的资源, 想继续下载余下部分, 可以设置Ranges: bytes=1000-</p></li><li><p>请求之后响应头中添加<code>Content-Range: bytes 100-999/1000</code>来表示实际返回的范围和资源总长度</p></li></ul><p>资源可能在几天之后更新了. 为了解决这个问题, 这里要考虑两个和缓存有点的头部标识</p><ul><li>ETag：当前文件的一个验证令牌指纹，用于标识文件的唯一性。</li><li>Last-Modified：标记当前文件最后被修改的时间。<ul><li>在 If-Range 中填入 ETag 或者 Last-Modified 中的任意一个即可, 如果资源没变, 服务器返回206, 意思是返回了部分内容, 内容的范围在 Content-Range中, 否则返回200, 重新下载。</li><li>但是If-Range 必须配合 Range 来使用, 否则会被服务器忽略.</li><li>如果随便输入一个不合理的Range, 例如总长度为1000的数据, 你输入 2000, 就会返回 416, Range Not Satisfiable.<br><a name="rE58D"></a><h3 id="HTTP能使用UDP实现吗"><a href="#HTTP能使用UDP实现吗" class="headerlink" title="HTTP能使用UDP实现吗"></a>HTTP能使用UDP实现吗</h3></li></ul></li></ul><ul><li>需要在UDP的基础上考虑进一步封装来确保其可靠性</li><li><a href="https://www.zhihu.com/question/29705994" target="_blank" rel="noopener">谷歌 Google 打算用 QUIC 协议替代 TCP/UDP</a>，QUIC协议来实现HTTP over UDP, 通过<ul><li>输层的多路复用, 类似TCP Fast Open而不是三次握手</li><li>更安全的加密</li><li>纠错而不是重发</li><li>连接复用<br><a name="29335508"></a><h3 id="HTTP缓存机制"><a href="#HTTP缓存机制" class="headerlink" title="HTTP缓存机制"></a>HTTP缓存机制</h3>HTTP缓存即是浏览器第一次想一个服务器发起HTTP请求后，服务器会返回请求的资源，并且在响应头中添加一些有关缓存的字段如：<br>cache-control，expires,last-modifed，ETag,Date，等，之后浏览器再向该服务器请求资源就可以视情况使用强缓存和协商缓存<br><code>强缓存：浏览器直接从本地缓存中获取数据，不与服务器进行交互</code><br><code>协商缓存：浏览器发送请求到服务器，服务器判断是否可使用本地缓存</code><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268631679-9fd18b26-d960-464b-864b-9fe893fa04c3.jpeg#align=left&display=inline&height=375&originHeight=643&originWidth=948&size=0&status=done&width=553" alt><br><a name="dcf869d8"></a><h3 id="http常用请求头"><a href="#http常用请求头" class="headerlink" title="http常用请求头"></a>http常用请求头</h3><table><thead><tr><th>协议头</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>可接受的响应内容类型（Content-Types）。</td></tr><tr><td>Accept-Charset</td><td>可接受的字符集</td></tr><tr><td>Accept-Encoding</td><td>可接受的响应内容的编码方式。</td></tr><tr><td>Accept-Language</td><td>可接受的响应内容语言列表。</td></tr><tr><td>Accept-Datetime</td><td>可接受的按照时间来表示的响应内容版本</td></tr><tr><td>Authorization</td><td>用于表示HTTP协议中需要认证资源的认证信息</td></tr><tr><td>Cache-Control</td><td>用来指定当前的请求/回复中的，是否使用缓存机制。</td></tr><tr><td>Connection</td><td>客户端（浏览器）想要优先使用的连接类型</td></tr><tr><td>Cookie</td><td>由之前服务器通过Set-Cookie（见下文）设置的一个HTTP协议Cookie</td></tr><tr><td>Content-Length</td><td>以8进制表示的请求体的长度</td></tr><tr><td>Content-MD5</td><td>请求体的内容的二进制 MD5 散列值（数字签名），以 Base64 编码的结果</td></tr><tr><td>Content-Type</td><td>请求体的MIME类型 （用于POST和PUT请求中）</td></tr><tr><td>Date</td><td>发送该消息的日期和时间（以<a href="https://www.nowcoder.com/tutorial/96/24304825a0c04ea9a53cdb09cb664834#section-7.1.1.1" target="_blank" rel="noopener">RFC 7231</a>中定义的”HTTP日期”格式来发送）</td></tr><tr><td>Expect</td><td>表示客户端要求服务器做出特定的行为</td></tr><tr><td>From</td><td>发起此请求的用户的邮件地址</td></tr><tr><td>Host</td><td>表示服务器的域名以及服务器所监听的端口号。如果所请求的端口是对应的服务的标准端口（80），则端口号可以省略。</td></tr><tr><td>If-Match</td><td>仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要用于像 PUT 这样的方法中，仅当从用户上次更新某个资源后，该资源未被修改的情况下，才更新该资源。</td></tr><tr><td>If-Modified-Since</td><td>允许在对应的资源未被修改的情况下返回304未修改</td></tr><tr><td>If-None-Match</td><td>允许在对应的内容未被修改的情况下返回304未修改（ 304 Not Modified ），参考 超文本传输协议 的实体标记</td></tr><tr><td>If-Range</td><td>如果该实体未被修改过，则向返回所缺少的那一个或多个部分。否则，返回整个新的实体</td></tr><tr><td>If-Unmodified-Since</td><td>仅当该实体自某个特定时间以来未被修改的情况下，才发送回应。</td></tr><tr><td>Max-Forwards</td><td>限制该消息可被代理及网关转发的次数。</td></tr><tr><td>Origin</td><td>发起一个针对<a href="http://itbilu.com/javascript/js/VkiXuUcC.html" target="_blank" rel="noopener">跨域资源共享</a>的请求（该请求要求服务器在响应中加入一个Access-Control-Allow-Origin的消息头，表示访问控制所允许的来源）。</td></tr><tr><td>Pragma</td><td>与具体的实现相关，这些字段可能在请求/回应链中的任何时候产生。</td></tr><tr><td>Proxy-Authorization</td><td>用于向代理进行认证的认证信息。</td></tr><tr><td>Range</td><td>表示请求某个实体的一部分，字节偏移以0开始。</td></tr><tr><td>Referer</td><td>表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏览器带到了当前页面。Referer其实是Referrer这个单词，但RFC制作标准时给拼错了，后来也就将错就错使用Referer了。</td></tr><tr><td>TE</td><td>浏览器预期接受的传输时的编码方式：可使用回应协议头Transfer-Encoding中的值（还可以使用”trailers”表示数据传输时的分块方式）用来表示浏览器希望在最后一个大小为0的块之后还接收到一些额外的字段。</td></tr><tr><td>User-Agent</td><td>浏览器的身份标识字符串</td></tr><tr><td>Upgrade</td><td>要求服务器升级到一个高版本协议。</td></tr><tr><td>Via</td><td>告诉服务器，这个请求是由哪些代理发出的。</td></tr><tr><td>Warning</td><td>一个一般性的警告，表示在实体内容体中可能存在错误。</td></tr></tbody></table></li></ul></li></ul><p><a name="hELZ4"></a></p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><a name="bp6oB"></a></p><h3 id="https请求过程"><a href="#https请求过程" class="headerlink" title="https请求过程"></a>https请求过程</h3><ol><li>TCP三次握手</li><li>服务端响应客户端的请求, 并发送自己的证书, 证书中包括了该证书所绑定的域名, 公钥, 包括在内</li><li>客户端根据本地所安装的根证书中的公钥判断该证书是否有效（证书是由CA用他自己的私钥来加密的）</li><li>解开后验证证书是否过期，访问的网站域名与证书绑定的域名是否一致, 至此我们就拿到了服务器的公钥</li><li>客户端随机生成一个秘钥, 使用该公钥对秘钥进行加密, 然后服务器用它的私钥解密得到这个秘钥.</li><li>至此两端已经协议得到了一个共同的秘钥, 然后用对称加密传输信息即可.</li></ol><p>加密部署过程中涉及到的文件：</p><ul><li><p><code>xxx.key</code> 私钥 (和下面xxx.csr成对出现)</p></li><li><p><code>xxx.csr</code> certificate request 里面包含了有关你的服务器的信息以及公钥</p></li><li><p><code>xxx.crt</code> certificate 最终证书, 基于CSR文件被CA加密之后生成</p></li><li><p>Express中只需要key 和 certificate<br><a name="tiTzs"></a></p><h3 id="http和https的基本概念"><a href="#http和https的基本概念" class="headerlink" title="http和https的基本概念"></a>http和https的基本概念</h3><p>http: 超文本传输协议，用的是TCP标准<br>https: 简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>https协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。<br><a name="yB45p"></a></p><h3 id="http和https的区别？"><a href="#http和https的区别？" class="headerlink" title="http和https的区别？"></a>http和https的区别？</h3><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。<br>主要的区别如下：</p></li><li><p><code>HTTPS的缺点在于耗费资源, 另外服务器需要付费给CA才能获得这项服务，费用较高。</code></p></li><li><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p></li><li><p>http协议的端口为80，https的端口为443</p></li><li><p><code>http的连接很简单，是无状态的</code>；<code>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议</code>，比http协议安全。<br><a name="MI6NV"></a></p><h3 id="https协议的工作原理"><a href="#https协议的工作原理" class="headerlink" title="https协议的工作原理"></a>https协议的工作原理</h3><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤：</p></li></ul><ol><li>客户使用https url访问服务器，则<code>要求web 服务器建立ssl链接。</code></li><li>web服务器接收到客户端的请求之后，<code>会将网站的证书（证书中包含了公钥），返回或者说传输给客户端</code>。</li><li>客户端和web服务器端开始<code>协商SSL链接的安全等级</code>，也就是加密等级。 客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</li><li><code>web服务器通过自己的私钥解密出会话密钥</code>。</li><li>web服务器通过会话密钥加密与客户端之间的通信。</li></ol><p><code>优点</code><br>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；<br>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。<br><code>缺点</code><br>https握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电。<br>https缓存不如http高效，会增加数据开销。<br><code>SSL证书也需要钱，功能越强大的证书费用越高。</code><br><code>SSL证书需要绑定IP，不能再同一个ip上绑定多个域名，ipv4资源支持不了这种消耗。</code><br><a name="2PFu5"></a></p><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><p><code>TCP的优点：</code> 可靠，稳定 TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源。</p><p><code>TCP的缺点：</code> 慢，效率低，占用系统资源高，易被攻击 TCP在传递数据之前，要先建连接，这会消耗时间，而且在数据传递时，确认机制、重传机制、拥塞控制机制等都会消耗大量的时间，而且要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的CPU、内存等硬件资源。 而且，因为TCP有确认机制、三次握手机制，这些也导致TCP容易被人利用，实现DOS、DDOS、CC等攻击。<br><code>UDP的优点：</code> 快，比TCP稍安全 UDP没有TCP的握手、确认、窗口、重传、拥塞控制等机制，UDP是一个无状态的传输协议，所以它在传递数据时非常快。没有TCP的这些机制，UDP较TCP被攻击者利用的漏洞就要少一些。但UDP也是无法避免攻击的，比如：UDP Flood攻击……</p><p><code>UDP的缺点：</code>不可靠，不稳定 因为UDP没有TCP那些可靠的机制，在数据传递时，如果网络质量不好，就会很容易丢包。</p><p><code>什么时候应该使用TCP：</code>当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。 在日常生活中，常见使用TCP协议的应用如下： 浏览器，用的HTTP FlashFXP，用的FTP Outlook，用的POP、SMTP Putty，用的Telnet、SSH QQ文件传输</p><p><code>什么时候应该使用UDP：</code>当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。 比如，日常生活中，常见使用UDP协议的应用如下： QQ语音 QQ视频 TFTP<br><code>TCP与UDP区别总结：</code><br>1、<code>TCP面向连接</code>（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2、<code>TCP提供可靠的服务</code>。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付<br>3、<code>TCP面向字节流</code>，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>4、<code>每一条TCP连接只能是点到点的</code>;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5、<code>TCP首部开销20字节;UDP的首部开销小，只有8个字节</code><br>6、<code>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</code></p><p><a name="bEdXk"></a></p><h1 id="三次握手和四次分手"><a href="#三次握手和四次分手" class="headerlink" title="三次握手和四次分手"></a>三次握手和四次分手</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566873090588-fb302c7b-2f13-4602-a668-f2a4297837e6.png#align=left&display=inline&height=293&originHeight=687&originWidth=849&size=0&status=done&width=362" alt></p><p>三次握手</p><ol><li>a: 我要连接你</li><li>b: 好的我准备好了</li><li>a: 我来啦</li></ol><hr><p>四次分手<br>a: 我要分手<br>b: 等一下,我打完这盘游戏下<br>b: 我打完了, 你刚才说什么<br>a: 直接分了,走人<br><a name="grB0M"></a></p><h1 id="WebSocket的实现和应用"><a href="#WebSocket的实现和应用" class="headerlink" title="WebSocket的实现和应用"></a>WebSocket的实现和应用</h1><p><code>什么是WebSocket?</code></p><blockquote><p>WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。<br>Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个</p></blockquote><p>WebSocket是什么样的协议，具体有什么优点？</p><blockquote><p>HTTP的生命周期通过Request来界定，也就是Request一个Response，那么在Http1.0协议中，这次Http请求就结束了。<br>在Http1.1中进行了改进，是的有一个connection：Keep-alive，也就是说，在一个Http连接中，可以发送多个Request，接收多个Response。<br>但是必须记住，在Http中一个Request只能对应有一个Response，而且这个Response是被动的，不能主动发起。</p></blockquote><p>WebSocket是基于Http协议的，或者说<code>借用了Http协议来完成一部分握手</code>，在<code>握手阶段与Http是相同的</code><br><a name="Hhmgu"></a></p><h4 id="websocket握手请求"><a href="#websocket握手请求" class="headerlink" title="websocket握手请求"></a>websocket握手请求</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268631642-797cb934-692e-4a9b-bc64-b29464929ddf.jpeg#align=left&display=inline&height=332&originHeight=770&originWidth=958&size=0&status=done&width=413" alt><br>响应头：</p><pre class=" language-javascript"><code class="language-javascript">HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">101</span> Switching ProtocolsUpgrade<span class="token punctuation">:</span> websocketConnection<span class="token punctuation">:</span> Upgrade<span class="token comment" spellcheck="true">// 通过 Sec-WebSocket-Key 由固定算法生产, 返回后客户端</span><span class="token comment" spellcheck="true">// 验证其正确性, 最终确定服务器确实支持 WebSocket</span>Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Accept<span class="token punctuation">:</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><code>WebSocket的诞生本质上就是为了解决HTTP协议本身的单向性问题</code>：请求必须由客户端向服务端发起，然后服务端进行响应。这个Request-Response的关系是无法改变的。对于一般的网页浏览和访问当然没问题，<code>一旦我们需要服务端主动向客户端发送消息时就麻烦了</code>，<code>因为此前的TCP连接已经释放，根本找不到客户端在哪</code>。<br>但并不是用它取代HTTP，而是取代了原先用于通信的基于TCP的Socket。<br><code>优点是：</code><br>原先在Socket连接后还要进行一些复杂的身份验证，同时要阻止未验证的连接发送控制指令。现在不需要了，<code>在建立WebSocket连接的url里就能携带身份验证参数，验证不通过可以直接拒绝，不用设置状态；</code><br>原先要自己定义Socket数据格式，设置长度与标志，处理粘包、分包等问题，现在WebSocket收到的直接就是完整的数据包，完全不用自己处理；<br><code>前端的nginx可以直接进行转发与负载均衡，部署简单多了</code><br><a name="fEY4J"></a></p><h4 id="websocket心跳检测"><a href="#websocket心跳检测" class="headerlink" title="websocket心跳检测"></a>websocket心跳检测</h4><p>参考：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E7%BD%91%E7%BB%9C.md" target="_blank" rel="noopener">链接</a><br>一种互相确认当前连接仍然良好的机制。有时WebSocket碰到网络断开的情况, 如果问题出现在客户端, 浏览器使用websocket.send发现数据发不出去, 便会触发onclose事件, 但后端并没有收到通知, 这时候可能导致服务器继续想客户端发送数据, 但是这些数据显然会直接丢失.<br>为了解决上述问题, 以前端作为主动方，定时发送ping消息，用于检测网络和前后端连接问题。如果后端收到ping类型消息后会立马返回pong类型消息, 如果客户端一段时间没有收到pong, 说明发生异常，前端持续执行重连逻辑，直到重连成功<br><a name="kOmpH"></a></p><h4 id="Long-Polling、Websockets-和-Server-Sent-Event-之间有什么区别"><a href="#Long-Polling、Websockets-和-Server-Sent-Event-之间有什么区别" class="headerlink" title="Long-Polling、Websockets 和 Server-Sent Event 之间有什么区别"></a>Long-Polling、Websockets 和 Server-Sent Event 之间有什么区别</h4><p>参考：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E7%BD%91%E7%BB%9C.md" target="_blank" rel="noopener">链接</a></p><ul><li><p>Polling 意思是客户端不断请求服务器端, 同时服务器端无论有无新消息立即返回. 类似厕所内外常常发生的对话.</p><pre><code>C: 你好了吗?S: 没好C: 快点啊, 我憋不住了S: 就快好了...</code></pre></li><li><p>Long-Polling/COMET 意思是服务器接收到客户端的请求后，服务器并不立即回复, 而是阻塞请求直至到有了新的消息是才响应客户端, 而在这期间客户端不在发送任何多余的请求. 如果客户端请求超时, 再客户端重新建立下一次连接的过程中服务器端产生了新数据, 那么服务器端将保存这些数据并等到客户端重新请求连接, 此时服务器端一次性把这些数据返回给客户端.</p><blockquote><p>不论是 Polling 还是 Long-Polling, 本质都是利用HTTP进行数据通讯(具体实现可以使AJAX或者是基于iframe), Long-Polling的优势在于减少了请求的次数, 因为每次请求的大部分数据(包括头部信息)都是相同的, 减少请求次数有利于提高通讯效率. 同时也缓解了服务器的压力.</p></blockquote></li></ul><p>WebSocket：</p><ul><li>SSE (Server-Sent Event) 即HTML5 提出的一种服务器推送技术, 它允许服务器向客户端实时推送数据. 原理是JS脚本中与服务器之间建立连接, 但是客户端不会关闭连接，而是等待服务端不断得发送响应结果, 服务器可以随时推送新的消息给客户端，WebSocket对于没有同源限制，可以跨域共享资源</li><li>只需要在浏览器中使用 <code>new EventSource(url)</code> 创建连接, 并监听其一系列事件例如<code>open</code>, <code>message</code>, <code>close</code> , <code>error</code> 等等. 然后服务器端返回头中带上<code>content-type: text/event-stream</code>即可.<br><a name="dI4x9"></a><h1 id="怎么生成token-怎么传递"><a href="#怎么生成token-怎么传递" class="headerlink" title="怎么生成token, 怎么传递"></a>怎么生成token, 怎么传递</h1>第一个<code>token是针对接口的</code>（api_token）；<br>第二个<code>token是针对用户的</code>（user_token）；<br><code>先说第一个token（api_token）</code><br>它的职责是保持接口访问的隐蔽性和有效性，<code>保证接口只能给自家人用</code></li></ul><ol><li>获取GET参数值</li><li>根据客户端传过来的client_id，查询数据库，获取对应的client_secret。</li><li>服务器重新生成一份api_token</li><li>客户端传过来的api_token与服务器生成的api_token进行校对，如果不相等，则表示验证失败。</li><li>验证通过，返回数据到客户端。</li></ol><p><code>再说第二个token（user_token）</code><br>它的职责是保护用户的用户名及密码多次提交，以防密码泄露。<br>如果接口需要用户登录，其访问流程如下：<br>1、用户提交“用户名”和“密码”，实现登录（条件允许，这一步最好走https）；<br>2、登录成功后，服务端返回一个 user_token<br><a name="SfwJS"></a></p><h1 id="DNS-Prefetch"><a href="#DNS-Prefetch" class="headerlink" title="DNS Prefetch"></a>DNS Prefetch</h1><p>浏览器域名解析使用的是本地缓存, 要远远快于路由器缓存或者ISP提供商缓存<br>一般来说，浏览器会自动将遇到的a标签中的href包含的域名解析为IP地址，但对于HTTPS的超链接并不会自动解析<br>当我们希望对HTTPS的页面：</p><ul><li>开启自动解析时, 可以添加 <meta http-equiv="x-dns-prefetch-control" content="on"></li><li>关闭对HTTP的页面自动解析, 可以添加<meta http-equiv="x-dns-prefetch-control" content="off"></li><li>手动解析: <link rel="dns-prefetch" href="需要缓存的url"> 在网页中加入这一行，用户单击当前网页中的连接时就无需进行DNS的解析</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端综合知识要点</title>
      <link href="/2019/08/18/qian-duan-zong-he-zhi-shi-yao-dian/"/>
      <url>/2019/08/18/qian-duan-zong-he-zhi-shi-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="Ke9wq"></a></p><h1 id="Cookie、sessionStorage、localStorage"><a href="#Cookie、sessionStorage、localStorage" class="headerlink" title="Cookie、sessionStorage、localStorage"></a>Cookie、sessionStorage、localStorage</h1><p>cookie是在http请求中携带的，用于<code>浏览器和服务器之间通信</code>大小限制在<code>4k内</code><br>sessionStorage，localStorage只在本地存储，大小可以大一些些. 5mb左右<br><code>localStorage.setItem尽量加到try-catch中, 因为某些浏览器是禁用这个api的</code></p><ul><li><p>cookie 通常用于登录状态的保存等功能的实现</p></li><li><p>sessionStorage通常用来在单页应用中方便各个模块的数据共享</p></li><li><p>localStorage通常用来存储一些体积较大但又需要持久保存的数据, 例如在线编辑文章的自动保存<br><a name="DXaoe"></a></p><h3 id="Cookie的安全问题"><a href="#Cookie的安全问题" class="headerlink" title="Cookie的安全问题"></a>Cookie的安全问题</h3><p>参考：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md" target="_blank" rel="noopener">链接</a></p></li><li><p>服务器端返回cookie时, 对于某些敏感的cookie设置httpOnly为true, 这种cookie是无法通过document.cookie拿到的, 所以也就无法修改. 同时只会在发送请求的时候被附带, 使用脚本AJAX时由于无法获取, 所以也不会被带上.</p></li><li><p>尽可能地设置有效期较短的cookie， 也就是增加expires/max-age (前者是HTTP1.0中的表示绝对时间后者是1.1新规范表示相对时间, 一般为保证兼容性都写), 或者干脆不写或者写一个早于当前时间的日期, 这样的话cookie将会随着Session一起过期</p></li><li><p>给cookie添加secure: true, 表示只在https协议下传输.</p></li><li><p>给敏感的cookie加密或者哈希</p><blockquote><p>碰到不支持cookie的页面可以通过以下方式来支持session：</p><ul><li>URL重写: 把sessionID以URL参数的形势传入</li><li>隐藏表单: 在页面中插入一个隐藏的表单来记录sessionId, 每次需要提交新的请求时带上该表</li><li>ip地址: 单纯地根据ip地址来判断是否是同一用户.</li></ul></blockquote></li></ul><p><a name="2aqld"></a></p><h3 id="document-cookie-转化为对象"><a href="#document-cookie-转化为对象" class="headerlink" title="document.cookie 转化为对象"></a>document.cookie 转化为对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> cookie2obj <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> each <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> each<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    obj<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj<span class="token punctuation">}</span></code></pre><p><a name="Ur7cO"></a></p><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><p><code>共同点</code>：都是保存在浏览器端，并且是同源的<br><code>Cookie</code>：cookie数据始终在<code>同源的http请求中携带（即使不需要）</code>，</p><blockquote><p>即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。<br>cookie数据存储的大小很小只有4K左右。<br>另外两个是5mb左右</p></blockquote><p><code>sessionStorage</code>：<code>仅在当前浏览器窗口关闭前有效</code>，自然也就不可能持久保持，<br><code>localStorage：始终有效</code>，窗口或浏览器关闭也一直保存，因此用作持久数据<br><code>cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</code>。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话）</p><hr><p><code>localStorage：</code>localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：<code>同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效</code>）<br>补充说明一下<code>cookie的作用：</code></p><ul><li><code>保存用户登录状态。</code>例如将用户<code>id存储于一个cookie内</code>，这样当用户下次访问该页面时就<code>不需要重新登录了</code>，现在很多论坛和社区都提供这样的功能。   cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个  月、一年等。</li><li><code>跟踪用户行为。</code>例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后  台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。<blockquote><p>从安全性来说，因为<code>每次http请求都回携带cookie信息，这样子浪费了带宽</code>，所以<code>cookie应该尽可能的少用</code><br>此外cookie还需要<code>指定作用域，不可以跨域调用</code>，限制很多，但是<code>用户识别用户登陆来说，cookie还是比storage好用，其他情况下可以用storage，localstorage可以用来在页面传递参数</code><br>sessionstorage可以用来保存一些<code>临时的数据，防止用户刷新页面后丢失了一些参数</code></p></blockquote></li></ul><hr><p>HTTP是一个无状态协议，因此<code>Cookie的最大的作用就是存储sessionId</code>用来唯一标识用户</p><ol><li>cookie数据存放在客户的浏览器上，session数据放在服务器上。</li><li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br><br>考虑到安全应当使用session。</li><li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br><br>考虑到减轻服务器性能方面，应当使用COOKIE。</li><li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br><a name="YYaXG"></a><h1 id="前端SEO要注意哪些"><a href="#前端SEO要注意哪些" class="headerlink" title="前端SEO要注意哪些"></a>前端SEO要注意哪些</h1></li></ol><ul><li>合理的标题，描述和关键字要强调重点</li><li>语义化html代码</li><li>最重要的html代码放在最前面</li><li>重要内容不要用js输出，爬虫不会去爬js获取内容</li><li>少用iframe</li><li>非装饰性图片要加alt，图片不加载的时候显示的文字</li><li>提高网站速度，这是一个重要指标</li></ul><p><a name="WfeVL"></a></p><h1 id="web中怎么实现会话跟踪"><a href="#web中怎么实现会话跟踪" class="headerlink" title="web中怎么实现会话跟踪"></a>web中怎么实现会话跟踪</h1><p>可以通过</p><ul><li>cookie</li><li>session</li><li>url重写</li><li>隐藏的input</li><li>ip地址</li></ul><p><a name="Zf8pW"></a></p><h1 id="常见的web安全及防护原理"><a href="#常见的web安全及防护原理" class="headerlink" title="常见的web安全及防护原理"></a>常见的web安全及防护原理</h1><p>常见的web安全及防护原理</p><p><code>sql注入</code></p><p>通过sql命令插入到web表单中欺骗服务器</p><hr><p>解决:</p><ul><li>不要相信用户的输入, 都应该做验证</li><li>不要用动态拼接sql</li><li>不要用管理员权限进行数据库连接, 每个应用权限都是有限的</li><li>不要明文存放信息</li></ul><p><code>CSRF攻击</code><br>csrf是代替用户完成指定动作, 通过伪装来自受信任用户的请求来进行对受信任的网站一些操作<br>xss是其中的方法之一<br>例如利用本地cookie访问危险网站</p><hr><p>解决:</p><ul><li>通过在客户端页面增加伪随机数</li><li>进行验证</li></ul><hr><p><code>xss攻击</code><br>通过外部脚本攻击, 在页面内插入恶意html标签或者JavaScript代码, 用于窃听cookie<br>解决:</p><ul><li><p>进行标签过滤, 和关键字符过滤</p></li><li><p>任何内容写入到页面钱都应该进行encode<br><a name="PvB7g"></a></p><h1 id="如何进行网站优化"><a href="#如何进行网站优化" class="headerlink" title="如何进行网站优化"></a>如何进行网站优化</h1><p><a name="0b9lZ"></a></p><h3 id="js的性能优化有哪些"><a href="#js的性能优化有哪些" class="headerlink" title="js的性能优化有哪些"></a>js的性能优化有哪些</h3></li><li><p>添加本地缓存</p></li><li><p>避免使用CSS表达式</p></li><li><p>减少DNS查询</p></li><li><p>使用外部javascript和CSS</p></li><li><p>避免重定向</p></li><li><p>图片lazyLoad</p></li><li><p>事件节流</p><blockquote><p>比如在textarea里面如果需要监听change事件，即keyup来监听事件<br>可以通过加上settimeout来进行事件节流 就是不要一直都是实时监听，可以隔一段时间监听下</p></blockquote></li><li><p>使用ssr后端渲染, 减少前端渲染时间，就是一次性输出html内容，不用频繁调用ajax</p></li><li><p>css放在前面， js放在后面</p><blockquote><p>JS的下载会同时阻塞浏览器的解析和渲染, 所以放末尾可以防止白屏时间过长.<br>但一些统计类js, 或是要网页面中添加内容的js可以考虑放在开头.</p></blockquote></li></ul><p><a name="gslfW"></a></p><h3 id="服务器方面"><a href="#服务器方面" class="headerlink" title="服务器方面"></a>服务器方面</h3><p>使用CND加速，ETag配置，用Gzip压缩<br><a name="6BGtU"></a></p><h3 id="内容方面"><a href="#内容方面" class="headerlink" title="内容方面"></a>内容方面</h3><ol><li>减少http请求， 包括图像使用css雪碧图，合并文件之类的</li><li>减少dns查询，用dns缓存</li><li>减少DOM数量</li><li>减小cookies的大小</li><li>尽量不要在html中去拉伸图片</li></ol><p><code>css</code><br>CSS的下载并不阻塞浏览器的解析, 但是阻塞浏览器的渲染. 如果CSS不放head中, 浏览器将首先使用一个空的样式树来对页面的元素进行渲染, 之后加载CSS之后再讲元素重绘回流, 所以这样做会产生所谓的FONC(flash of unstyled content)现象, 但是如果css过大可能导致白屏时间过长(因为渲染会被阻塞), 所以如果是非首屏可见元素的CSS可以考虑放在HTML的末尾.<br>样式表放在顶部， 不要使用css表达式，使用不用<a href>@import </a><br><code>JavaScript</code></p><ol><li>脚本放在页面底部</li><li>文件用外部引入，压缩，减少不必要脚本</li><li>减少DOM访问</li></ol><hr><p>降低请求量：合并资源，减少HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。</p><p>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</p><p>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。</p><p>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline。</p><p><a name="F870Q"></a></p><h1 id="谈谈你对重构的理解"><a href="#谈谈你对重构的理解" class="headerlink" title="谈谈你对重构的理解"></a>谈谈你对重构的理解</h1><p>网站重构是不改变外观的前提下, 进行结构优化, 添加可读性, 加快速度</p><p><code>高复用低耦合, 文件小, 好维护, 好扩展</code>才是好代码</p><p><a name="FUt3u"></a></p><h3 id="常用的重构方法是"><a href="#常用的重构方法是" class="headerlink" title="常用的重构方法是"></a>常用的重构方法是</h3><ul><li>表格table改为div+css</li><li>使网站兼容现代浏览器, 废弃ie6</li><li>对于移动平台进行优化</li><li>针对seo进行优化</li><li>减少无用代码, 和代码体积, 提高速度</li></ul><p><a name="R2BRn"></a></p><h1 id="严格模式和混杂模式有什么区别"><a href="#严格模式和混杂模式有什么区别" class="headerlink" title="严格模式和混杂模式有什么区别"></a>严格模式和混杂模式有什么区别</h1><p><code>Doctype</code>声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><p><code>严格模式</code>是让浏览器用最高标准运行</p><p>比如最新版本代码会忽略一些老旧的代码</p><p>那么老旧的代码就不会被运行，叫做以最高标准进行</p><hr><p><code>混杂模式</code>是可以向后兼容老式浏览器的</p><p>就是新的可以支持，老的代码也可以运行成功<br><a name="oUkpo"></a></p><h1 id="说一下浏览器缓存"><a href="#说一下浏览器缓存" class="headerlink" title="说一下浏览器缓存"></a>说一下浏览器缓存</h1><p>缓存分为两种：<code>强缓存和协商缓存</code>，根据响应的header内容来决定。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566268586360-401c4109-c953-457e-8bc8-591727dacf74.png#align=left&display=inline&height=451&originHeight=593&originWidth=623&size=0&status=done&width=474" alt></p><blockquote><p>因为服务器上的资源不是一直固定不变的，大多数情况下它会更新，这个时候如果我们还访问本地缓存，那么对用户来说，那就相当于资源没有更新，用户看到的还是旧的资源；<code>所以我们希望服务器上的资源更新了浏览器就请求新的资源，没有更新就使用本地的缓存</code>，以最大程度的减少因网络请求而产生的资源浪费。</p></blockquote><table><thead><tr><th></th><th>获取资源形式</th><th>状态码</th><th>发送请求到服务器</th></tr></thead><tbody><tr><td>强缓存</td><td>从缓存取</td><td>200（from cache）</td><td>否，直接从缓存取</td></tr><tr><td>协商缓存</td><td>从缓存取</td><td>304（not modified）</td><td>是，通过服务器来告知缓存是否可用</td></tr></tbody></table><p><code>强缓存相关字段有expires，cache-control</code>。如果cache-control与expires同时存在的话，cache-control的优先级高于expires。<br>协商缓存相关字段有</p><ul><li><p>Last-Modified/If-Modified-Since</p></li><li><p>Etag/If-None-Match<br><a name="tvxWA"></a></p><h3 id="缓存过程"><a href="#缓存过程" class="headerlink" title="缓存过程"></a>缓存过程</h3><p>先进行Cache-Control判断，当Cache-Control没有触发(过期, 浏览器刷新, 没有设置Cache-Control和Expires), 则应用协商缓存。<br>刷新过程, 忽略强制缓存直接触发协商缓存，Ctr + F5 刷新, 清空本地缓存, 强制重新下载<br>Cache-Control 可以用以下取值：</p></li><li><p>private: 客户端可以缓存</p></li><li><p>public: 客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）</p></li><li><p>max-age=xxx: 缓存的内容将在 xxx 秒后失效（相对时间, 解决了客户端服务器端时差问题）</p></li><li><p>no-cache: 需要使用对比缓存来验证缓存数据（后面介绍）</p></li><li><p>no-store: 所有内容都不会缓存，强制缓存，对比缓存都不会触发<br><a name="UHW2Q"></a></p><h3 id="其他缓存技术"><a href="#其他缓存技术" class="headerlink" title="其他缓存技术"></a>其他缓存技术</h3></li><li><p>离线缓存技术, 包括应用缓存manifest和 Service Worker 两种, 前一种已经被标准废弃, 推荐使用第二种, 与上面所提到的缓存不同的是, 上面的缓存是基于请求的, 而这里的缓存是基于整个应用的. 我的猜测是, 首先触发离线缓存, 然后对于需要更新的文件在判断是否触发强制缓存和对比缓存.</p><ul><li>Service Worker基于Web Worker实现, 本质上就是一个特殊的Worker(非JS主线程的其他线程),它可以实现拦截和处理网络请求、消息推送、静默更新、事件同步等服务, 限制条件是页面必须基于HTTPS.(例外是 localhost 和 127.0.0.1 即使HTTP也可以使用)</li></ul></li><li><p>应用程序缓存，是从浏览器的缓存中分出来的一块缓存区，要想在这个缓存中保存数据，可以使用一个描述文件（manifest file），列出要下载和缓存的资源。 只需要在html文件中引用对应的manifest文件即可</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./address-of-manifest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> html content <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><a name="06zod"></a></p><h1 id="讲讲移动端自适应问题"><a href="#讲讲移动端自适应问题" class="headerlink" title="讲讲移动端自适应问题"></a>讲讲移动端自适应问题</h1></li></ul><p>逻辑分辨率和物理分辨率不一致是很正常的</p><p>css渲染是根据逻辑分辨率, 所以有时候就会出现1px对应4个物理分辨率的情况, 会产生模糊</p><p><a name="m6pOJ"></a></p><h1 id="响应式和自适应"><a href="#响应式和自适应" class="headerlink" title="响应式和自适应"></a>响应式和自适应</h1><p>响应式主要是根据@media来实现</p><p>自适应则是忽略了@media依靠的是窗口比例来实现</p><p>自适应比较好</p><p>如今的大型网站, 例如淘宝已经没有响应式了</p><p>淘宝手机端和网页端使用的是两个域名, 不同客户端不再使用同一套dom, 而是区分开做自适应</p><p>为什么呢?</p><p>试想一下淘宝这种大型网站，一个分页下的商品条目特别多，并且每个商品条目的dom结构又十分复杂，而且pc端往往显示的信息是要比手机端更多的。如果不分开做两套，而是直接用响应式的话，那么pc端上显示的很多dom就要在手机端上隐藏，结果这些dom都没有被用到，但是却加载了。在这个流量和速度至上的时代，代码冗余先不说，多加载的这些无用的代码而消耗的流量，从某种意义上来说就已经损失了很多的效益。</p><blockquote><p>兼容性问题</p></blockquote><p>从<code>Chrome32+</code>版本开始是会默认禁用用户缩放的，但是考虑到兼容大部分设备，还是要加上其他设置，让<code>meta</code>标签能够有更好的容错性。也就是下面这段代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0,  user-scalable<span class="token punctuation">=</span>no;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>需要注意的是，在<code>ios10+</code>以上，尽管开发者设置了<code>user-scalable=no</code>，<code>Safari</code>还是允许用户通过手势来缩放。（安卓手机各大厂商的内置浏览器也逐渐开放用户缩放，即使使用<code>meta</code>标签进行设置）</p><p>解决的方法也很简单，只需要检测<code>touch</code>相关事件来阻止事件的触发即可。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同时按下两个手指</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> lastTouchEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 特别注意300ms时差的设置</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>lastTouchEnd <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastTouchEnd <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268586354-d98949c3-3c3a-4af7-aa91-d0eaf35d6f30.jpeg#align=left&display=inline&height=434&originHeight=434&originWidth=600&size=0&status=done&width=600" alt></p><p>viewport: layout viewport、visual viewport、ideal viewport。</p><ul><li><code>layout viewport:</code>大于实际屏幕， 元素的宽度继承于 layoutviewport，用于保证网站的外观特性与桌面浏览器一样。layoutviewport 到底多宽，每个浏览器不同。iPhone 的 safari 为 980px，通过 document.documentElement.clientWidth 获取。</li><li><code>visual viewport:</code>当前显示在屏幕上的页面，即浏览器可视区域的宽度。</li><li><code>ideal viewport:</code> 为浏览器定义的可完美适配移动端的理想 viewport，固定不变，可以认为是设备视口宽度。比如 iphone 7 为 375px, iphone 7p 为 414px。</li></ul><p><a name="viewport"></a></p><h4 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1,user-scale<span class="token punctuation">=</span>no<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><p>只要 layoutviewport === visualviewport，页面下面不会出现滚动条，默认只是把页面放大或缩小</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 设定两个变量：  </span>viewport_1 <span class="token operator">=</span> width<span class="token punctuation">;</span>  viewport_2 <span class="token operator">=</span> idealviewport <span class="token operator">/</span> initial<span class="token operator">-</span>scale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 则：  </span>layoutviewport <span class="token operator">=</span> max<span class="token punctuation">{</span>viewport_1<span class="token punctuation">,</span> viewport_2<span class="token punctuation">}</span><span class="token punctuation">;</span>  visualviewport <span class="token operator">=</span> viewport_2<span class="token punctuation">;</span></code></pre><hr><p><code>dpr</code></p><p>什么是dpr: 设备像素比(dpr) = 物理像素/设备独立像素。如 iphone 6、7、8 的 dpr 为 2，那么一个设备独立像素便为 4 个物理像素，因此在 css 上设置的 1px 在其屏幕上占据的是 2个物理像素，0.5px 对应的才是其所能展示的最小单位。这就是 1px 在 retina 屏上变粗的原因，目前有很多办法来解决这一问题。</p><hr><p><a name="ce806820"></a></p><h4 id="px与自适应"><a href="#px与自适应" class="headerlink" title="px与自适应"></a>px与自适应</h4><p>上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：</p><pre><code>1 CSS像素 = 物理像素／分辨率</code></pre><p>我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 _ 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px _ 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：</p><pre><code>PC端： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76 px</code></pre><p>而在iphone6下：</p><pre><code>iphone6：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2 px</code></pre><p><a name="107b9842"></a></p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><pre class=" language-scss"><code class="language-scss">@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#FF6699</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">768</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#00FF66</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#6633FF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#FFFF00</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p><p><a name="81522afd"></a></p><h4 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>设置样式让其自适应：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.trangle</span></span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span><span class="token number">75%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果展示如下：</p><p><a href="https://user-images.githubusercontent.com/17233651/41851698-52d2bd2c-78bb-11e8-97cb-26f985195809.gif" target="_blank" rel="noopener"></a></p><p><code>有明显的以下两个缺点：</code></p><p>（1）<code>计算困难，</code>如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。<br>（2）各个属性中如果使用百分比，<code>相对父元素的属性并不是唯一的</code>。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</p><p><a name="rem"></a></p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem单位都是<code>相对于根元素html的font-size</code>来决定大小的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">refreshRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> docEl <span class="token operator">=</span> doc<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> docEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">var</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    flexible<span class="token punctuation">.</span>rem <span class="token operator">=</span> win<span class="token punctuation">.</span>rem <span class="token operator">=</span> rem<span class="token punctuation">;</span><span class="token punctuation">}</span>win<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> refreshRem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>小缺陷是：</p><p><strong><em>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</em></strong>也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。</p><p><a name="0dc77462"></a></p><h4 id="通过vw-vh来实现自适应"><a href="#通过vw-vh来实现自适应" class="headerlink" title="通过vw/vh来实现自适应"></a>通过vw/vh来实现自适应</h4><p>对于iphone6/7  375*667的分辨率，那么px可以通过如下方式换算成vw：</p><pre><code>1px = （1/375）*100 vw</code></pre><p>此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，<a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport</a>可以自动将px转化成vw。</p><p><a name="I4J5b"></a></p><h1 id="1px解决办法"><a href="#1px解决办法" class="headerlink" title="1px解决办法"></a>1px解决办法</h1><p>可以使用以下方法来:</p><ol><li>border-image/background-image</li><li>伪类+transform</li><li>svg<code>基本可以满足所有场景</code></li><li>viewport<code>但是所有布局都要按照物理像素来写</code>这样不现实, 可以借助<code>flexible</code>或<code>vw、vh</code>来帮助我们进行适配</li><li>多背景渐变实现和阴影方式(其实和背景一样)</li></ol><p><a name="0fe37b3f"></a></p><h4 id="1-border-image-background-image"><a href="#1-border-image-background-image" class="headerlink" title="1. border-image/background-image"></a>1. border-image/background-image</h4><p><strong>优点：</strong></p><ul><li>可以设置单条,多条边框</li><li>没有性能瓶颈的问题</li></ul><p><strong>缺点：</strong></p><ul><li>修改颜色麻烦, 需要替换图片</li><li>圆角需要特殊处理，并且边缘会模糊</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268586567-1cd572a3-4391-4f8a-9525-1abb777a8e5b.jpeg#align=left&display=inline&height=474&originHeight=474&originWidth=1976&size=0&status=done&width=1976" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268586367-ea499e37-3384-4dc5-b501-5b3fc73ae63e.jpeg#align=left&display=inline&height=1080&originHeight=1080&originWidth=1550&size=0&status=done&width=1550" alt></p><p><code>border-image</code>属性是一个简写的CSS属性，它可以同时设置<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-source.html" target="_blank" rel="noopener">border-image-source</a>、<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-slice.html" target="_blank" rel="noopener">border-image-slice</a>、<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-width.html" target="_blank" rel="noopener">border-image-width</a>、<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-outset.html" target="_blank" rel="noopener">border-image-outset</a>和<a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/border-image-repeat.html" target="_blank" rel="noopener">border-image-repeat</a>属性。</p><p>基于<code>media</code>查询判断不同设备像素比给定不同的<code>border-image</code></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.border_1px</span></span><span class="token punctuation">{</span>          <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span>2<span class="token punctuation">)</span></span><span class="token punctuation">{</span>            <span class="token selector"><span class="token class">.border_1px</span></span><span class="token punctuation">{</span>                <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>                <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url">url(../img/1pxline.png)</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> stretch<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token selector"><span class="token class">.background-image-1px</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(../img/line.png)</span> repeat-x left bottom<span class="token punctuation">;</span>  <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">1</span>px<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">1</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p><a name="e12fef84"></a></p><h4 id="2-渐变和阴影"><a href="#2-渐变和阴影" class="headerlink" title="2. 渐变和阴影"></a>2. 渐变和阴影</h4><p>与background-image方案类似，<code>只是将图片替换为css3渐变</code>。设置1px的渐变背景，<code>50%有颜色，50%透明。</code></p><p><strong>优点：</strong></p><ul><li>可以实现单条、多条边框</li><li>边框的颜色随意设置</li></ul><p><strong>缺点：</strong></p><ul><li>代码量不少</li><li>圆角没法实现</li><li>多背景图片有兼容性问题</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.background-gradient-1px</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span>    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>, <span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> left / <span class="token number">1</span>px <span class="token number">100%</span> no-repeat,    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>, <span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> right / <span class="token number">1</span>px <span class="token number">100%</span> no-repeat,    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>,<span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> top / <span class="token number">100%</span> <span class="token number">1</span>px no-repeat,    <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#000</span>,<span class="token hexcode">#000</span> <span class="token number">100%</span>, transparent <span class="token number">100%</span><span class="token punctuation">)</span> bottom / <span class="token number">100%</span> <span class="token number">1</span>px no-repeat<span class="token punctuation">}</span></code></pre><p>使用box-shadow模拟边框</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box-shadow-1px</span> </span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset <span class="token number">0</span>px -<span class="token number">1</span>px <span class="token number">1</span>px -<span class="token number">1</span>px <span class="token hexcode">#c8c7cc</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>优点：</strong></p><ul><li>代码量少</li><li>可以满足所有场景</li></ul><p><strong>缺点：</strong></p><ul><li>边框有阴影，颜色变浅</li></ul><p><a name="b5bbb66e"></a></p><h4 id="3-viewport-rem-实现"><a href="#3-viewport-rem-实现" class="headerlink" title="3. viewport + rem 实现"></a>3. viewport + rem 实现</h4><pre class=" language-css"><code class="language-css">&lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span>></code></pre><p>在devicePixelRatio = 3 时，输出viewport：</p><pre class=" language-css"><code class="language-css">&lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"</span>></code></pre><p>这种兼容方案相对比较完美，适合新的项目，老的项目修改成本过大。<br>对于这种方案，可以看看<a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noopener">《使用Flexible实现手淘H5页面的终端适配》</a><br><strong>优点：</strong></p><ul><li>所有场景都能满足</li><li>一套代码，可以兼容基本所有布局</li></ul><p><strong>缺点：</strong></p><ul><li>老项目修改代价过大，只适用于新项目</li></ul><p><a name="26949996"></a></p><h4 id="4-伪类-transform-重做border"><a href="#4-伪类-transform-重做border" class="headerlink" title="4. 伪类+transform(重做border)"></a>4. 伪类+transform(<code>重做border</code>)</h4><p>对于老项目，伪类+transform是比较完美的方法了。<br><code>原理是把原先元素的 border 去掉</code>，然后利用 :before 或者 :after <code>重做 border ，并 transform 的 scale 缩小一半</code>，原先的元素相对定位，新做的 border 绝对定位。单条border样式设置：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.scale-1px</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.scale-1px</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="f5889746"></a></p><h4 id="5-svg-目前最佳"><a href="#5-svg-目前最佳" class="headerlink" title="5. svg(目前最佳)"></a>5. svg(<code>目前最佳</code>)</h4><p>上面我们<code>border-image</code>和<code>background-image</code>都可以模拟<code>1px</code>边框，但是使用的都是位图，还需要外部引入。</p><blockquote><p>借助<code>PostCSS</code>的<code>postcss-write-svg</code><br>直接使用<code>border-image</code>和<code>background-image</code>创建<code>svg</code>的<code>1px</code>边框：</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@svg</span> border_1px</span> <span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>   <span class="token atrule"><span class="token rule">@rect</span></span> <span class="token punctuation">{</span>     <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color, black<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.example</span> </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token function">svg</span><span class="token punctuation">(</span>border_<span class="token number">1</span>px <span class="token function">param</span><span class="token punctuation">(</span>--color <span class="token hexcode">#00b1ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">2</span> <span class="token number">2</span> stretch<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>编译后：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.example</span> </span><span class="token punctuation">{</span> <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid transparent<span class="token punctuation">;</span> <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url">url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='2px'%3E%3Crect fill='%2300b1ff' width='100%25' height='50%25'/%3E%3C/svg%3E")</span> <span class="token number">2</span> <span class="token number">2</span> stretch<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>基本可以满足所有场景。<br><a name="9saP8"></a></p><h1 id="怎么看网站的性能如何"><a href="#怎么看网站的性能如何" class="headerlink" title="怎么看网站的性能如何"></a>怎么看网站的性能如何</h1><p>检测页面加载时间一般有两种方式，一种是被动去测：就是在被检测的页面置入脚本或探针，当用户访问网页时，探针自动采集数据并传回数据库进行分析<br>另一种主动监测的方式，即主动的搭建分布式受控环境，模拟用户发起页面访问请求，主动采集性能数据并分析，在检测的精准度上，专业的第三方工具效果更佳，比如说性能极客<br><a name="w0VIu"></a></p><h1 id="如何检测浏览器白屏时间-首屏加载时间-以及其他的资源的加载时间"><a href="#如何检测浏览器白屏时间-首屏加载时间-以及其他的资源的加载时间" class="headerlink" title="如何检测浏览器白屏时间, 首屏加载时间, 以及其他的资源的加载时间"></a>如何检测浏览器白屏时间, 首屏加载时间, 以及其他的资源的加载时间</h1><p>参考：<a href="http://www.alloyteam.com/2016/01/points-about-resource-loading/" target="_blank" rel="noopener">链接</a></p><ol><li>加载完静态资源后通过 ajax 请求去后台获取数据，数据回来后渲染内容，在每个点打上一个时间戳，首屏时间 =  点 8 - 点 1；</li></ol><p><a href="http://www.alloyteam.com/wp-content/uploads/2016/01/QQ%E6%88%AA%E5%9B%BE20160109164815.png" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566878154870-72e5c130-df9d-4c52-bd49-0d54cd8b8c80.png#align=left&display=inline&height=136&originHeight=136&originWidth=643&size=0&status=done&width=643" alt></a></p><ol start="2"><li>使用后台直出，返回的 html 已经带上内容了，此时首屏时间 = 点 4 - 点 1。</li></ol><p><a href="http://www.alloyteam.com/wp-content/uploads/2016/01/QQ%E6%88%AA%E5%9B%BE20160109165343.png" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566878154887-b39fd0b3-bd3a-446f-acd8-e47eceb54d4a.png#align=left&display=inline&height=135&originHeight=135&originWidth=445&size=0&status=done&width=445" alt></a></p><p>参考：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md" target="_blank" rel="noopener">链接</a></p><ul><li>使用performance API 可惜兼容性不强<a href="http://www.alloyteam.com/2016/01/points-about-resource-loading/" target="_blank" rel="noopener"></a></li><li>在HTML的最开头用JS记录时间, 然后在紧接body的开始标签之后再次记录事件, 差值即为白屏事件.</li><li>如果是首屏加载(即用户首屏所能看到的内容包括图片正常显示的时间), 则需要先找到首屏可见部分最底部的dom元素, 监听该元素以及首屏内可见的所有图片的load事件, 以load事件触发最慢的那个元素为标准, 算差值即为首屏加载时间.</li><li>由于加载是并行的, 执行是串行的, 所以如果要记录某个外联jS的加载时间, 必须在前后打上事件戳, 中间不能有任何其他标签, 例如JS之前如果有比较大的外联CSS文件的话, 即使JS早已经加载完成也不会执行, 会等到CSS下载并解析完成后才会执行JS标签之后的时间戳打印.</li><li>HTML里面Script的加载和执行均会影响 DOMContentLoaded事件的触发. 即使是放在body结尾的JS标签阻塞, 也会使得DOMContentLoaded推迟触发, 除非在标签中加上async.</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端综合小知识点</title>
      <link href="/2019/08/18/qian-duan-zong-he-xiao-zhi-shi-dian/"/>
      <url>/2019/08/18/qian-duan-zong-he-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="SiZz9"></a></p><h1 id="node的使用场景和优缺点"><a href="#node的使用场景和优缺点" class="headerlink" title="node的使用场景和优缺点"></a>node的使用场景和优缺点</h1><p>是一个JavaScript运行环境, 依赖于v8引擎, 是事件驱动, <code>单进程, 单线程, 高并发是最重要的优点</code></p><hr><p>缺点是: <code>只支持单核cpu</code>, 不能充分利用cpu资源</p><p>可靠性低, <code>一旦代码某个环节奔溃整个系统都会奔溃</code></p><p><a name="R3LnT"></a></p><h1 id="对git熟悉吗-知道常用的git命令吗"><a href="#对git熟悉吗-知道常用的git命令吗" class="headerlink" title="对git熟悉吗, 知道常用的git命令吗"></a>对git熟悉吗, 知道常用的git命令吗</h1><pre class=" language-git"><code class="language-git">git clone &lt;远程项目地址>  #克隆git status # 查看修改情况git diff &lt;文件名称> #查看单个文件修改情况</code></pre><p><code>单人开发</code></p><pre class=" language-git"><code class="language-git">git pull origin master #同步别人修改的内容git push origin master #提交到远程服务器</code></pre><hr><p><code>多人开发</code><br>branch就不一定是master了, 依据自己的分支来操作</p><pre class=" language-git"><code class="language-git">git checkout -b &lt;分支名字> #拉取分支git branch #可以参看本地所有分支名字git merge master #同步master分支的内容git checkout &lt;分支名字> #切换分支</code></pre><p>将自己修改的内容提交到远程服务器</p><pre class=" language-git"><code class="language-git">git add .git commit -m <span class="token string">"xxx"</span> #提交所包含的信息git push origin &lt;branchname> #提交到远程分支,自己的分支</code></pre><p>如果自己的代码没有问题的话可以合并到master分支</p><pre class=" language-git"><code class="language-git">git checkout master #切换到master分支git merge &lt;branchname> #合并自己的分支git push origin master #提交到master分支</code></pre><p><a name="X3jRV"></a></p><h1 id="常见的BOM属性对象方法"><a href="#常见的BOM属性对象方法" class="headerlink" title="常见的BOM属性对象方法"></a>常见的BOM属性对象方法</h1><p><code>(1)location对象</code></p><p>location.href– 返回或设置当前文档的URL<br>location.search – 返回URL中的查询字符串部分。例如 <a href="http://www.dreamdu.com/dreamdu.php?id=5&name=dreamdu" target="_blank" rel="noopener">http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</a> 返回包括(?)后面的内容?id=5&amp;name=dreamdu<br>location.hash – 返回URL#后面的内容，如果没有#，返回空<br>location.host – 返回URL中的域名部分，例如<a href="http://www.dreamdu.com" target="_blank" rel="noopener">www.dreamdu.com</a><br>location.hostname – 返回URL中的主域名部分，例如dreamdu.com<br>location.pathname – 返回URL的域名后的部分。例如 <a href="http://www.dreamdu.com/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com/xhtml/</a> 返回/xhtml/<br>location.port – 返回URL中的端口部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回8080<br>location.protocol – 返回URL中的协议部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回(//)前面的内容http:<br>location.assign – 设置当前文档的URL<br>location.replace() – 设置当前文档的URL，并且在history对象的地址列表中移除这个URL location.replace(url);<br>location.reload() – 重载当前页面</p><p><code>(2)history对象</code></p><p>history.go() – 前进或后退指定的页面数 history.go(num);<br>history.back() – 后退一页<br>history.forward() – 前进一页</p><p><code>(3)Navigator对象</code></p><p>navigator.userAgent – 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)<br>navigator.cookieEnabled – 返回浏览器是否支持(启用)cookie</p><p><a name="GNRE6"></a></p><h1 id="说一下web-Quality（无障碍）"><a href="#说一下web-Quality（无障碍）" class="headerlink" title="说一下web Quality（无障碍）"></a>说一下web Quality（无障碍）</h1><p>能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。</p><p>使用alt属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this is a person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>有时候浏览器会无法显示图像。具体的原因有：</p><p>用户关闭了图像显示</p><p>浏览器是不支持图形显示的迷你浏览器</p><p>浏览器是语音浏览器（供盲人和弱视人群使用）<br>如果您使用了alt 属性，那么浏览器至少可以显示或读出有关图像的描述。</p><p><a name="eXNzk"></a></p><h1 id="你怎么理解浏览器内核"><a href="#你怎么理解浏览器内核" class="headerlink" title="你怎么理解浏览器内核"></a>你怎么理解浏览器内核</h1><p>主要分为渲染引擎和JS引擎</p><p><a name="YB3Ph"></a></p><h1 id="fetch发送2次请求的原因"><a href="#fetch发送2次请求的原因" class="headerlink" title="fetch发送2次请求的原因"></a>fetch发送2次请求的原因</h1><p>fetch发送post请求的时候，总是发送2次，第一次状态码是204，第二次才成功？</p><p>原因很简单，因为你用fetch的post请求的时候，导致fetch 第一次发送了一个<code>Options请求，询问服务器是否支持修改的请求头</code>，如果服务器支持，则在第二次中发送真正的请求。</p><p><a name="Bs0bR"></a></p><h1 id="说一下web-worker"><a href="#说一下web-worker" class="headerlink" title="说一下web worker"></a>说一下web worker</h1><p>在HTML页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。</p><p><code>web worker是运行在后台的js，独立于其他脚本，不会影响页面你的性能。</code>并且<code>通过postMessage将结果回传到主线程</code>。这样在进行复杂操作的时候，就不会阻塞主线程了。</p><p>如何创建web worker：</p><ol><li>检测浏览器对于web worker的支持性</li><li>创建web worker文件（js，回传函数等）</li><li>创建web worker对象</li></ol><p><a name="ZCgBb"></a></p><h1 id="cache-control的值有哪些"><a href="#cache-control的值有哪些" class="headerlink" title="cache-control的值有哪些"></a>cache-control的值有哪些</h1><p>cache-control是一个通用消息头字段被用于HTTP请求和响应中，通过指定指令来实现缓存机制，这个缓存指令是单向的，常见的取值有<code>private、no-cache、max-age、must-revalidate</code>等，<code>默认为private</code>。</p><p><a name="yFpdM"></a></p><h1 id="浏览器在生成页面的时候，会生成那两颗树？"><a href="#浏览器在生成页面的时候，会生成那两颗树？" class="headerlink" title="浏览器在生成页面的时候，会生成那两颗树？"></a>浏览器在生成页面的时候，会生成那两颗树？</h1><p>构造两棵树，DOM树和CSSOM规则树</p><p>当浏览器接收到服务器相应来的HTML文档后，会遍历文档节点，生成DOM树，</p><p>CSSOM规则树由浏览器解析CSS文件生成</p><p><a name="TWbSc"></a></p><h1 id="click在ios上有300ms延迟，原因及如何解决？"><a href="#click在ios上有300ms延迟，原因及如何解决？" class="headerlink" title="click在ios上有300ms延迟，原因及如何解决？"></a>click在ios上有300ms延迟，原因及如何解决？</h1><p><code>(1)粗暴型，禁用缩放</code><br><code>(2)改用FastClick，其原理是：</code></p><p>检测到touchend事件后，立刻出发模拟click事件，并且把浏览器300毫秒之后真正出发的事件给阻断掉<br><a name="zpbTs"></a></p><h1 id="浏览器修改DOM是同步还是异步"><a href="#浏览器修改DOM是同步还是异步" class="headerlink" title="浏览器修改DOM是同步还是异步"></a>浏览器修改DOM是同步还是异步</h1><p><a href="https://github.com/nzhl/front-end-interview/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md" target="_blank" rel="noopener">https://github.com/nzhl/front-end-interview/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md</a><br>浏览器对于DOM本身结构的修改是同步的，但是真实体现在浏览器的表现层面上就是异步的。因为浏览器会将DOM的修改暂存在一个队列中, 当前代码执行完成后再集中渲染，DOM树的修改是同步的(js可以立即获取元素)，渲染到屏幕上是异步的(不一定即时看到)<br><a name="6yvw4"></a></p><h1 id="浏览器环境通知用户"><a href="#浏览器环境通知用户" class="headerlink" title="浏览器环境通知用户"></a>浏览器环境通知用户</h1><p>请求通知权限</p><pre class=" language-javascript"><code class="language-javascript">Notification<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 请求通知的权限</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 仅当值为 "granted" 时显示通知</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>body<span class="token punctuation">:</span> <span class="token string">"notification body"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示通知</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——字符串</title>
      <link href="/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-zi-fu-chuan/"/>
      <url>/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p><a name="6674e141"></a></p><h1 id="1-反转字符串"><a href="#1-反转字符串" class="headerlink" title="1. 反转字符串"></a>1. 反转字符串</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/32/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 <a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener">ASCII</a> 码表中的可打印字符。</p><p><strong>示例 1：</strong></p><pre><code>输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</code></pre><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>直接交换, 超级水</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        start<span class="token operator">++</span><span class="token punctuation">;</span>        end<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="544d716b"></a></p><h1 id="2-整数反转"><a href="#2-整数反转" class="headerlink" title="2. 整数反转"></a>2. 整数反转</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/33/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-1"></a></p><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p><strong>示例 1:</strong></p><pre><code>输入: 123输出: 321</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: -123输出: -321</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: 120输出: 21</code></pre><p><strong>注意:</strong></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverse <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">=</span>x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            x<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token operator">>=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="5f23fa9c"></a></p><h1 id="3-字符串中的第一个唯一字符"><a href="#3-字符串中的第一个唯一字符" class="headerlink" title="3. 字符串中的第一个唯一字符"></a>3. 字符串中的第一个唯一字符</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/34/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-2"></a></p><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p><p><strong>案例:</strong></p><pre><code>s = &quot;leetcode&quot;返回 0.s = &quot;loveleetcode&quot;,返回 2.</code></pre><p><strong>注意事项：</strong>您可以假定该字符串只包含小写字母。</p><p><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> firstUniqChar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="2a722512"></a></p><h1 id="4-有效的字母异位词"><a href="#4-有效的字母异位词" class="headerlink" title="4. 有效的字母异位词"></a>4. 有效的字母异位词</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/35/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-3"></a></p><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词。</p><p><strong>示例 1:</strong></p><pre><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: s = &quot;rat&quot;, t = &quot;car&quot;输出: false</code></pre><p><strong>说明:</strong><br>你可以假设字符串只包含小写字母。</p><p><strong>进阶:</strong><br>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isAnagram <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len_t <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> len_s <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len_s<span class="token operator">!=</span>len_t<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len_s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span>_map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>_map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len_t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            _map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="d27fe0e5"></a></p><h1 id="5-验证回文字符串"><a href="#5-验证回文字符串" class="headerlink" title="5. 验证回文字符串"></a>5. 验证回文字符串</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/36/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-4"></a></p><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p><p><strong>示例 1:</strong></p><pre><code>输入: &quot;A man, a plan, a canal: Panama&quot;输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: &quot;race a car&quot;输出: false</code></pre><p><a name="4161afd7-4"></a></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// \W是非单词</span>    <span class="token keyword">var</span> str1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\W/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str1 <span class="token operator">==</span> str2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="17af7d36"></a></p><h1 id="6-字符串转换整数-atoi"><a href="#6-字符串转换整数-atoi" class="headerlink" title="6. 字符串转换整数 (atoi)"></a>6. 字符串转换整数 (atoi)</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/37/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-5"></a></p><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p><strong>说明：</strong></p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p><strong>示例 1:</strong></p><pre><code>输入: &quot;42&quot;输出: 42</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: &quot;   -42&quot;输出: -42解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: &quot;4193 with words&quot;输出: 4193解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。</code></pre><p><strong>示例 4:</strong></p><pre><code>输入: &quot;words and 987&quot;输出: 0解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。     因此无法执行有效的转换。</code></pre><p><strong>示例 5:</strong></p><pre><code>输入: &quot;-91283472332&quot;输出: -2147483648解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。      因此返回 INT_MIN (−231) 。</code></pre><p><a name="4161afd7-5"></a></p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>直接用正则</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myAtoi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^[+|-]?[0-9]+/</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        str <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        INT_MIN <span class="token operator">=</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        INT_MAX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">></span>INT_MAX<span class="token punctuation">)</span>            <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">&lt;</span>INT_MIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="9c1fe4a9"></a></p><h1 id="7-实现-strStr"><a href="#7-实现-strStr" class="headerlink" title="7. 实现 strStr()"></a>7. 实现 strStr()</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/38/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-6"></a></p><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><p>实现 <a href="https://baike.baidu.com/item/strstr/811469" target="_blank" rel="noopener">strStr()</a> 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  <strong>-1</strong>。</p><p><strong>示例 1:</strong></p><pre><code>输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot;输出: 2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;输出: -1</code></pre><p><strong>说明:</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与C语言的 <a href="https://baike.baidu.com/item/strstr/811469" target="_blank" rel="noopener">strstr()</a> 以及 Java的 <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)" target="_blank" rel="noopener">indexOf()</a> 定义相符。</p><p><a name="4161afd7-6"></a></p><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>它让我们实现:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>needle<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> haystack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="e241ec64"></a></p><h3 id="1-KMP-next数组法"><a href="#1-KMP-next数组法" class="headerlink" title="1. KMP-next数组法"></a>1. KMP-next数组法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> next <span class="token operator">=</span> <span class="token function">getNextArr</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> hasyArr <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> needleArr <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> hasyArr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> hasyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needleArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> getNextArr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nextStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> nextArr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> nextArrStr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    nextArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nextArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> nextArrStr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nextArrStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextArr<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> nextArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nextArr<span class="token punctuation">}</span></code></pre><p><a name="df8d2d79"></a></p><h1 id="8-报数"><a href="#8-报数" class="headerlink" title="8. 报数"></a>8. 报数</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/39/" target="_blank" rel="noopener">地址</a></p><p><a name="254dd6d2-7"></a></p><h2 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h2><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p><pre><code>1.     12.     113.     214.     12115.     111221</code></pre><p><code>1</code> 被读作  <code>&quot;one 1&quot;</code>  (<code>&quot;一个一&quot;</code>) , 即 <code>11</code>。<br><code>11</code> 被读作 <code>&quot;two 1s&quot;</code> (<code>&quot;两个一&quot;</code>）, 即 <code>21</code>。<br><code>21</code> 被读作 <code>&quot;one 2&quot;</code>,  “<code>one 1&quot;</code> （<code>&quot;一个二&quot;</code> ,  <code>&quot;一个一&quot;</code>) , 即 <code>1211</code>。</p><p>给定一个正整数 <em>n</em>（1 ≤ <em>n</em> ≤ 30），输出报数序列的第 <em>n</em> 项。</p><p>注意：整数顺序将表示为一个字符串。</p><p><strong>示例 1:</strong></p><pre><code>输入: 1输出: &quot;1&quot;</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 4输出: &quot;1211&quot;</code></pre><p><a name="4161afd7-7"></a></p><h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><p>其实也是动态规划，每次都创建一个res数组用于存放下一个结果</p><p>数一下和当前数字相等的有几个，有几个就push到res中，然后往后跳着继续数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> countAndSay <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 数一下和当前数字相同的数字有几个</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> count<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">+</span><span class="token operator">=</span>count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过相同的数字</span>            <span class="token punctuation">}</span>            arr <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f7741218"></a></p><h1 id="9-最长公共前缀"><a href="#9-最长公共前缀" class="headerlink" title="9. 最长公共前缀"></a>9. 最长公共前缀</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/5/strings/40/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-8"></a></p><h2 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1:</strong></p><pre><code>输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]输出: &quot;fl&quot;</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]输出: &quot;&quot;解释: 输入不存在公共前缀。</code></pre><p><strong>说明:</strong></p><p>所有输入只包含小写字母 <code>a-z</code> 。</p><p><a name="4161afd7-8"></a></p><h2 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h2><p>多注意边界判空就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意判空</span>        <span class="token keyword">let</span> min_length <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 选取最小边界,也是要第二次判空</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            min_length<span class="token operator">></span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">?</span>min_length<span class="token operator">=</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">:</span>min_length<span class="token operator">=</span>min_length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min_length<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>min_length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——链表</title>
      <link href="/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-lian-biao/"/>
      <url>/2019/08/18/leetcode-suan-fa-chu-ji-ti-jie-lian-biao/</url>
      
        <content type="html"><![CDATA[<p><a name="2c842867"></a></p><h1 id="0-创建链表"><a href="#0-创建链表" class="headerlink" title="0. 创建链表"></a>0. 创建链表</h1><p>修改下传入数组就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> head <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> _node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> _node<span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><a name="ddc4a20e"></a></p><h1 id="1-删除链表中的节点"><a href="#1-删除链表中的节点" class="headerlink" title="1. 删除链表中的节点"></a>1. 删除链表中的节点</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/41/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc"></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998251-8dd66876-90f0-4308-9680-8056dfa970b1.png#align=left&display=inline&height=65&originHeight=65&originWidth=395&size=0&status=done&width=395" alt></p><p><strong>示例 1:</strong></p><pre><code>输入: head = [4,5,1,9], node = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: head = [4,5,1,9], node = 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</code></pre><p><strong>说明:</strong></p><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><p><a name="4161afd7"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134999390-af69ea7d-8459-497e-af28-2e93391d7e56.png#align=left&display=inline&height=279&originHeight=279&originWidth=604&size=0&status=done&width=604" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span>    <span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3fdd06b6"></a></p><h1 id="2-删除链表的倒数第N个节点"><a href="#2-删除链表的倒数第N个节点" class="headerlink" title="2. 删除链表的倒数第N个节点"></a>2. 删除链表的倒数第N个节点</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/42/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-1"></a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</code></pre><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><p><strong>进阶：</strong></p><p>你能尝试使用一趟扫描实现吗？</p><p><a name="4161afd7-1"></a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>双指针移动问题，需要注意的是开始的时候如果删除位置超过了链表本身的长度</p><p>那就删除第一个就好了， 这就解决了<code>[1] 1</code>的问题</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> removeNthFromEnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// node为空说明了已经超过了要删除的位置,删掉第一个就好</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">let</span> sec<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 双指针移动,因为node提前走了n步骤,最终sec指向需要删除的前一项</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sec<span class="token operator">=</span>sec<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sec<span class="token punctuation">.</span>next<span class="token operator">=</span>sec<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="0a778e06"></a></p><h1 id="3-反转链表"><a href="#3-反转链表" class="headerlink" title="3. 反转链表"></a>3. 反转链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/43/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-2"></a></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>反转一个单链表。</p><p><strong>示例:</strong></p><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p><a name="4161afd7-2"></a></p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p><a name="8c759203"></a></p><h3 id="1-用迭代法"><a href="#1-用迭代法" class="headerlink" title="1. 用迭代法"></a>1. 用迭代法</h3><p>其实就是构建一个头结点, 然后用类似插入法插入到头结点中</p><p>最后返回头结点的下一个结点就ok了</p><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190815004121.png#align=left&display=inline&height=464&originHeight=464&originWidth=872&status=uploading&width=872" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个新头</span>        <span class="token keyword">let</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> remenber <span class="token operator">=</span> newHead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="741b21de"></a></p><h3 id="2-用递归反转"><a href="#2-用递归反转" class="headerlink" title="2. 用递归反转"></a>2. 用递归反转</h3><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190815005713.png#align=left&display=inline&height=952&originHeight=952&originWidth=894&status=uploading&width=894" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="a23ae9f3"></a></p><h1 id="4-合并两个有序链表"><a href="#4-合并两个有序链表" class="headerlink" title="4. 合并两个有序链表"></a>4. 合并两个有序链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/44/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-3"></a></p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例：</strong></p><pre><code>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</code></pre><p><a name="4161afd7-3"></a></p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>其实就是用两个指针，创建一个空链表头，都从左边开始，小的加入</p><p>然后加入的那个指针向后移动就好了</p><blockquote><p>注意，因为l1和l2长度不同，所以如果有长度还没补全的就继续补充进去</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mergeTwoLists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> head_save <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">let</span> t_l1 <span class="token operator">=</span> l1<span class="token punctuation">,</span>len_l1<span class="token punctuation">,</span>len_l2<span class="token punctuation">;</span>        <span class="token keyword">let</span> t_l2<span class="token operator">=</span>l2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>l2<span class="token punctuation">;</span>                head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 补全</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next<span class="token operator">=</span>l2<span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head_save<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="c9c58479"></a></p><h1 id="5-回文链表"><a href="#5-回文链表" class="headerlink" title="5. 回文链表"></a>5. 回文链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/45/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-4"></a></p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>请判断一个链表是否为回文链表。</p><p><strong>示例 1:</strong></p><pre><code>输入: 1-&gt;2输出: false</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 1-&gt;2-&gt;2-&gt;1输出: true</code></pre><p><strong>进阶：</strong><br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><p><a name="4161afd7-4"></a></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>要O(n) 时间复杂度和 O(1) 空间复杂度，意味着遍历一次和用常数保存</p><p>把链表值存为两个字符串就好了，字符一个加在前面，一个加在后面</p><p>一个存正向，一个存方向，然后最后判断下相等就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> str2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正向方向     </span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            str1 <span class="token operator">+</span><span class="token operator">=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// val加在后面</span>            str2 <span class="token operator">=</span> head<span class="token punctuation">.</span>val <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// val加在前面</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str1 <span class="token operator">===</span> str2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="d8ef65f3"></a></p><h1 id="6-环形链表"><a href="#6-环形链表" class="headerlink" title="6. 环形链表"></a>6. 环形链表</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/46/" target="_blank" rel="noopener">题目</a></p><p><a name="273a27cc-5"></a></p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表，判断链表中是否有环。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p><p><strong>示例 1：</strong></p><pre><code>输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998965-b79eb850-bbfb-44ac-a44e-f6fa57951e0d.png#align=left&display=inline&height=171&originHeight=171&originWidth=531&size=0&status=done&width=531" alt></p><p><strong>示例 2：</strong></p><pre><code>输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998345-e1f5fa1c-58f9-4d4c-b200-346c203e38c4.png#align=left&display=inline&height=105&originHeight=105&originWidth=201&size=0&status=done&width=201" alt></p><p><strong>示例 3：</strong></p><pre><code>输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134998330-cc0787f8-c10f-4a9a-9c0a-83f7a8142164.png#align=left&display=inline&height=65&originHeight=65&originWidth=65&size=0&status=done&width=65" alt></p><p><strong>进阶：</strong></p><p>你能用 _O(1)_（即，常量）内存解决此问题吗？</p><p><a name="4161afd7-5"></a></p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>快慢指针问题，两个指针同时跑，快的跑两步，慢的跑一步，如果有环的话他们一定会相遇，如果没有环的话，快指针一定会遇到null</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hasCycle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> fast<span class="token operator">=</span>head<span class="token punctuation">,</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS要点</title>
      <link href="/2019/08/18/css-yao-dian/"/>
      <url>/2019/08/18/css-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="css"></a></p><h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><p><a name="89a87447"></a></p><h1 id="说下盒模型"><a href="#说下盒模型" class="headerlink" title="说下盒模型"></a>说下盒模型</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566268503545-9c615fd2-a9aa-4a14-b362-6adbb59e7331.png#align=left&display=inline&height=991&originHeight=991&originWidth=740&size=0&status=done&width=740" alt></p><p><a name="b0304957"></a></p><h1 id="如何实现居中"><a href="#如何实现居中" class="headerlink" title="如何实现居中"></a>如何实现居中</h1><p><a name="d365d58d"></a></p><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><p><code>行内水平居中</code></p><p>行内水平居中就直接用text-align: center</p><p><code>块级水平居中</code></p><p>直接用margin: auto来实现</p><p><code>绝对定位元素的居中</code></p><p>可以是哟经left: 50%, margin: 负固定值来实现<br>也可以使用transform: translate(x轴, y轴)来实现</p><p><code>flex居中</code></p><p>使用justify-content: center来实现, 这个是主轴</p><p><a name="4117e80d"></a></p><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><p><code>行内垂直居中</code></p><p>设置line-height和height一样高就好了</p><p><code>绝对定位元素居中</code></p><p>绝对定位元素可以使用<code>top: 50%, margin-top: 负的一半</code>高度<br>或者直接使用<code>transform: translate(x轴, y轴)</code>来实现</p><p>也可以结合使用绝对定位+margin:auto来实现</p><p>margin: auto中的auto意思是自动填充满剩余空间部分</p><p><code>flex居中</code></p><p>使用flex布局来实现 <code>align-items: center</code>,代表交叉轴, 也就是垂直轴</p><p><a name="2e347bce"></a></p><h1 id="BFC怎么形成"><a href="#BFC怎么形成" class="headerlink" title="BFC怎么形成"></a>BFC怎么形成</h1><ul><li><code>根元素html 而不是body</code>, 并且body设置overflow: hidden 无效, 详见<a href="https://stackoverflow.com/questions/41506456/why-body-overflow-not-working/41507857#41507857" target="_blank" rel="noopener">https://stackoverflow.com/questions/41506456/why-body-overflow-not-working/41507857#41507857</a></li><li><code>overflow 不为visible</code></li><li><code>display的值为inline-block、table-cell、table-caption flex/ inline-flex</code></li><li><code>position的值为absolute或fixed</code></li><li><code>通过浮动元素来创建</code></li></ul><p>计算BFC的高度的时候，浮动元素也参与计算</p><ol><li><p>解决普通文档流块元素的外边距折叠问题<br><br>也就是说, 之前遇到的上下margin会重叠问题</p><blockquote><p>解决方法:<br>元素置于不同的BFC中进行隔离就可以解决<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268501535-15557ab0-5069-49da-becb-edd666eb6d2d.jpeg#align=left&display=inline&height=302&originHeight=302&originWidth=1018&size=0&status=done&width=1018" alt></p></blockquote></li><li><p>清除盒子内子元素的浮动问题<br><br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268501684-0d9e134f-3de9-428d-84ab-641290382122.jpeg#align=left&display=inline&height=113&originHeight=113&originWidth=238&size=0&status=done&width=238" alt></p><blockquote><p>解决:<br>在父元素里添加属性overflow: hidden会触发BFC, 和外部隔开, 内部规矩化</p></blockquote></li><li><p>被浮动元素遮挡问题</p><blockquote><p>解决:<br>可以触发下方的元素, 对其添加属性overflow:hidden 触发BFC盒子模型<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268501688-3d8ea592-a9de-4470-9ec2-b0c4acd302f0.jpeg#align=left&display=inline&height=159&originHeight=159&originWidth=885&size=0&status=done&width=885" alt><br>可以对demo2触发其BFC然后就不会遮挡<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268501691-5411f07b-1230-4aac-b5ac-cb0c60fd6a1a.jpeg#align=left&display=inline&height=163&originHeight=163&originWidth=238&size=0&status=done&width=238" alt></p></blockquote></li></ol><p><a name="b9a4588a"></a></p><h1 id="圣杯布局和双飞翼布局"><a href="#圣杯布局和双飞翼布局" class="headerlink" title="圣杯布局和双飞翼布局"></a>圣杯布局和双飞翼布局</h1><p>双飞翼布局优秀点, 变大后不会变形</p><p><a name="0d889a3f"></a></p><h5 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h5><p>圣杯布局 container要<code>float: left</code></p><p>是<code>container预留padding左右</code>, 然后main占100%宽度</p><p>左边的margin: -100%, <code>position设为relative</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#container</span> <span class="token class">.column</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#center</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>   <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector"><span class="token id">#footer</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>为什么左边的是-100%, 因为-左边padding预留位置就会跑到上一行mian那一行</p><p>但是是在最右边, 那还是要跑去最左边才可以, 也就是再继续靠左, 加起来就是100%width</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268501650-99754830-1916-44f8-9be0-31b6511b558a.jpeg#align=left&display=inline&height=339&originHeight=339&originWidth=535&size=0&status=done&width=535" alt></p><p><a name="bb7f05f6"></a></p><h5 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h5><p>与圣杯布局不同的是, container只有包裹住中间的main</p><p><code>然后左右用margin来空出位置</code></p><p>左边的也是要margin-left: -100%,    但是不需要relative定位</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268501684-d7c28cd0-9d6e-49f2-be2b-b8c81be93a71.jpeg#align=left&display=inline&height=327&originHeight=327&originWidth=697&size=0&status=done&width=697" alt></p><pre class=" language-javascript"><code class="language-javascript">#container <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>column <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>#center <span class="token punctuation">{</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">}</span>#left <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token punctuation">}</span>#right <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span> <span class="token punctuation">}</span>#footer <span class="token punctuation">{</span>  clear<span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="2e169b41"></a></p><h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p><code>容器属性</code></p><ul><li>justify-content    主轴布局</li><li>align-items    垂直轴布局</li><li>flex-direction    轴的方向</li><li>flex-wrap    是否换行</li><li>flex-flow    是flex-direction属性和flex-wrap属性的简写形式，默认 row nowrap</li><li>align-content    垂直轴对其方式</li><li>justify-content    主轴对其方式</li></ul><p><code>项目属性</code></p><ul><li>order    项目的排列顺序。数值越小，排列越靠前，默认为0.</li><li>flex-grow    放大比例，默认值为0，即如果存在剩余空间，也不放大</li><li>flex-shrink    项目的缩小比例，默认为1，即如果空间不足，改项目将缩小</li><li>flex-basis    在分配多余空间之前，项目占据的主轴空间,   默认值为auto，即项目的本来大小,    可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间</li><li>flex    是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。后面两个属性可选</li><li>align-self    允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto</li></ul><p><a name="e2f54c69"></a></p><h1 id="怎么清除浮动"><a href="#怎么清除浮动" class="headerlink" title="怎么清除浮动"></a>怎么清除浮动</h1><p>一般我们是用clear: both来清除浮动的, 使用div会占用DOM空间, 所以比较好的做法是在父元素中加上伪元素:after</p><hr><p>末尾添加一个空div作为兄弟：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span>,      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>父元素添加overflow: hidden | auto 或其他能够构成BFC的属性</p><p><a name="601902a8"></a></p><h1 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h1><p><code>重绘（repaint或redraw）</code>：当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。</p><p>触发重绘的条件：<code>改变元素外观属性。</code>如：color，background-color等。</p><blockquote><p>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。</p></blockquote><p>重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。<br>DOM的变化影响到了预算内宿的几何属性比如宽高，浏览器重新计算元素的几何属性，其他元素的几何属性也会受到影响，<code>浏览器需要重新构造渲染书，这个过程称之为重排</code>，浏览器将受到影响的<code>部分重新绘制在屏幕上 的过程称为重绘</code>，引起重排重绘的原因有：</p><ol><li>添加或者删除可见的DOM元素</li><li>元素尺寸位置的改变</li><li>浏览器页面初始化浏览器窗口大小发生改变</li></ol><p><code>重排一定导致重绘，重绘不一定导致重排</code></p><p>减少重绘重排的方法有：</p><ul><li>不在布局信息改变时做DOM查询</li><li>使用csstext,className一次性改变属性</li><li>使用fragment</li></ul><p>对于多次重排的元素，比如说动画。<code>使用绝对定位脱离文档流</code>，使其不影响其他元素</p><hr><p><code>重绘</code></p><p>重绘是指在<code>不修改文档流</code>的情况下<code>进行简单的样式修改</code></p><p><code>回流</code></p><p>修改了dom元素的尺寸和大小, 重新渲染页面</p><p><code>会造成页面抖动,</code> 影响性能,</p><p>尽量少用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS小知识</title>
      <link href="/2019/08/18/css-xiao-zhi-shi/"/>
      <url>/2019/08/18/css-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><a name="81a779f9"></a></p><h4 id="float有什么要注意的点"><a href="#float有什么要注意的点" class="headerlink" title="float有什么要注意的点"></a>float有什么要注意的点</h4><p>float设计出来是用于文字环绕效果的<br>现在转成了用于布局<br>float会脱离文档流, 形成紧密的BFC, 非常具有包裹性<br>如果div设置了float其宽度就会自动调整为包裹住内容宽度, 而不是撑满整个父容器<br>img中会有换行, 如果加上float就没有间隙了, 非常适合网页排版, 砌砖头, 排版出来的网页严丝合缝, 不属于文档流就会没有间隙地靠拢在一起</p><p><a name="3d3a8eca"></a></p><h4 id="你知道grid布局吗"><a href="#你知道grid布局吗" class="headerlink" title="你知道grid布局吗"></a>你知道grid布局吗</h4><p>grid布局把网页划分成网格, 可以做出不同的网格布局</p><p>grid布局远比flex布局强大, <code>flex是按照轴线布局</code>的, 可以看做是一维布局</p><p>但是<code>grid是按照容器的行列来布局</code>的, 可以看做是<code>二维布局</code>, 可以指定项目所在的单元格</p><p>默认情况下, 其容器内元素都是块级元素, 但是可以自己设置成行内元素, inline-grid</p><p>可以通过display:grid设置为grid布局</p><p><code>通过grid-template-rows设置行大小, grid-template-colums设置列大小</code>, 例如:</p><p>grid-template-columns: 100px 100px 100px;</p><p>grid-template-rows: 100px 100px 100px;</p><p>可以用repeat()设置重复大小</p><p>关键字<code>fr单位意思是倍数</code>, 和flex差不多</p><hr><p>具体信息可以查看: <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><p><a name="3042beeb"></a></p><h4 id="讲一下position定位"><a href="#讲一下position定位" class="headerlink" title="讲一下position定位"></a>讲一下position定位</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268477596-e100fb43-ae13-413e-80cc-dfd15d33113b.jpeg#align=left&display=inline&height=310&originHeight=310&originWidth=744&size=0&status=done&width=744" alt></p><p>absolute不是相对于static定位, 是相对于static外的第一个父元素定位</p><p>position不能继承到子元素<br>fixed固定悬浮在视口内</p><ul><li>relative是相对于当前位置定位的, 不影响其他元素的定位<br><br>relative元素内定</li><li>absolute定位是相对于relative元素定位的, 因为relative定位修改了其上下文位置, 子元素也会跟着改变</li><li>fixed是根据window定位的</li><li>absolute是根据最近定位的上下文确定的</li></ul><p><a name="1e9d883c"></a></p><h4 id="animation动画知道吗"><a href="#animation动画知道吗" class="headerlink" title="animation动画知道吗"></a>animation动画知道吗</h4><p>animation动画属性</p><ul><li><p>animation: name 可以写对应的<a href>@keyframe </a> 来写 <code>过程帧动画</code></p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> slidein</span> <span class="token punctuation">{</span><span class="token selector">from </span><span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">to </span><span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> identifier</span> <span class="token punctuation">{</span><span class="token selector">0% </span><span class="token punctuation">{</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">30% </span><span class="token punctuation">{</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">68%, 72% </span><span class="token punctuation">{</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">100% </span><span class="token punctuation">{</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>animation: duration 动画持续时间</p></li><li><p>animation-delay 动画延迟开始</p></li><li><p>animation-iteration-count 动画迭代次数, 默认为1</p></li></ul><p><a name="525fea44"></a></p><h4 id="行内元素有哪些有什么区别"><a href="#行内元素有哪些有什么区别" class="headerlink" title="行内元素有哪些有什么区别"></a>行内元素有哪些有什么区别</h4><ul><li>有: span img input select strong之类的</li><li>不可以独占一行</li><li>margin-top和bottom失效</li></ul><p><a name="9bcc4d59"></a></p><h4 id="link和-import区别"><a href="#link和-import区别" class="headerlink" title="link和@import区别"></a>link和@import区别</h4><p>link是可以并行下载的, 是html方式</p><p>@import是css方式, 串行下载, 会出现FOUC(<code>页面抖动</code>)</p><blockquote><p>FOUC是指页面抖动<br>什么是页面抖动?<br>就是说浏览器在使用默认样式显示文档, 用户样式加载后渲染显示了<br>新的文档, 造成了页面闪烁<br>解决方法是,把样式表放到文档head</p></blockquote><p>link是优于@import的, 尽量用link</p><p><a name="a4a284e0"></a></p><h4 id="画一条0-5px的线"><a href="#画一条0-5px的线" class="headerlink" title="画一条0.5px的线"></a>画一条0.5px的线</h4><ol><li>采用meta viewport的方式</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="2"><li>采用border-image的方式</li><li>采用transform: scale()的方式</li></ol><p><a name="d857472b"></a></p><h4 id="多行文本省略号"><a href="#多行文本省略号" class="headerlink" title="多行文本省略号"></a>多行文本省略号</h4><pre class=" language-javascript"><code class="language-javascript">display<span class="token punctuation">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>orient<span class="token punctuation">:</span>vertical<span class="token operator">-</span>webkit<span class="token operator">-</span>line<span class="token operator">-</span>clamp<span class="token punctuation">:</span><span class="token number">3</span>overflow<span class="token punctuation">:</span>hidden</code></pre><p><a name="9d045bed"></a></p><h4 id="transition和animation的区别"><a href="#transition和animation的区别" class="headerlink" title="transition和animation的区别"></a>transition和animation的区别</h4><p>transition是过度动画, 没有帧的概念<br>animation是动画,有帧的概念</p><p>Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from …. to，而animation可以一帧一帧的。</p><p><a name="0218c501"></a></p><h4 id="visibility-hidden-opacity-0，display-none"><a href="#visibility-hidden-opacity-0，display-none" class="headerlink" title="visibility=hidden, opacity=0，display:none"></a>visibility=hidden, opacity=0，display:none</h4><p>opacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。</p><p><a name="4c29abc7"></a></p><h4 id="双边距重叠问题怎么计算"><a href="#双边距重叠问题怎么计算" class="headerlink" title="双边距重叠问题怎么计算"></a>双边距重叠问题怎么计算</h4><p>多个相邻（兄弟或者父子关系）普通流的块元素垂直方向marigin会重叠</p><p>折叠的结果为：</p><ul><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</li><li>两个外边距一正一负时，折叠结果是两者的相加的和。</li></ul><p><a name="8b33d1b9"></a></p><h4 id="display：table和本身的table有什么区别"><a href="#display：table和本身的table有什么区别" class="headerlink" title="display：table和本身的table有什么区别"></a>display：table和本身的table有什么区别</h4><p><code>display:table</code>和本身table是相对应的，区别在于，display：table的css声明能够让一个html元素和它的子节点像table元素一样，使用<code>基于表格的css布局</code>，是我们能够轻松定义一个单元格的边界，背景等样式，而<code>不会产生因为使用了table那样的制表标签导致的语义化问题。</code></p><p>之所以现在逐渐淘汰了table系表格元素，是因为用<code>div+css编写出来的文件比用table边写出来的文件小</code>，<code>而且table必须在页面完全加载后才显示，div则是逐行显示，table的嵌套性太多，没有div简洁</code></p><p><a name="c2d3394c"></a></p><h4 id="z-index的定位方法"><a href="#z-index的定位方法" class="headerlink" title="z-index的定位方法"></a>z-index的定位方法</h4><p>z-index属性设置元素的堆叠顺序，拥有更好堆叠顺序的元素会处于较低顺序元素之前，<code>z-index可以为负</code>，</p><p>且z-index只能在<code>定位元素上奏效</code>，该属性设置一个定位元素沿z轴的位置，如果为正数，离用户越近，为负数，离用户越远，它的属性值有auto，默认，堆叠顺序与父元素相等，number，inherit，从父元素继承z-index属性的值</p><p><a name="fbfaf520"></a></p><h4 id="设置一个元素的背景颜色，背景颜色会填充哪些区域"><a href="#设置一个元素的背景颜色，背景颜色会填充哪些区域" class="headerlink" title="设置一个元素的背景颜色，背景颜色会填充哪些区域"></a>设置一个元素的背景颜色，背景颜色会填充哪些区域</h4><p>background-color设置的背景颜色会填充元素的content、padding、border区</p><p><a name="25b1cf21"></a></p><h4 id="inline-block、inline和block的区别"><a href="#inline-block、inline和block的区别" class="headerlink" title="inline-block、inline和block的区别"></a>inline-block、inline和block的区别</h4><ul><li>Block是块级元素，其前后都会有换行符，能设置宽度，高度，margin/padding水平垂直方向都有效。</li><li>Inline：设置width和height无效，margin在竖直方向上无效，padding在水平方向垂直方向都有效，前后无换行符</li><li>Inline-block：能设置宽度高度，margin/padding水平垂直方向 都有效，<code>前后无换行符</code></li></ul><blockquote><p>换行符也就是平时看图片间有3px间隔的原因</p></blockquote><p><a name="5de9964c"></a></p><h4 id="浏览器的窗口大小"><a href="#浏览器的窗口大小" class="headerlink" title="浏览器的窗口大小"></a>浏览器的窗口大小</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268477342-19d3b954-6c84-4ba0-b8e2-f3592f800cc0.jpeg#align=left&display=inline&height=668&originHeight=668&originWidth=1280&size=0&status=done&width=1280" alt></p><p><a name="56df73a6"></a></p><h4 id="em是相对于父元素的还是相对于自身"><a href="#em是相对于父元素的还是相对于自身" class="headerlink" title="em是相对于父元素的还是相对于自身"></a>em是相对于父元素的还是相对于自身</h4><p>相对于自身但是一般来说不会相对自身来写就直接从父元素继承了</p><p><a name="cff2ea80"></a></p><h4 id="什么是SVG"><a href="#什么是SVG" class="headerlink" title="什么是SVG"></a>什么是SVG</h4><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准<br>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体<br><code>(SVG是HTML下的一个分支)</code></p><p><a name="2da3ba43"></a></p><h4 id="什么是outline"><a href="#什么是outline" class="headerlink" title="什么是outline"></a>什么是outline</h4><p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。<br>注释：轮廓线不会占据空间，也不一定是矩形。</p><p><a name="8bc7170e"></a></p><h4 id="css设置链接样式"><a href="#css设置链接样式" class="headerlink" title="css设置链接样式"></a>css设置链接样式</h4><p>a:link,a:visited,a:hover,a:active 分别是什么意思?</p><ol><li>link:连接平常的状态</li><li>visited:连接被访问过之后</li><li>hover:鼠标放到连接上的时候</li><li><code>active:连接被按下的时候</code></li></ol><blockquote><p>正确顺序：`“爱恨原则”（LoVe/HAte），即四种伪类的首字母:LVHA。再重复一遍正确的顺序：a:link、a:visited、a:hover、a:active .</p></blockquote><p>因为当鼠标经过未访问的链接，会同时拥有a:link、a:hover两种属性，a:link离它最近，所以它优先满足a:link，而放弃a:hover的重复定义。当鼠标经过已经访问过的链接，会同时拥有a:visited、a:hover两种属性，a:visited离它最近，所以它优先满足a:visited，而放弃a:hover的重复定义。究其原因，是css的就近原则“惹的祸”。</p><p><a name="8cbe1c49"></a></p><h4 id="什么是置换元素"><a href="#什么是置换元素" class="headerlink" title="什么是置换元素"></a>什么是置换元素</h4><p><code>a) 置换元素：</code></p><p>浏览器根据元素的标签和属性，来决定元素的具体显示内容。</p><p>例如：浏览器会根据标签的src属性的 值来读取图片信息并显示出来，而如果查看html代码，则看不到图片的实际内容；标签的type属性来决定是显示输入 框，还是单选按钮等。 html中 的、、、</p><p><code>b) 不可替换元素：</code></p><p>html 的大多数元素是不可替换元素，即其内容直接表现给用户端（如浏览器）。</p><p>例如： label中的内容 标签是一个非置换元素，文字label中的内容”将全被显示。</p><p><a name="a6bda5e5"></a></p><h4 id="如果需要手写动画-最小时间间隔是多少"><a href="#如果需要手写动画-最小时间间隔是多少" class="headerlink" title="如果需要手写动画, 最小时间间隔是多少?"></a>如果需要手写动画, 最小时间间隔是多少?</h4><p>多数的显示器是60hz, 1s刷新60次, 理论上最小间隔为1/60 = 16.7ms<br>但是实际上留给浏览器渲染的时间还是保持在10ms为好</p><p><a name="49e659cc"></a></p><h4 id="单冒号和-双冒号什么区别"><a href="#单冒号和-双冒号什么区别" class="headerlink" title=":单冒号和::双冒号什么区别"></a>:单冒号和::双冒号什么区别</h4><p>双冒号::是创建伪元素</p><blockquote><p>::after<br>::before</p></blockquote><p>:单冒号是伪类, 也就是说不加伪元素</p><blockquote><p>:hover<br>:link</p></blockquote><p><a name="11820e83"></a></p><h4 id="nth-of-type和nth-child的区别"><a href="#nth-of-type和nth-child的区别" class="headerlink" title="nth-of-type和nth-child的区别"></a>nth-of-type和nth-child的区别</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566371544557-c908722e-492b-46f4-950e-26355e6fccdc.png#align=left&display=inline&height=334&originHeight=617&originWidth=947&size=0&status=done&width=513" alt><br>如果有参数的话比如3n+1，就迭代n从0开始找元素<br><a name="csuvz"></a></p><h4 id="“resetting”-和-“normalizing”-CSS-之间的区别"><a href="#“resetting”-和-“normalizing”-CSS-之间的区别" class="headerlink" title="“resetting” 和 “normalizing” CSS 之间的区别"></a>“resetting” 和 “normalizing” CSS 之间的区别</h4><p>normalizing更加优秀，</p><ul><li><code>reset</code>的缺点在于浏览器调试工具中大段大段的继承链, 样式调试复杂</li><li>但是normalizing可以保留有价值的部分默认值，同时修复了浏览器之间的css默认的不同<br><a name="AGKQz"></a><h4 id="层叠样式什么意思，优先级原理是什么，CSS怎么匹配选择器"><a href="#层叠样式什么意思，优先级原理是什么，CSS怎么匹配选择器" class="headerlink" title="层叠样式什么意思，优先级原理是什么，CSS怎么匹配选择器"></a>层叠样式什么意思，优先级原理是什么，CSS怎么匹配选择器</h4>层叠样式是CSS第一个字母Cascading，分为三层，行内（!important）、内联style和外部css文件<br>权重越高排的越前面，例如ID选择器100，属性选择器class和伪类为10，元素选择器和伪元素选择器1，通配符0<br>CSS选择器的解析是从右向左解析的。若从左向右的匹配，通常是到后面才发现不符合规则，需要进行回溯，会损失很多性能。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript要点</title>
      <link href="/2019/08/18/javascript-yao-dian/"/>
      <url>/2019/08/18/javascript-yao-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="ES6"></a></p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p><a name="f7fa5f4a"></a></p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>可以用export来对外暴露函数, 外部通过import来引入函数</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268377946-16c4192e-aaee-43fd-bab3-fb4b219edbf4.jpeg#align=left&display=inline&height=228&originHeight=228&originWidth=327&size=0&status=done&width=327" alt></p><p><a name="9db6aea8"></a></p><h4 id="简单介绍一下symbol"><a href="#简单介绍一下symbol" class="headerlink" title="简单介绍一下symbol"></a>简单介绍一下symbol</h4><p>主要是为了解决命名重复问题，可以在对象属性的时候用到，但是不会被枚举</p><blockquote><p>代表用给定名称作为唯一标识，这种类型的值可以这样创建，<code>let id=symbol(“id”)</code><br>Symbl确保唯一，<code>即使采用相同的名称，也会产生不同的值</code><br><code>Object.getOwnPropertySymbols(obj)</code>可以获得所有的symbol。<br>Symbol类型的key是不能通过<code>Object.keys()</code>或者<code>for...in</code>来枚举的</p></blockquote><p><a name="d86f8699"></a></p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>解决了this指向全局的问题, 这里改为了指向当前</p><p>也就是this指向的是当前环境</p><p>箭头函数没有自己的arguments对象，但是可以访问外围函数的arguments对象</p><p><a name="2b9d3d15"></a></p><h4 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h4><ol><li>里面的构造函数写在constructor里面</li><li>并且函数添加是用add(){}, 并没有function关键字</li><li>继承者用extends 父类来继承对象</li><li>构造函数要用到super()来引入继承的构造函数</li></ol><pre><code>class Monkeyi extends Animal {   constructor(type, name) {     super(type, name); // 继承父类     this.x = 2;   }   toString() {     return  &quot;monkey is&quot; `${this.type}` &quot;,name is &quot;`{ this.name}`;   } }</code></pre><p>map多了个set()和get()的方法,     set是使用add()来进行添加的</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566268376801-9fcc741d-e4e9-4144-b4e3-f31d8ed47a00.png#align=left&display=inline&height=504&originHeight=504&originWidth=537&size=0&status=done&width=537" alt></p><p>他们两个的方法其实都是差不多的, 都是迭代的作用</p><p>map的key可以是任意数据类型, 包括对象</p><p>set类似数组, 但是不允许有重复的元素出现</p><p><a name="eb9715b4"></a></p><h4 id="set和map"><a href="#set和map" class="headerlink" title="set和map"></a>set和map</h4><p>Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><p>promise.all等待传入的请求都完成后才进行下一步,    <strong>成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值</strong></p><p><a name="80f25fb1"></a></p><h4 id="说下promise-all和promise-race"><a href="#说下promise-all和promise-race" class="headerlink" title="说下promise.all和promise.race"></a>说下promise.all和promise.race</h4><p>promise.all等待传入的请求都完成后才进行下一步,    <strong>成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值</strong></p><p>Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><p><a name="eb9715b4-1"></a></p><h4 id="set和map-1"><a href="#set和map-1" class="headerlink" title="set和map"></a>set和map</h4><p>set类似数组, 但是不允许有重复的元素出现</p><p>map的key可以是任意数据类型, 包括对象</p><p>他们两个的方法其实都是差不多的, 都是迭代的作用</p><p><img src="%5Bhttp://upload-images.jianshu.io/upload_images/10750013-295c87ec6115e87b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240%5D(http://upload-images.jianshu.io/upload_images/10750013-295c87ec6115e87b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"> “”屏幕截图.png””)</p><p>map多了个set()和get()的方法,     set是使用add()来进行添加的</p><p><a name="8d1a8692"></a></p><h1 id="严格模式有哪些限制"><a href="#严格模式有哪些限制" class="headerlink" title="严格模式有哪些限制"></a>严格模式有哪些限制</h1><ol><li><p>最明显的就是， 所有变量前面都要用<code>var / let</code>定义</p></li><li><p><code>禁制this</code>指向全局对象, <code>严格模式下的this值就是undefined</code></p></li><li><p><code>禁用了with()</code>语句, 很正常, with本来性能就不好</p></li><li><p>参数和属性不可以重名</p></li><li><p>禁制用八进制表示法</p></li><li><p><code>函数带有申明的就必须写在顶层</code></p></li><li><p>现在的arguments只能用来表示传入的参数, 是不可写的, 并且不可以使用<code>arguments.callee()</code><br><br>这也是很正常的, arguments.callee()用于匿名函数调用自身本身就会有很多问题, 比如递归调用的时候回获取到不同的this, <code>arguments.callee.caller</code>也被废弃了<br><br><code>解决方法</code>用命名函数表达式就可以了</p></li><li><p><code>eval单独作用域</code>, 正常模式下不推荐使用eval, 就是因为其作用域很影响性能, 但是严格模式就很ok , eval的作用域是单独的, 和全局作用域还有局部作用域都无关</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var a = 2;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a 作用域只有在eval中才能访问</span></code></pre></li><li><p>禁制在函数内部遍历调用栈<br><br>functio.caller和function.arguments会报错</p></li><li><p>严格模式下无法删除变量, 只有在configurable设置为true的对象属性才可以被删除</p></li><li><p>对一个对象的只读属性进行赋值会报错</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> <span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> writable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>其他的就和上面比较类似, 就是<code>说了不可以删除, 那就是不可删除 , 说了是只读属性就不可以写入, 什么保留字啊我们在开发过程中没必要去触碰风险</code></p></li></ol><p><a name="03ca9c9b"></a></p><h1 id="JavaScript中垃圾回收机制"><a href="#JavaScript中垃圾回收机制" class="headerlink" title="JavaScript中垃圾回收机制"></a>JavaScript中垃圾回收机制</h1><ol><li>标记清除</li><li>引用计数法</li></ol><hr><p><code>标记清除</code></p><p>这是最常见的垃圾回收方式,      设置为null,    会被垃圾回收机制定时清除,    也可以强制清除</p><p><code>引用计数法</code></p><p>不是很好用, 因为会循环引用</p><p>用引用计数法会存在内存泄露，下面来看原因：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objA<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objB<span class="token punctuation">;</span>    objB<span class="token punctuation">.</span>anotherObject <span class="token operator">=</span> objA<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>特别是在DOM对象中，也容易存在这种问题：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> element<span class="token operator">=</span>document<span class="token punctuation">.</span>getElementById（’‘）；<span class="token keyword">var</span> myObj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span>element<span class="token operator">=</span>element<span class="token punctuation">;</span>element<span class="token punctuation">.</span>someObject<span class="token operator">=</span>myObj<span class="token punctuation">;</span></code></pre><p><a name="326d068e"></a></p><h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><p><code>所有对象都有自己的原型对象（prototype）原型链的尽头就是null。</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376621-7c086e84-dc9d-4231-9417-261406d79222.jpeg#align=left&display=inline&height=718&originHeight=718&originWidth=654&size=0&status=done&width=654" alt></p><p>为了解决<code>共享属性问题</code></p><p>同一个构造函数创建的<code>实例之间是无法共享属性的</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376689-c4e02ac6-5be4-4f2e-a4ae-01aae5a356d5.jpeg#align=left&display=inline&height=416&originHeight=416&originWidth=572&size=0&status=done&width=572" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376624-cfd9b604-d2fe-4354-8f2c-7c778d37b6af.jpeg#align=left&display=inline&height=139&originHeight=139&originWidth=520&size=0&status=done&width=520" alt></p><p>判断对象是不是另一个对象的原型</p><ul><li><code>instanceof</code>判断是不是原型的`实例``</li><li><code>isPrototypeOf() || Object.getPrototypeOf()</code>判断是不是原型</li><li><code>hasOwnProperty() || in</code>判断是不是<code>原型中的属性还是实例自己的属性</code></li></ul><p><code>_proto_</code>已废弃</p><blockquote><p>他是对象的一个属性<br>instance.constructor.prototype === instance.<em>proto</em><br>实例的构造者就是构造函数, 构造函数原型就是等于实例的原型</p></blockquote><p>constructor类似双向链表的front修改原型的时候也要修改constructor</p><p>prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。</p><p><code>constructor属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376730-477f44f6-1941-40e6-b073-7c0ba22cf629.jpeg#align=left&display=inline&height=305&originHeight=305&originWidth=754&size=0&status=done&width=754" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376665-eb6925ff-da31-4d3d-9bd4-0d3cd64fae52.jpeg#align=left&display=inline&height=584&originHeight=584&originWidth=907&size=0&status=done&width=907" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376700-1ab8fbfe-52ca-4045-b00c-a737b5ddd357.jpeg#align=left&display=inline&height=1080&originHeight=1080&originWidth=1478&size=0&status=done&width=1478" alt></p><p><a name="5ca0c95b"></a></p><h1 id="讲下js的继承"><a href="#讲下js的继承" class="headerlink" title="讲下js的继承"></a>讲下js的继承</h1><p><a name="43385c22"></a></p><h4 id="1-构造函数继承"><a href="#1-构造函数继承" class="headerlink" title="1. 构造函数继承"></a>1. 构造函数继承</h4><p>(<code>继承构造函数</code>), 也叫类抄写, 比如我们在考试, 你写了一个构造函数, 我要继承你的构造函数, 就在我的构造函数里面用call或者cpply抄写一份你的东西, <code>我给你题目你给我答案</code>, 当然我抄完后还可以在自己的构造函数的<code>选做题</code>里面放一些自己的东西</p><p>案例:    构建树节点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// apply</span><span class="token punctuation">}</span></code></pre><hr><p><a name="2f001441"></a></p><h4 id="2-原型链继承"><a href="#2-原型链继承" class="headerlink" title="2. 原型链继承"></a>2. 原型链继承</h4><p>也叫类继承(<code>也是继承构造函数</code>), 最简单的继承, 比如老大是原型, 你是二当家, 其他人都是小弟都叫实例<code>继承了二当家, 当然默认也是继承了老大</code>, 我们这个帮派一旦老大或者二当家有政策发布, 下面的小弟都要修改</p><p>这就是原型链继承,</p><p>缺点是, <code>上级改动, 下级都要跟着修改</code></p><pre class=" language-javascript"><code class="language-javascript">Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父类的实例作为子类的原型</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 手动指定constructor</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><a name="610db819"></a></p><h4 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h4><blockquote><p>部分引用构造,    部分用原型,    可以自定义私有属性</p></blockquote><p>(<code>继承构造函数</code>), 什么意思, 我们在构造函数基础的基础上再进行讲述</p><p>我还是要抄你试卷, 首先我还是要<code>全抄!!!</code>, 因为你是学霸</p><p>但是我不想只抄一遍, 你有些大题改了我也要知道, 所以你就把你的试卷分成两部分, 一部分是给我<code>给你题目你给我对于的答案, 这部分放在构造函数内</code>, 你可能要修改的部分改了要告诉我, 你就把答案放在你的<code>原型里面</code>你改了我也改</p><p>当然我也可以有自己的想法, 可以加一些自己的答案</p><p>缺点: 调用了两次父类构造函数, 耗费内存, 第一次是让你帮我做题, new一个你的构造函数返回给我, <code>目的是为了成为你的实例好去引用你的原型</code></p><blockquote><p>使用 new 操作符调用了一次构造函数<br>有方法避免多次调用直接去掉 new 操作符<br>写成 Child.prototype = Parent.prototype<br>但是这样并不好，虽然避免出现重复调用但导致修改子类 constructor 的时候父类也被修改了, 也就是<code>如果我再试卷上签了自己的名字</code>那么意味着你的原型的构造者不在是你的构造函数, 而是我的了</p></blockquote><p>这是组合式继承的唯一缺点<code>调用了两次父类构造函数, 生成了两份实例</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用一次父类构造函数, 生成一个实例</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 又调用一次父类构造函数, 生成一个实例</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child</code></pre><hr><p><a name="8701bc4b"></a></p><h4 id="4-原型式继承-继承对象-拷贝继承"><a href="#4-原型式继承-继承对象-拷贝继承" class="headerlink" title="4. 原型式继承(继承对象) 拷贝继承"></a>4. 原型式继承(<code>继承对象</code>) 拷贝继承</h4><p>用es5的object.create(对象)返回一个实例给我抄</p><p>原理是浅拷贝</p><p>我直接抄袭你的对象, 我不想改, 没有想法</p><p>抄袭对象的话不用签名的, 也就是不用constructor</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    Child<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 也可以用ES5的</span><span class="token keyword">var</span> Child <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><a name="4357f4e9"></a></p><h4 id="5-寄生式继承-继承对象"><a href="#5-寄生式继承-继承对象" class="headerlink" title="5. 寄生式继承(继承对象)"></a>5. 寄生式继承(<code>继承对象</code>)</h4><p><code>增强对象</code></p><p>原型式继承的基础上为子类增加属性和方法, 就是继承了对方也添加了自己的方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"增强了对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p><a name="4517e270"></a></p><h4 id="6-寄生组合式继承（用中介存储）完美"><a href="#6-寄生组合式继承（用中介存储）完美" class="headerlink" title="6. 寄生组合式继承（用中介存储）完美"></a>6. 寄生组合式继承（<code>用中介存储</code>）完美</h4><p>通过<code>寄生方式，砍掉父类的实例属性</code>，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><p><code>解决了之前组合继承的两次调用父类构造函数问题</code></p><p>那么第一次调用父类构造函数是不可避免的, 就是parent.call(this)这个是不可省略的</p><p>要精简的是组合式继承的第二次通过调用<code>new Parent()</code>想办法来解决这次的调用</p><p>之前说过不用new,改用parent.prototype来公用同一个原型是不合理的</p><p>因为如果我的原型的constructor指向了我自己的构造函就会导致原型的constructor也会改成我的构造函数, 就不合理了, 因为原型的构造函数还是要指向我的父类的</p><p>那么就可以用到<code>原型式继承</code>的解决方案来解决,</p><blockquote><p>即在原型中间新建一个空的构造函数作为中介, 然后如果我执行<strong>child.prototype.constructor=child就不会影响parent.constructor指向我</strong>会变成空构造函数的构造者变成了我</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376655-4ecb5792-55e3-4b91-bcba-e8df1e67a8fb.jpeg#align=left&display=inline&height=385&originHeight=385&originWidth=1019&size=0&status=done&width=1019" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一: </span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> fuc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新建一个中介空function</span>fuc<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用的是空构造函数,就是这里优化了组合继承</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二: </span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> Child  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="a7d2846b"></a></p><h4 id="7-es6的calss继承-推荐使用"><a href="#7-es6的calss继承-推荐使用" class="headerlink" title="7. es6的calss继承(推荐使用)"></a>7. es6的calss继承(<code>推荐使用</code>)</h4><p>优秀的写法,     推荐使用,     语法很清晰</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 该属性在构造函数上，不共享</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends    <span class="token punctuation">}</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 该方法在原型上，共享</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>share <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 原型上的属性，共享</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 继承父类构造函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="530e419b"></a></p><h1 id="闭包的原理-作用-缺点"><a href="#闭包的原理-作用-缺点" class="headerlink" title="闭包的原理, 作用, 缺点"></a>闭包的原理, 作用, 缺点</h1><p><code>（1）什么是闭包：</code></p><p>闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。当在一个函数内定义另外一个函数就会产生闭包。</p><p><code>（2）为什么要用：</code></p><ul><li><p><code>匿名自执行函数：</code>有的函数只需要执行一次，其内部变量无需维护，可以用闭包。</p></li><li><p><code>结果缓存：保存变量</code>我们将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。</p></li><li><p><code>封装：实现类和继承等。</code></p><p>  <code>(3) 缺点</code></p></li></ul><p>闭包会常驻内存, 会增大内存使用, 使用不当就会有内存泄漏</p><p><a name="3019f04b"></a></p><h1 id="讲一下ajax原理和流程"><a href="#讲一下ajax原理和流程" class="headerlink" title="讲一下ajax原理和流程"></a>讲一下ajax原理和流程</h1><p>优势主要集中在:</p><ul><li>减轻了服务器压力</li><li>无刷新更新网页数据, 优化了用户体验</li></ul><p>劣势</p><ul><li>搜索引擎支持较弱</li><li>不安全, 暴露了服务器更多接口</li><li>不支持浏览器前进,后退功能, 网页状态无法保留 可以通过前端路由进行解决</li></ul><p>原理就是在用户和服务器之间加了一个中间层, 通过XMLHTTPRequest()对象来向服务器发送异步请求<br>其中最关键的一就是从服务器中获得请求数据，通过监听readystatechange事件，通过这个实例 的readyState属性来判断这个ajax请求状态，其中分为0，1，2，3，4这四种状态</p><ol><li><code>未初始化</code></li><li><code>载入/正在发送请求</code></li><li><code>载入完成/数据接收</code></li><li><code>交互/解析数据</code></li><li><code>接收数据完成</code></li></ol><p>流程就是</p><ol><li>先建立XMLHTTPRequest</li><li>设定http请求方法</li><li>设定状态变化函数</li><li>发送http请求获取异步返回的数据</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376697-247d251e-aa5c-4092-8e44-933901b52318.jpeg#align=left&display=inline&height=351&originHeight=351&originWidth=797&size=0&status=done&width=797" alt><br><a name="9vwme"></a></p><h4 id="AJAX-的取消"><a href="#AJAX-的取消" class="headerlink" title="AJAX 的取消"></a>AJAX 的取消</h4><p>原生的XMLHttpRequest的对象, 直接 xhr.abort() 即可 同时可以监听onabort事件来处理abort之后要做的工作。中断请求之后可能服务器端已经对该请求做出了相应的处理并给出了响应, 只不过浏览器不接收这个响应罢了<br>如果使用fetch， 暂时无法中断请求</p><p><a name="d6d4daad"></a></p><h4 id="fetch和ajax-的主要区别"><a href="#fetch和ajax-的主要区别" class="headerlink" title="fetch和ajax 的主要区别"></a>fetch和ajax 的主要区别</h4><p>fetch是优化版本的ajax, 其实ajax写法比较麻烦,暴露了太多fetch就不用管那么多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Oops, error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>fetch 是全局量 window 的一个方法，它的主要特点有：<br>1、第一个参数是URL:<br>2、第二个是可选参数，可以控制不同配置的 init 对象<br>3、使用了 JavaScript Promises 来处理结果/回调:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>  credentials<span class="token punctuation">:</span> ’same<span class="token operator">-</span>origin'<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>1、fetch()返回的promise将不会拒绝http的错误状态，即使响应是一个HTTP 404或者500<br>2、在默认情况下 <code>fetch不会接受或者发送cookies</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/news'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="1c3afb0c"></a></p><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>禁止Ajax发起跨域请求， 实际上请求会发起， 只不过返回响应会被浏览器拦截。Ajax跨域请求不能携带本网站Cookie<br><a name="41de7755"></a></p><h3 id="JSONP跨域（单向跨域）"><a href="#JSONP跨域（单向跨域）" class="headerlink" title="JSONP跨域（单向跨域）"></a>JSONP跨域（单向跨域）</h3><ol><li><code>jsonp</code>可以解决老版本浏览器跨域访问的问题, 但是只能用<code>get</code>不能用<code>post</code></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">jsonpCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'获得 X 数据:'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:3000?callback=jsonpCallback"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><a name="8ddcadf9"></a></p><h4 id="JSONP跨域原理"><a href="#JSONP跨域原理" class="headerlink" title="JSONP跨域原理"></a>JSONP跨域原理</h4><p>在页面上有三种资源是可以与页面本身不同源的:</p><ol><li>script</li><li>css</li><li>img</li></ol><blockquote><p>jsonp就是利用了<script>标签可以链接到不同源的js脚本，来到达跨域目的</p></blockquote><p>当链接的资源到达浏览器时，浏览器会根据他们的类型来采取不同的处理方式，比如，如果是css文件，则会进行对页面 repaint，如果是img 则会将图片渲染出来，如果是script 脚本，则会进行执行，比如我们在页面引入了jquery库，为什么就可以使用 $ 了呢？就是因为 jquery 库被浏览器执行之后，会给全局对象window增加一个属性：$ ，所以我们才能使用 $ 来进行各种处理。（另外为什么要一般要加css放在头部，而js脚本放在body尾部呢，就是为了减少repaint的次数，另外因为js引擎是单线程执行，如果将js脚本放在头部，那么在js引擎在执行js代码时，会造成页面暂停。）</p><p>参考: <a href="https://www.cnblogs.com/digdeep/p/4170059.html">https://www.cnblogs.com/digdeep/p/4170059.html</a></p><blockquote><p>jsonp 的基本原理，利用script标签的特性，<code>将数据使用json格式用一个函数包裹起来，然后在进行访问的页面中定义一个相同函数名的函数</code>，因为 script 标签src引用的js脚本到达浏览器时会执行，而<code>我们有定义了一个同名的函数，所以json格式的数据，就做完参数传递给了我们定义的同名函数了</code>。这样就完成了跨域数据交换。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/html5/jsonp_data.js"</span><span class="token punctuation">;</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对方也设置同样的callbackFun名字就可以了</span><span class="token keyword">function</span> <span class="token function">callbackFun</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 其访问的8080端口的html5项目中的jsonp_data.js代码如下：</span><span class="token function">callbackFun</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"yuanfang"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="b816f331"></a></p><h3 id="CORS跨域（单向）"><a href="#CORS跨域（单向）" class="headerlink" title="CORS跨域（单向）"></a>CORS跨域（单向）</h3><p>与JSONP比较,    不同是:</p><ol><li>不支持老浏览器</li><li>但是支持<code>Get/Post</code></li></ol><p><code>cors</code>实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨域通信。<code>是最常用的跨域方式, 支持post</code>这个会经常用到,例如自己前台发送信息到后台就需要这样来做<br />前端发送正常的ajax请求<br />关键是后台处理, 需要加上<code>允许请求跨域</code><br /><code>access-control-allow-origin</code>该值要与请求头中 Origin 一致才能生效，否则将跨域失败。<br /><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376668-a55c7bb9-9700-4239-a0d3-437aadef7a9e.jpeg#align=left&display=inline&height=111&originHeight=111&originWidth=611&size=0&status=done&width=611" alt=""></p><p><a name="216b2e2e"></a></p><h3 id="服务端代理跨域（单向跨域）"><a href="#服务端代理跨域（单向跨域）" class="headerlink" title="服务端代理跨域（单向跨域）"></a>服务端代理跨域（单向跨域）</h3><p><code>服务端代理</code>就是把跨域请求交给服务器然后服务器帮忙代理<br />什么意思<code>其实这里我也有用到过</code>就是获取邀请的api时候代理发送请求然后返回结果给前端<br />前端浏览器虽然限制了跨域,但是后台服务器没有限制跨域<br />可以先发送到自己本机的服务器上然后让自己的服务器代理获取其他页面的信息<br />获取到后再转发回来</p><p><a name="1b6ffe7f"></a></p><h3 id="双向跨域（主要用于多窗口间的信息互相传递）"><a href="#双向跨域（主要用于多窗口间的信息互相传递）" class="headerlink" title="双向跨域（主要用于多窗口间的信息互相传递）"></a>双向跨域（主要用于多窗口间的信息互相传递）</h3><p>参考：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E7%BD%91%E7%BB%9C.md">链接</a><br><a name="e328bf7f"></a></p><h4 id="1-location-hash："><a href="#1-location-hash：" class="headerlink" title="1. location.hash："></a>1. location.hash：</h4><p>主要原理就是利用iframe窗体可以设置父窗体的location.hash. 来自跨域的服务器可以通弄过页面B中的 parent.location.hash 来向A页面发送信息.<br />在 url 中，<a href="http://www.baidu.com#helloworld">http://www.baidu.com#helloworld</a> 的 "#helloworld" 就是 location.hash，改变 hash 值不会导致页面刷新，所以可以利用 hash 值来进行数据的传递，当然数据量是有限的。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// ------------------- http://domain1.cn/index.html -----------------------</span>  <span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"http://domain2.cn/index.html"</span> <span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>  <span class="token comment" spellcheck="true">// ------------------- http://domain2.cn/index.html -----------------------</span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">"wangbadan"</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 页面成功加载后可以发现 `domain1.cn/index.html`的地址变成了</span>  <span class="token comment" spellcheck="true">// http://www.domain1.cn/index.html#wangbadan</span></code></pre><p>data.html 收到消息后通过<code>parent.location.hash</code>值来修改 index.html 的 hash 值，从而达到数据传递。</p><pre class=" language-html"><code class="language-html">// hash/server/data.html 对应 localhost:8081/data.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">switch</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"#data"</span><span class="token punctuation">:</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token string">"data.html 的数据"</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ie, chrome 下的安全机制无法修改 parent.location.hash</span>      <span class="token comment" spellcheck="true">// 所以要利用一个中间的代理 iframe </span>      <span class="token keyword">var</span> ifrproxy <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ifrproxy<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>      ifrproxy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/proxy.html#'</span> <span class="token operator">+</span> data<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 该文件在 client 域名的域下</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ifrproxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>由于两个页面不在同一个域下 IE、Chrome 不允许修改 parent.location.hash 的值，所以要借助于 localhost:8080 域名下的一个代理 iframe 的 proxy.html 页面</p><pre class=" language-html"><code class="language-html">// hash/client/proxy.html 对应 localhost:8080/proxy.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span>self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>当然这种方法存在着诸多的缺点：</p><ul><li>数据直接暴露在了 url 中</li><li>数据容量和类型都有限等等</li></ul><p><a name="d9080e2f"></a></p><h4 id="2-window-name"><a href="#2-window-name" class="headerlink" title="2. window.name:"></a>2. window.name:</h4><p>也能实现完全跨域, 利用的是同一个窗口的window.name即使载入新的网址也不发生变化这个特征, 支持的name值最长可以为2M.<br />window.name（一般在 js 代码里出现）的值不是一个普通的全局变量，而是当前窗口的名字，这里要注意的是每个 iframe 都有包裹它的 window，而这个 window 是 top window 的子窗口，而它自然也有 window.name 的属性，window.name 属性的神奇之处在于 name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）。<br />前端逻辑：</p><pre class=" language-html"><code class="language-html">// name/client/index.html 对应 localhost:8080/index.html <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ifr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ifr<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:8081/data.html"</span><span class="token punctuation">;</span>  ifr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span>  ifr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 必须确保iframe页面已经加载好, 也就是数据已经被子窗口读取到</span>    ifr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> ifr<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到数据:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ifr<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:8080/proxy.html"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>数据页面：</p><pre class=" language-html"><code class="language-html">// name/server/data.html 对应 localhost:8081/data.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"data.html 的数据!"</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>localhost:8080index.html 在请求数据端 localhost:8081/data.html 时，我们可以在该页面新建一个 iframe，该 iframe 的 src 指向数据端地址(利用 iframe 标签的跨域能力)，数据端文件设置好 window.name 的值。</p><p><a name="006ec476"></a></p><h4 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3. postMessage"></a>3. postMessage</h4><p>postMessage 是 HTML5 新增加的一项功能，跨文档消息传输(Cross Document Messaging)，目前：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 都支持这项功能，使用起来也特别简单。<br />前端逻辑：</p><pre class=" language-html"><code class="language-html">// postMessage/client/index.html 对应 localhost:8080/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8081/data.html<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> targetOrigin <span class="token operator">=</span> <span class="token string">'http://localhost:8081'</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'index.html 的 data!'</span><span class="token punctuation">,</span> targetOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index.html 接收到的消息:'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>数据端逻辑：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// postMessage/server/data.html 对应 localhost:8081/data.html</span><span class="token operator">&lt;</span>script<span class="token operator">></span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>source <span class="token operator">!=</span> window<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data.html 接收到的消息:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'data.html 的 data!'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><a name="2bf03b0d"></a></p><h4 id="4-document-domain"><a href="#4-document-domain" class="headerlink" title="4. document.domain"></a>4. document.domain</h4><p>对于主域相同而子域不同的情况下，可以通过设置 document.domain 的办法来解决，具体做法是可以在 <a href="http://www.example.com/index.html">http://www.example.com/index.html</a> 和 <a href="http://sub.example.com/data.html">http://sub.example.com/data.html</a> 两个文件分别加上 document.domain = "example.com" 然后通过 index.html 文件创建一个 iframe，去控制 iframe 的 window，从而进行交互，当然这种方法只能解决主域相同而二级域名不同的情况</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ------------------- http://domain.cn/A.html -----------------------</span><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"http://domain.cn/B.html"</span> onload<span class="token operator">=</span><span class="token string">"test()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'domain.cn'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置成主域</span>  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// contentWindow 可取得子窗口的 window 对象</span>    <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'￼iframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">// ------------------- http://domain.cn/B.html -----------------------</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//在iframe载入这个页面也设置document.domain, 两者域名必须一致</span>    document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'domain.cn'</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token string">"hhhh"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><a name="e317aee4"></a></p><h1 id="讲一下事件代理-事件委托"><a href="#讲一下事件代理-事件委托" class="headerlink" title="讲一下事件代理(事件委托)"></a>讲一下事件代理(事件委托)</h1><p>事件代理是JavaScript常用的绑定事件技巧把原本要处理的事情委托给父元素</p><p><code>利用的是DOM元素事件冒泡</code></p><p><code>可以提高性能, 节省内存占用, 减少事件注册</code></p><blockquote><p>例如:<br>例如有一千多个li元素要判断点击,    就应该把点击事件委托给父元素,    当点击到的时候再去判断具体的是点到哪个, 不然就很耗性能<br><code>这里用到事件捕获</code>:    父元素捕获子元素target为目标</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376743-35edcbcb-ef1b-49ab-9fd2-2831c0a8f8be.jpeg#align=left&display=inline&height=828&originHeight=828&originWidth=1165&size=0&status=done&width=1165" alt=""></p><p>当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，</p><p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源<code>通过target来判断点击到的是哪一个li</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376683-c6f16d46-f4eb-4271-9d33-4185769aedfc.jpeg#align=left&display=inline&height=174&originHeight=174&originWidth=380&size=0&status=done&width=380" alt=""></p><p><a name="b7d1768f"></a></p><h4 id="JavaScript-的事件流"><a href="#JavaScript-的事件流" class="headerlink" title="JavaScript 的事件流"></a>JavaScript 的事件流</h4><p>JavaScript事件流主要有冒泡事件和捕获事件<br />DOM事件流同时支持者两种事件捕获<br /><code>现在统一标准是先捕获再冒泡</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376695-a6a94105-cf66-4234-954c-bb0f02f559ce.jpeg#align=left&display=inline&height=280&originHeight=280&originWidth=382&size=0&status=done&width=382" alt=""></p><p>addEventListener有三个参数：<code>第三个参数就是设定为事件捕获还是冒泡</code></p><p>true为事件捕获</p><p>false为事件冒泡</p><blockquote><p>element.addEventListener(event, function, useCapture)<br>例如:</p></blockquote><pre class=" language-javascript"><code class="language-javascript">Button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><a name="bf0d2ab9"></a></p><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>比如子元素点击了, 没有触发点击事件的话就会冒泡到上一层父元素触发其点击事件</p><p><code>阻止事件冒泡使用e.stopPropagation()ie下使用cancelBubble = true</code></p><p><a name="9124a7c9"></a></p><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><p>是从上往下层捕获事件的, 父元素先触发子元素后触发</p><p><code>阻止事件捕获使用e.preventDefault(), ie下设置window.event.returnValue = false</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268376717-a781ce16-19c5-4134-8f28-9d96fb60dc39.jpeg#align=left&display=inline&height=479&originHeight=479&originWidth=1127&size=0&status=done&width=1127" alt=""></p><p><a name="2ddc7254"></a></p><h1 id="为什么JavaScript-是单线程"><a href="#为什么JavaScript-是单线程" class="headerlink" title="为什么JavaScript 是单线程"></a>为什么JavaScript 是单线程</h1><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，<code>JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。</code>比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><p><a name="15d5d41a"></a></p><h1 id="JavaScript-设计模式"><a href="#JavaScript-设计模式" class="headerlink" title="JavaScript 设计模式"></a>JavaScript 设计模式</h1><p><a href="https://www.cnblogs.com/wuguanglin/p/JavaScriptPattern.html">https://www.cnblogs.com/wuguanglin/p/JavaScriptPattern.html</a></p><p><a name="e146dbe8"></a></p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>就是内存中只有一个实例，系统判断是否已经有了这个单例，没有就创建，有就不创建<br />应用场景有：全局缓存, 弹窗</p><p><a name="7f10b11f"></a></p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>根据不同参数可以命中不同的策略，这些策略往往通过函数进行封装返回，类似vue里面的计算属性一样</p><p><a name="eb1dfda7"></a></p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式经常用在不方便直接操作对象的时候使用, 或者说需要第三方来操作这个对象更好的情况下就叫代理模式</p><p><a name="de2a2941"></a></p><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p><code>主要是为了遍历对象元素,但是不暴露对象内部</code><br />提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示把在元素之间游走的责任交给迭代器，而不是聚合对象</p><p>通常使用在</p><p>1、访问一个聚合对象的内容而无须暴露它的内部表示。</p><p>2、需要为聚合对象提供多种遍历方式。</p><p>3、为遍历不同的聚合结构提供一个统一的接口。</p><p><a name="60bffc96"></a></p><h4 id="观察者模式-发布订阅"><a href="#观察者模式-发布订阅" class="headerlink" title="观察者模式(发布订阅)"></a>观察者模式(发布订阅)</h4><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新<br />就是vue原理也是通过发布订阅模式</p><p>通过object.defineProperty定义一个更新方法, 然后把那些需要被监测更新的加入到订阅中去, 一更新就触发自己的update</p><p>应用场景:<br />一个对象必须通知其他对象，而并不知道这些对象是谁。</p><p><a name="a5c7aeff"></a></p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化</p><p>其实就是把对一个对象产生的命令操作解耦出来<br />通过调用者调用接受者执行命令，顺序：调用者→接受者→命令</p><p><a name="e546bc3d"></a></p><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p><code>一致性对待</code>就是讲对象表现为<code>树形结构来表达整体与部分关系(时候层次结构)</code><br />组合模式使得用户对单个对象和组合对象的使用具有一致性,也就是说<code>下一层操作需要统一对待的时候</code><br />扫描文件夹时，文件夹下面可以为另一个文件夹也可以为文件，我们希望统一对待这些文件夹和文件，这种情形适合使用组合模式。</p><p>使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理</p><p><a name="3d74cb5f"></a></p><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>定义：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br /><code>其实就是把一些通用的方法写在父类上</code>然后子类自己定义自己的方法</p><p>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。</p><p>使用场景：</p><p>1、有多个子类共有的方法，且逻辑相同。</p><p>2、重要的、复杂的方法，可以考虑作为模板方法。</p><p><a name="3c737b3f"></a></p><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>享元模式<code>共享元素</code>是一种优化程序性能的模式，本质为减少对象创建的个数。<br /><code>其实就是如果内存中有,那就不用重复创建</code><br />主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<br />如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><p>关键代码：用 hash对象存储这些对象。<br />使用场景：</p><p>1、系统有大量相似对象。</p><p>2、需要缓冲池的场景。</p><p><a name="6d4a95b9"></a></p><h4 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h4><p>通过请求第一个条件，会持续执行后续的条件，直到返回结果为止<br /><code>主要是对if-else进行优化, 分清各自</code><br />定义：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p><a name="8080e510"></a></p><h4 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566268377325-37139e39-0fc1-4617-b106-a6f44fc6eaab.png#align=left&display=inline&height=394&originHeight=394&originWidth=380&size=0&status=done&width=380" alt=""></p><p>对象和对象之间借助第三方中介者进行通信。<br /><code>是网状</code></p><p>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br />使用场景：</p><p>1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。</p><p>2、想通过一个中间类来封装多个类中的行为，<code>而又不想生成太多的子类。</code></p><p><a name="815e3853"></a></p><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>定义：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><p><a name="5ba313f4"></a></p><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>将事物内部的每个状态分别封装成类，内部状态改变会产生不同行为。</p><p><code>主要解决：</code>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><p><code>何时使用：</code>代码中包含大量与对象状态有关的条件语句。</p><p><code>如何解决：</code>将各种具体的状态类抽象出来。<br /><code>使用场景：</code></p><p>1、行为随状态改变而改变的场景。</p><p>2、条件、分支语句的代替者。</p><p><a name="0afd573a"></a></p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p><p>注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。<br />目的是<code>将一个类的接口转换成客户希望的另外一个接口</code></p><p>关键代码：<code>适配器继承或依赖已有的对象，实现想要的目标接口。</code></p><p><a name="d79eddcf"></a></p><h4 id="构造函数模式化"><a href="#构造函数模式化" class="headerlink" title="构造函数模式化"></a>构造函数模式化</h4><p>简单地说就是, <code>大家都买了同样一部手机, 但是每个人可以选择在自己手机上去安装私人app</code></p><p>解决重复实例化问题, 直接把属性和方法赋值给了实例对象</p><p><a name="b98e9d7c"></a></p><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>同样是一个工厂, 但是我可以做衣服和鞋子, 我只要告诉工厂我要什么就可以了, 工厂根据客户的不同需求已经封装好了不同对应的方法, 经常用到switch判断</p><p><code>工厂封装了不同事情的细节, 可以做多件事情, 用户只要告诉工厂要的需求即可</code></p><p><a name="36679427"></a></p><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>就是按照框架把流程性东西一步步东西封装到同一个函数中去, 调用者不需要知道该函数的细节, 直接调用就可以了</p><p><code>目的是为了做一件事情, 不过是细节被封装了</code></p></script></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript小知识点</title>
      <link href="/2019/08/18/javascript-xiao-zhi-shi-dian/"/>
      <url>/2019/08/18/javascript-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="UCOny"></a></p><h1 id="JavaScript-堆和栈有哪些"><a href="#JavaScript-堆和栈有哪些" class="headerlink" title="JavaScript 堆和栈有哪些"></a>JavaScript 堆和栈有哪些</h1><ul><li>栈(stack)：栈会自动分配内存空间，会自动释放，存放基本类型，简单的数据段，占据固定大小的空间。（<code>基本类型：</code>String，Number，Boolean，Null，Undefined）<code>速度快</code></li><li>堆(heap)：<code>动态分配的内存，大小不定也不会自动释放</code>，存放引用类型，指那些可能由多个值构成的对象，保存在堆内存中，包含引用类型的变量，实际上保存的不是变量本身，而是指向该对象的<code>指针</code>。（<code>引用类型：</code>Function，Array，Object）<br><br><code>可以重复引用</code><br><a name="7HEma"></a><h1 id="谈谈对this的理解"><a href="#谈谈对this的理解" class="headerlink" title="谈谈对this的理解"></a>谈谈对this的理解</h1>this总是指向函数的调用者<br>如果有new 关键字,     this指向new出来的那个对象<br>在事件中this指向触发这个事件的对象<br><code>在函数内部的this就是指向函数本身</code><br><code>解决方法就是</code>在外面先用一个变量保存捕获this<br><a name="87iaM"></a><h1 id="call-bind-apply"><a href="#call-bind-apply" class="headerlink" title="call/bind/apply"></a>call/bind/apply</h1><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566876955137-f32df34e-417b-49e1-ac1e-2da20d4573be.png#align=left&display=inline&height=254&originHeight=720&originWidth=1272&size=0&status=done&width=449" alt><br>bind()方法作用主要是<code>把函数绑定到对象身上</code><br>例如：f.bind(obj)，实际上可以理解为obj.f()，这时f函数体内的this自然指向的是obj；<br>绑定了,    可以理解为,这个参数被我占用了,之后一直都是我的,    例如:<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>var func = add.bind(undefined, 100);//给add()传了第一个参数a<br>func(1, 2);//103，继续传入b和c</p><p>var func2 = func.bind(undefined, 200);//给func2传入第一个参数，也就是b，此前func已有参数a=100<br>func2(10);//310,继续传入c，100+200+10</p><pre><code>通过new的方式创建一个对象，bind()函数在this层面上并不起作用，但是需要注意在参数层面上仍起作用，如下：```javascriptfunction foo(c) {    this.b = 100;    console.log(this.a);    console.log(c);    return this.a;}var func =  foo.bind({a:1},20);new func();//undefined 20，通过new创建对象func，bind绑定的c依旧起作用</code></pre><p><a name="cdn0U"></a></p><h1 id="load事件优缺点和代替品"><a href="#load事件优缺点和代替品" class="headerlink" title="load事件优缺点和代替品"></a>load事件优缺点和代替品</h1><ul><li><p>load 触发比较慢, 需要等DOM以及相关资源全部加载完成之后才触发,  document.body.onload 或者 window.onload 来绑定, 多个函数, 可以使用 addEventListener(‘load’, listener)</p></li><li><p>DOMContentLoaded 的触发无需等待样式表，图片等多媒体资源以及iframe等子框架的加载，可以使用document.addEventListener来增加监听器<br><a name="Em2XK"></a></p><h1 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h1></li><li><p>let可以定义块级作用域</p></li><li><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br><a name="jTkoi"></a></p><h1 id="web-work"><a href="#web-work" class="headerlink" title="web work"></a>web work</h1><p><code>也是异步处理</code><br>Worker对象往js文件发送消息，js文件内部的处理逻辑，处理完毕后，再发送消息回到当前页面，纯异步方式，不影响当前主页面渲染。</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//创建线程 work对象</span>        <span class="token keyword">var</span> work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"work.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//发送消息</span>        work<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听消息: 返回的消息</span>        work<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// work.js</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从1加到num</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="IhrfP"></a></p><h1 id="navigator-location"><a href="#navigator-location" class="headerlink" title="navigator  location"></a>navigator  location</h1><p>window.navigate 与 window.location.href 都是实现页面的链接跳转<br>window.navigate(‘页面链接地址’) 这个方法是只针对IE,    忘记他</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> userAgentInfo <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>   <span class="token keyword">var</span> Agents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Android"</span><span class="token punctuation">,</span> <span class="token string">"iPhone"</span><span class="token punctuation">,</span>      <span class="token string">"SymbianOS"</span><span class="token punctuation">,</span> <span class="token string">"Windows Phone"</span><span class="token punctuation">,</span>      <span class="token string">"iPad"</span><span class="token punctuation">,</span> <span class="token string">"iPod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>Navigator 对象包含有关浏览器的信息</p><ul><li>window.location.href 返回当前页面的 href (URL)</li><li>window.location.hostname 返回 web 主机的域名</li><li>window.location.pathname 返回当前页面的路径或文件名</li><li>window.location.protocol 返回使用的 web 协议（http: 或 https:）</li><li>window.location.assign 加载新文档<br><a name="YL3uR"></a><h1 id="为什么会在低端机上出现动画不流畅抖动等问题"><a href="#为什么会在低端机上出现动画不流畅抖动等问题" class="headerlink" title="为什么会在低端机上出现动画不流畅抖动等问题"></a>为什么会在低端机上出现动画不流畅抖动等问题</h1><code>屏幕分辨率问题</code><br>屏幕间隔不一定会和设置的步调相同,    使用<code>requestanimationframe</code>可以解决问题<br>setTimeout和setInterval的问题是，它们都不精确。它们的内在<a href="http://www.cnblogs.com/xiaohuochai/p/5773183.html#anchor3" target="_blank" rel="noopener">运行机制</a>决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行<code>放入到异步队列里面只有主线程完成后才去执行异步队列,    导致执行时间不确定</code><br>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果<blockquote><p>requestAnimationFrame会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率</p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="Wmvf8"></a></p><h1 id="Dom0-dom2-dom3"><a href="#Dom0-dom2-dom3" class="headerlink" title="Dom0 dom2 dom3"></a>Dom0 dom2 dom3</h1><ol><li>dom0 事件就是直接通过 onclick 绑定到 html上的事件,     清理dom0 事件时，只需给该事件赋值为 null</li><li>dom2 事件是通过 addEventListener 绑定的事件,  按照绑定顺序执行,  清除 dom2 事件时，使用 removeEventListener</li><li>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型, focus之类的<br><a name="NzfFn"></a><h1 id="Object-create实现原理"><a href="#Object-create实现原理" class="headerlink" title="Object.create实现原理"></a>Object.create实现原理</h1>其实就是新建一个空函数<br>把传入对象作为新函数的原型并返回它, 来处理<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：将传入的对象作为原型</span><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><a name="ufOak"></a><h1 id="mouseover和mouseenter的区别"><a href="#mouseover和mouseenter的区别" class="headerlink" title="mouseover和mouseenter的区别"></a>mouseover和mouseenter的区别</h1><code>mouseover：</code>当鼠标移入元素或<code>其子元素都会触发事件，所以有一个重复触发，冒泡的过程</code>。对应的移除事件是<code>mouseout</code><br><code>mouseenter</code>：当鼠标移入元素本身（<code>不包含元素的子元素</code>）会触发事件，也就是<code>不会冒泡</code>，对应的移除事件是<code>mouseleave</code><br><a name="7pwuv"></a><h1 id="offWidth-clientWidth-scrollwidth有什么区别"><a href="#offWidth-clientWidth-scrollwidth有什么区别" class="headerlink" title="offWidth/clientWidth/scrollwidth有什么区别"></a>offWidth/clientWidth/scrollwidth有什么区别</h1>scrollWidth/scrollHeight，clientWidth/clientHeight内两层，offWidth/offHeight内三层</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268446923-9b9052cd-d21b-476a-9efc-9d91221169c6.jpeg#align=left&display=inline&height=162&originHeight=353&originWidth=570&size=0&status=done&width=262" alt><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268447033-0020bdbc-8d78-41ee-8344-7487ea07879d.jpeg#align=left&display=inline&height=143&originHeight=267&originWidth=344&size=0&status=done&width=184" alt><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268447081-b6ea8d74-61d6-4356-8137-57bf19c43d9c.jpeg#align=left&display=inline&height=154&originHeight=218&originWidth=381&size=0&status=done&width=270" alt></p><p><a name="Ai4Ai"></a></p><h1 id="eval是做什么的"><a href="#eval是做什么的" class="headerlink" title="eval是做什么的"></a>eval是做什么的</h1><p>它的功能是将对应的字符串解析成js并执行，应该避免使用js，因为非常消耗性能<code>（2次，一次解析成js，一次执行）</code><br><a name="oS9Aj"></a></p><h1 id="js有没有块级作用域"><a href="#js有没有块级作用域" class="headerlink" title="js有没有块级作用域"></a>js有没有块级作用域</h1><p>一般情况下是没有块级作用域的</p><ul><li><p>let可</p></li><li><p>with 基本都不会用</p></li><li><p>try-catch catch可以创建块级作用域但是性能很低</p></li><li><p>eval<br><a name="UU4uS"></a></p><h1 id="如何实现一个私有变量"><a href="#如何实现一个私有变量" class="headerlink" title="如何实现一个私有变量"></a>如何实现一个私有变量</h1><p>通过defineProperty来实现</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>yuxiaoliang<span class="token punctuation">,</span>getName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不可枚举不可配置 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="eBkmT"></a></p><h1 id="和-、以及Object-is的区别"><a href="#和-、以及Object-is的区别" class="headerlink" title="==和===、以及Object.is的区别"></a>==和===、以及Object.is的区别</h1><p><code>(1) ==</code><br>主要存在：强制转换成</p><pre class=" language-javascript"><code class="language-javascript">number<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token operator">==</span>undefined <span class="token string">" "</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token comment" spellcheck="true">//true </span><span class="token string">"0"</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token comment" spellcheck="true">//true </span><span class="token string">" "</span> <span class="token operator">!=</span><span class="token string">"0"</span> <span class="token comment" spellcheck="true">//true </span><span class="token number">123</span><span class="token operator">==</span><span class="token string">"123"</span> <span class="token comment" spellcheck="true">//true </span><span class="token keyword">null</span><span class="token operator">==</span>undefined <span class="token comment" spellcheck="true">//true</span></code></pre><p><code>(2)Object.js</code><br>主要的区别就是+0！= -0 而NaN==NaN<br>(相对比===和==的改进)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 特例</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// false</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true</span></code></pre><p><a name="gcw8W"></a></p><h1 id="setTimeout、requestAnimationFrame之间的区别"><a href="#setTimeout、requestAnimationFrame之间的区别" class="headerlink" title="setTimeout、requestAnimationFrame之间的区别"></a>setTimeout、requestAnimationFrame之间的区别</h1><p>requestAnimationFrame为的是动画设定的, 为了其他的不干扰动画的重绘<br>requestAnimationFrame<code>采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制</code>，增加开销；<code>也不会因为间隔时间太长，使用动画卡顿不流畅</code>，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果</p><blockquote><p>requestAnimationFrame的用法与settimeout很相似，只是不需要设置时间间隔而已。</p></blockquote></li></ul><p>requestAnimationFrame使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递cancelAnimationFrame用于取消这个函数的执行</p><pre class=" language-javascript"><code class="language-javascript">requestID <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制台输出1和0</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><p><code>cancelAnimationFrame方法用于取消定时器</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//控制台什么都不输出</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>也可以直接使用返回值进行取消</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为ie9不支持requestAnimationFrame<br><code>可以用setTimeout来兼容</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>requestAnimationFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> currTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> timeToCall <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16.7</span><span class="token operator">-</span><span class="token punctuation">(</span>currTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> id  <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>currTime <span class="token operator">+</span> timeToCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>timeToCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastTime <span class="token operator">=</span> currTime <span class="token operator">+</span> timeToCall<span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>cancelAnimationFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="eC1qC"></a></p><h1 id="Function-proto-getPrototypeOf-是什么"><a href="#Function-proto-getPrototypeOf-是什么" class="headerlink" title="Function.proto(getPrototypeOf)是什么"></a>Function.<em>proto</em>(getPrototypeOf)是什么</h1><p>Function.<strong>proto</strong>==Object.prototype //false<br>Function.<strong>proto</strong>==Function.prototype//true<br>我们发现Function的原型也是Function。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268446958-b1e627f5-563e-40ba-874f-ec0422a38c2e.jpeg#align=left&display=inline&height=424&originHeight=1025&originWidth=1273&size=0&status=done&width=526" alt><br><a name="IJwPB"></a></p><h1 id="怎么进行js类型判断"><a href="#怎么进行js类型判断" class="headerlink" title="怎么进行js类型判断"></a>怎么进行js类型判断</h1><p><code>typeof()</code><br><code>instanceof</code> instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。<br><code>Object.prototype.toString.call()等</code><br><a name="oATZy"></a></p><h1 id="什么叫暂停死区"><a href="#什么叫暂停死区" class="headerlink" title="什么叫暂停死区"></a>什么叫暂停死区</h1><p>在代码块内，使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”<br><a name="5xyMT"></a></p><h1 id="什么是按需加载"><a href="#什么是按需加载" class="headerlink" title="什么是按需加载"></a>什么是按需加载</h1><p><code>当用户触发了动作时才加载对应的功能。</code>触发的动作，是要看具体的业务场景而言，包括但不限于以下几个情况：鼠标点击、输入文字、拉动滚动条，鼠标移动、窗口大小更改等。加载的文件，可以是JS、图片、CSS、HTML等。<br><a name="8DnQJ"></a></p><h1 id="静态作用域什么意思"><a href="#静态作用域什么意思" class="headerlink" title="静态作用域什么意思"></a>静态作用域什么意思</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里结果并不是2, 而是1，是因为js是静态作用域，也就是说在函数定义的时候就定好了<br>假设JavaScript采用动态作用域，让我们分析下执行过程：执行foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。<br><a name="ozULd"></a></p><h1 id="如果已经有三个promise，A、B和C，想串行执行，该怎么写"><a href="#如果已经有三个promise，A、B和C，想串行执行，该怎么写" class="headerlink" title="如果已经有三个promise，A、B和C，想串行执行，该怎么写"></a>如果已经有三个promise，A、B和C，想串行执行，该怎么写</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// promise</span>A<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// async/await</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a name="fggqH"></a></p><h1 id="箭头函数和function有什么区别"><a href="#箭头函数和function有什么区别" class="headerlink" title="箭头函数和function有什么区别"></a>箭头函数和function有什么区别</h1><p>箭头函数根本就没有绑定自己的this，在箭头函数中调用 this 时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用<br><a name="HkUYl"></a></p><h1 id="JSON互转为对象"><a href="#JSON互转为对象" class="headerlink" title="JSON互转为对象"></a>JSON互转为对象</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// JSON字符串转换为JSON对象</span><span class="token keyword">var</span> jsonObj<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JSON对象转为字符串</span><span class="token keyword">var</span> d <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p><a name="G0hnR"></a></p><h1 id="xml和json有什么区别"><a href="#xml和json有什么区别" class="headerlink" title="xml和json有什么区别"></a>xml和json有什么区别</h1><p>JSON：js的对象表示法（JS Object Notation）<br>JSON：存储和交换文本信息的语法，类似XML<br>JSON比XML更小、更快、更易解析</p><p>可读性：差不多，XML可读性更好一些<br>可扩展性：差不多<br>编码难度：JSON更容易<br>解析（码）难度：XML很难，JSON难度几乎为0<br>流行度：XML更流行。不过，在Ajax中，几乎都用JSON<br>数据体积：JSON体积更小，传输速度更快<br>数据交互：JSON和JS的交互更加方便，更容易解析处理，更好的数据交互<br>数据描述：XML对数据的描述更好<br>传输速度：JSON的速度远远快于XML<br><a name="msYBG"></a></p><h1 id="JavaScript有哪些方法定义对象"><a href="#JavaScript有哪些方法定义对象" class="headerlink" title="JavaScript有哪些方法定义对象"></a>JavaScript有哪些方法定义对象</h1><ul><li><p>对象字面量 var obj = {}</p></li><li><p>构造函数 var obj = new Object()</p></li><li><p>var obj = object.create(Object.prototype)<br><a name="ujJWt"></a></p><h1 id="讲一下什么是渐进增强和优雅降级"><a href="#讲一下什么是渐进增强和优雅降级" class="headerlink" title="讲一下什么是渐进增强和优雅降级"></a>讲一下什么是渐进增强和优雅降级</h1><p><code>渐进增强</code>是增对浏览器进行构建页面, 保证最基本的内容, 然后再对高级浏览器进行效果交互改进<br><code>优雅降级</code>就是直接做高级内容, 然后在对老式浏览器进行兼容<br><a name="Iu0KI"></a></p><h1 id="…spread什么意思"><a href="#…spread什么意思" class="headerlink" title="…spread什么意思"></a>…spread什么意思</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5 的写法</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ES6 的写法</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  等同于</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="ubsGD"></a></p><h1 id="怎么解决回调地狱"><a href="#怎么解决回调地狱" class="headerlink" title="怎么解决回调地狱"></a>怎么解决回调地狱</h1><p>说起回调地狱 首先想到的是<code>异步</code>  在js中我们经常会大量使用异步回调，例如使用<code>ajax</code>请求</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">functionb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们发现上面代码大量使用了回调函数（将一个函数作为参数传递给另个函数）并且有许多 <code>})</code>结尾的符号，使得代码看起来很混乱。<br><code>1. 可以使用promise</code>使用then来处理回调<br><code>2. 使用generate</code>函数生成器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ni hao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>3. 使用async/await</code>使用异步函数, await表示等待异步值返回</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="iex8c"></a></p><h1 id="怎么实现轮播"><a href="#怎么实现轮播" class="headerlink" title="怎么实现轮播"></a>怎么实现轮播</h1><p>图片轮播的原理就是图片排成一行，然后准备一个只有一张图片大小的容器，对这个容器设置超出部分隐藏，在控制定时器来让这些图片整体左移或右移，这样呈现出来的效果就是图片在轮播了。<br><code>如果有两个轮播</code>，可封装一个轮播组件，供两处调用<br><a name="8VueV"></a></p><h1 id="JavaScript的sort方法内部使用的什么排序"><a href="#JavaScript的sort方法内部使用的什么排序" class="headerlink" title="JavaScript的sort方法内部使用的什么排序"></a>JavaScript的sort方法内部使用的什么排序</h1><p>Chrome中数组规模超过10用快排否则用插入排序， Firefox是归并<br><a name="EdpVp"></a></p><h1 id="为什么Object-instanceof-Function并且Function-instanceof-Object"><a href="#为什么Object-instanceof-Function并且Function-instanceof-Object" class="headerlink" title="为什么Object instanceof Function并且Function instanceof Object"></a>为什么Object instanceof Function并且Function instanceof Object</h1><p>所有的对象都是Object的实例, 所有函数都是Function的实例<br>函数也是对象，对象也是函数</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础点</title>
      <link href="/2019/08/18/javascript-ji-chu-dian/"/>
      <url>/2019/08/18/javascript-ji-chu-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="5c9d4b9d"></a></p><h4 id="for-…-of循环和for-…-in循环有何区别"><a href="#for-…-of循环和for-…-in循环有何区别" class="headerlink" title="for … of循环和for … in循环有何区别"></a>for … of循环和for … in循环有何区别</h4><blockquote><p><code>for ... in</code>循环遍历的实际上是对象的属性名称</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '0', '1', '2', 'name'</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'A', 'B', 'C'</span><span class="token punctuation">}</span></code></pre><p><a name="2cc2e048"></a></p><h4 id="怎么判断变量是数组"><a href="#怎么判断变量是数组" class="headerlink" title="怎么判断变量是数组"></a>怎么判断变量是数组</h4><ol><li>用instanceof</li><li>用constructor, <code>Object.constructor === Array</code></li><li>Array. isArray(arr), 不过只支持es5以上</li><li><code>Object.prototype.toString.call(arr) === &#39;[object Array]&#39;</code>这个是非常重要的!!!,ES5内部其实也是这么判断的</li></ol><p><a name="8285f7ff"></a></p><h4 id="讲下浅拷贝和深拷贝"><a href="#讲下浅拷贝和深拷贝" class="headerlink" title="讲下浅拷贝和深拷贝"></a>讲下浅拷贝和深拷贝</h4><p><code>浅拷贝</code>就是简单地把一个对象的属性复制到另外一个对象当中去</p><p>但是有一个问题:</p><p>如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。</p><hr><p><code>深拷贝</code>就是能够实现真正意义上的数组和对象的拷贝。</p><p>它的实现并不难，只要<code>递归调用&quot;浅拷贝&quot;</code>就行了。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268411103-4647a694-f943-4c8d-8c4f-8407a93ee20f.jpeg#align=left&display=inline&height=590&originHeight=590&originWidth=754&size=0&status=done&width=754" alt></p><p><a name="c0feb0da"></a></p><h4 id="Ajax解决浏览器缓存问题"><a href="#Ajax解决浏览器缓存问题" class="headerlink" title="Ajax解决浏览器缓存问题"></a>Ajax解决浏览器缓存问题</h4><blockquote><p>主要是通过 <code>no-cache</code> 和不同的 <code>url</code> 来解决</p></blockquote><ul><li>在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)。</li><li>在ajax发送请求前加上 <code>anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。</code></li><li>在<code>URL后面加上一个随机数： &quot;fresh=&quot; + Math.random()。</code></li><li>在<code>URL后面加上时间搓：&quot;nowtime=&quot; + new Date().getTime()。</code><blockquote><p>这两个加上随机数和时间戳是因为, 浏览器缓存是基于url的缓存<br>如果页面允许缓存，则在一定时间内（缓存时效时间前）再次访问相同的URL，浏览器就不会再次发送请求到服务端，而是直接从缓存中获取指定资源。URL后面添加随机数后，URL就不同了，可以看做是唯一的URL（随机数恰好相同的概率非常低，可以忽略不计），<code>这样浏览器的缓存就不会匹配出URL，每次都会从服务器拉取最新的文件</code>。</p></blockquote></li></ul><p>如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</p><p><a name="efe0432d"></a></p><h4 id="说一下Commonjs、AMD和CMD"><a href="#说一下Commonjs、AMD和CMD" class="headerlink" title="说一下Commonjs、AMD和CMD"></a>说一下Commonjs、AMD和CMD</h4><p>CommonJS是NodeJS的实现规范, 分为三个模块{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p><ul><li>require()用来引入外部模块；</li><li>exports对象用于导出当前模块的方法或变量，唯一的导出口；</li><li>module对象就代表模块本身。</li></ul><hr><p><code>AMD是前期就把依赖加载进去</code>, 依赖加载<code>部分顺序</code></p><p>提前定义</p><p>它要在声明模块的时候制定所有的依赖(dep)，并且还要当做形参传到factory中，像这样：</p><pre><code>1 define([&#39;dep1&#39;,&#39;dep2&#39;],function(dep1,dep2){...});</code></pre><p>要是没什么依赖，就定义简单的模块，下面这样就可以啦：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2</span>     <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token number">3</span>     exports<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token number">4</span>     <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><code>CMD是用到的时候再去把依赖加入进去, 依赖加载分顺序</code></p><p>用require就近依赖</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="5023dcec"></a></p><h4 id="将原生的ajax封装成promise"><a href="#将原生的ajax封装成promise" class="headerlink" title="将原生的ajax封装成promise"></a>将原生的ajax封装成promise</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myNewAjax <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a name="ae7e541c"></a></p><h4 id="JS作用域有什么用"><a href="#JS作用域有什么用" class="headerlink" title="JS作用域有什么用"></a>JS作用域有什么用</h4><ol><li>避免全局污染</li><li>提升性能</li><li>避免命名冲突</li><li>有利于压缩</li><li>保存闭包状态</li><li>使用UMD结构颠倒代码顺序<blockquote><p>它是为了让模块同时兼容<code>AMD</code>和<code>CommonJs</code>规范而出现的<br>所以很丑<br>第一个自执行函数<code>iife</code></p></blockquote></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// AMD</span>  <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">,</span> <span class="token string">'underscore'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Node, CommonJS之类的</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'underscore'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 浏览器全局变量(root 即 window)</span>  root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>jQuery<span class="token punctuation">,</span> root<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    方法</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    私有方法，因为它没被返回 (见下面)</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    公共方法，因为被返回了</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    公共方法，因为被返回了</span><span class="token comment" spellcheck="true">//    暴露公共方法</span><span class="token keyword">return</span> <span class="token punctuation">{</span>  b<span class="token punctuation">:</span> b<span class="token punctuation">,</span>  c<span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="afd31d3f"></a></p><h4 id="谈谈Event-Loop中的Job-queue"><a href="#谈谈Event-Loop中的Job-queue" class="headerlink" title="谈谈Event Loop中的Job queue"></a>谈谈Event Loop中的Job queue</h4><pre class=" language-javascript"><code class="language-javascript">例<span class="token number">1</span>：<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出2,1</span></code></pre><p>当主线程任务执行完毕后，再从event loop中读取任务，因此先输出2，再输出1。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>//输出2,6,5,3,4,1</p><blockquote><p><strong><em>script(主程序代码)—&gt;process.nextTick—&gt;Promises…——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt;<br>I/O——&gt;UI rendering</em></strong></p></blockquote><p><a name="9d055866"></a></p><h4 id="实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）"><a href="#实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）" class="headerlink" title="实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）"></a>实现js中所有对象的深度克隆（包装对象，Date对象，正则对象）</h4><p>通过递归可以简单实现对象的深度克隆，但是这种方法不管是ES6还是ES5实现，都有同样的缺陷，就是只能实现特定的object的深度复制（比如数组和函数），<code>不能实现包装对象Number，String， Boolean，以及Date对象，RegExp对象的复制。</code></p><p>递归克隆</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> newObj<span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    newObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'object'</span><span class="token operator">?</span>    <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是不能实现包装对象的克隆</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> num <span class="token comment" spellcheck="true">// "object"</span><span class="token keyword">var</span> newNum<span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//newNum ->  {} 空对象</span></code></pre><hr><p><code>解决</code></p><p>可以通过<code>valueof()</code>函数来进行克隆表示原始值, <code>其实对于包装类，完全可以用=号来进行克隆，其实没有深度克隆一说</code></p><pre class=" language-javascript"><code class="language-javascript">Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2010'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newDate<span class="token operator">=</span>date<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// newDate->  Fri Jan 01 2010 08:00:00 GMT+0800</span></code></pre><p>对于正则</p><pre class=" language-javascript"><code class="language-javascript">RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flags <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>global <span class="token operator">?</span> <span class="token string">'g'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>ignoreCase <span class="token operator">?</span> <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>multiline <span class="token operator">?</span> <span class="token string">'m'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'/111/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newReg<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//newReg->  /\/111\//</span></code></pre><p><a name="2b86a976"></a></p><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p>法一：<code>indexOf循环去重</code></p><p>法二：<code>ES6 Set去重</code>；<code>Array.from(new Set(array))</code></p><p>法三：<code>Object 键值对去重</code>；把数组的值存成 Object 的 key 值，比如 Object[value1] = true，在判断另一个值的时候，如果 Object[value2]存在的话，就说明该值是重复的。</p><p><a name="962b5602"></a></p><h4 id="如何使不同页面之间进行通信"><a href="#如何使不同页面之间进行通信" class="headerlink" title="如何使不同页面之间进行通信"></a>如何使不同页面之间进行通信</h4><ul><li>使用cookie</li><li>使用web worker</li><li>使用localeStorage和sessionStorage</li></ul><hr><p><code>cookie</code>兼容性好, 但是每次http请求都会携带它, 就会影响速度和流量</p><ol><li>用户在浏览器<code>输入url</code>,<code>发送请求</code>,服务器接受请求</li><li>服务器在<code>响应报文中生成一个Set-Cookie报头,发给客户端</code></li><li>浏览器<code>取出响应中Set-Cookie中内容</code>,<code>以cookie.txt形式保存</code>在客户端</li><li>如果浏览器<code>继续发送请求</code>,浏览器会在<code>硬盘中找到cookie文件</code>,<code>产生Cookie报头,与HTTP请求一起发送</code>.</li><li>服务器<code>接受含Cookie报头的请求</code>,处理其中的cookie信息,<code>找到对应资源给客户端.</code>浏览器<code>每一次请求都会包含已有的cookie.</code></li></ol><p><a name="a6c18d6e"></a></p><h4 id="generator函数"><a href="#generator函数" class="headerlink" title="generator函数"></a>generator函数</h4><p>Generator 函数是一个状态机，封装了多个内部状态</p><p>async-await：是Generator的语法糖</p><p>与Generator相比：</p><ol><li>将function* 替代为 async function</li><li>将yield替代为await</li><li>await后面是promise对象。跟其他类型的数据也OK，但是会直接同步执行，而不是异步。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">yield</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>     <span class="token keyword">yield</span> <span class="token string">'world'</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">'ending'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">var</span> hw <span class="token operator">=</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="0128c443"></a></p><h4 id="proxy为什么要取代Object-defineProperty"><a href="#proxy为什么要取代Object-defineProperty" class="headerlink" title="proxy为什么要取代Object.defineProperty"></a>proxy为什么要取代Object.defineProperty</h4><p>Proxy用于修改某些操作的默认行为，也可以理解为在目标对象之前架设一层拦截，外部所有的访问都必须先通过这层拦截，因此提供了一种机制，可以对外部的访问进行过滤和修改。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>proxy可以直接监对象,    而不仅仅是简单的属性<br>这就是defineProperty的缺点,    需要遍历对象才能赋予get和set</p></blockquote><p>Object.defineProperty无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应。</p><p><code>Object.defineProperty只能劫持对象的属性</code></p><p>Proxy有以下两个优点;</p><blockquote><ul><li>可以劫持整个对象，并返回一个新对象</li><li>有13种劫持操作</li></ul></blockquote><p><a name="855fe691"></a></p><h4 id="讲下websocket"><a href="#讲下websocket" class="headerlink" title="讲下websocket"></a>讲下websocket</h4><p>WebSocket 和 http协议完全是两个不同的概念</p><p><strong>WebSocket协议：</strong>其客户端与服务器建立的是 持久连接；</p><p>解决了http的:</p><ol><li><strong>http协议的被动性</strong></li><li>http的无状态性</li></ol><p><code>轮询</code> 客户端主动请求来促使数据更新；</p><p><code>长轮询</code> 服务端并不是即时返回，<code>而是当有内容更新的时候才返回内容给客户端</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">WebSocketTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的浏览器支持 WebSocket!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打开一个 web socket</span>            <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:9998/echo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Web Socket 已连接上，使用 send() 方法发送数据</span>                ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据发送中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据已接收..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 关闭 websocket</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"连接已关闭..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 浏览器不支持 WebSocket</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的浏览器不支持 WebSocket!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><a name="e6afe359"></a></p><h4 id="宏事件、微事件"><a href="#宏事件、微事件" class="headerlink" title="宏事件、微事件"></a>宏事件、微事件</h4><p>目的是执行宏事件, 若宏事件中有微事件存在就执行微事件, 然后继续下一个宏事件，都是队列，一段代码执行时，会先执行宏任务中的同步代码</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566268412547-b362528a-951b-4f83-84ac-8b9d82eed2b3.png#align=left&display=inline&height=411&originHeight=941&originWidth=741&size=0&status=done&width=324" alt></p><ol><li><p>宏任务」、「微任务」都是队列，一段代码执行时，会先执行宏任务中的同步代码。</p><ul><li>宏任务包括<code>整体代码script</code>, <code>setTimeout</code>, <code>setInterval</code>, IO, UI渲染<br>   + 微任务包括<code>Promise</code>, Object.observe、MutationObserver</li></ul></li><li><p>进行第一轮事件循环的时候会把全部的js脚本当成一个宏任务来运行。</p></li><li><p>如果执行中遇到setTimeout之类宏任务，那么就把这个setTimeout内部的函数推入「宏任务的队列」中，下一轮宏任务执行时调用。</p></li><li><p>如果执行中遇到 promise.then() 之类的微任务，就会推入到「当前宏任务的微任务队列」中，在本轮宏任务的同步代码都执行完成后，依次执行所有的微任务。</p></li><li><p>第一轮事件循环中当执行完全部的同步脚本以及微任务队列中的事件，这一轮事件循环就结束了，开始第二轮事件循环。</p></li><li><p>第二轮事件循环同理先执行同步脚本，遇到其他宏任务代码块继续追加到「宏任务的队列」中，遇到微任务，就会推入到「当前宏任务的微任务队列」中，在本轮宏任务的同步代码执行都完成后，依次执行当前所有的微任务。</p><p>   开始第三轮，循环往复…<br>参考：<a href>https://juejin.im/post/5c148ec8e51d4576e83fd836</a><br><a name="DWxbp"></a></p><h4 id="手写实现new操作"><a href="#手写实现new操作" class="headerlink" title="手写实现new操作"></a>手写实现new操作</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> myNew <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 创建一个新对象且将其隐式原型指向构造函数原型</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>   __proto__ <span class="token punctuation">:</span> fun<span class="token punctuation">.</span>prototype <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 执行构造函数</span> fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回该对象</span> <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>function person(name, age) {<br>  this.name = name<br>  this.age = age<br>}<br>let obj = myNew(person)(‘chen’, 18) // {name: “chen”, age: 18}</p><pre><code>&lt;a name=&quot;2867ac7c&quot;&gt;&lt;/a&gt;#### 说下DocumentFragment找出下面代码并优化它![](https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268411124-50cc6318-a7c8-4cbe-ae6e-7c448cca1cc9.jpeg#align=left&amp;display=inline&amp;height=140&amp;originHeight=140&amp;originWidth=427&amp;size=0&amp;status=done&amp;width=427)对该代码的优化是三个点1. 把data.length提出去1. 不要在里面进行提取dom(&#39;list&#39;)1. 不要每一次都进行一遍innerHTML, 可以先用字符串拼接然后最后再进行一下innerHTML**JavaScript每一次对dom进行操作都很好性能, 所以要尽可能地减少对dom的操作**并且每一次innerHTML还会对页面进行重绘---`例如:`把&lt;br /&gt;第1行&lt;br /&gt;第2行&lt;br /&gt;...（body之间有100个p元素）插入body里面的问题![](https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268411139-ad08cdba-0a8f-460f-9ca9-42e83dbad754.jpeg#align=left&amp;display=inline&amp;height=229&amp;originHeight=229&amp;originWidth=370&amp;size=0&amp;status=done&amp;width=370)正确写法应该是通过`DocumentFragment`创建的是一个虚拟DOM存放在内存中, 对其进行更改不会对文档有影响插入到正式的文档中后, 虚拟DOM会被删除![](https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268411134-0a925f53-672f-4d4e-a401-407df1465748.jpeg#align=left&amp;display=inline&amp;height=234&amp;originHeight=234&amp;originWidth=413&amp;size=0&amp;status=done&amp;width=413)&lt;a name=&quot;d74311a8&quot;&gt;&lt;/a&gt;#### 节流和防抖原理节流就是指`连续触发事件`但是在 n 秒中`只执行一次函数`。节流会稀释函数的执行频率。防抖，就是指`触发事件后`在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。![](https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268414317-c7b5b166-8013-4f81-a79a-8c4e0b42a8c7.jpeg#align=left&amp;display=inline&amp;height=500&amp;originHeight=500&amp;originWidth=1235&amp;size=0&amp;status=done&amp;width=1235)可以看下: [节流和防抖](https://www.jianshu.com/p/c8b86b09daf0)&lt;a name=&quot;5b9493fb&quot;&gt;&lt;/a&gt;#### 哪些操作会造成内存泄漏- setTimeout的第一个参数使用字符串而不是函数的话就会内存泄漏- 闭包使用不当就会- 函数间相互调用形成闭环也会&lt;a name=&quot;e1d1393b&quot;&gt;&lt;/a&gt;#### new操作符做了什么事情new 操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象。&lt;a name=&quot;834a01e0&quot;&gt;&lt;/a&gt;#### 说说你知道的JavaScript编写规范比如不要在一行声明多个变量&lt;br /&gt;使用全等来进行数值比较和布尔值比较&lt;br /&gt;不要使用全局函数&lt;br /&gt;用对象字面量来代替new Array这种操作&lt;br /&gt;switch语句必须带有default&lt;br /&gt;if必须有大括号&lt;br /&gt;变量应该声明&lt;a name=&quot;e411ec76&quot;&gt;&lt;/a&gt;#### js监听对象属性的改变(1)在`ES5中可以通过Object.defineProperty`来实现已有属性的监听```javascriptObject.defineProperty(user,&#39;name&#39;,{  set：function(key,value){  }})</code></pre><p>user可以是obj<br>缺点：如果id不在user对象中，则不能监听id的变化</p><p>(2)在ES6中可以通过<code>Proxy来实现</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span>  user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span>，<span class="token punctuation">{</span>  <span class="token keyword">set</span>：<span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="jet7Z"></a></p><h4 id="Promise在中途取消"><a href="#Promise在中途取消" class="headerlink" title="Promise在中途取消"></a>Promise在中途取消</h4><ol><li><p>最简单的方式是直接返回一个永远 pending 的Promise，但是会导致内存泄漏</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'准备中途取消该promise'</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这里就不会执行了'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>利用 throw 扔出一个特殊的错误信号，然后下方就会catch住</p></li></ol><p>参考：<a href="https://github.com/xieranmaya/blog/issues/5" target="_blank" rel="noopener">链接</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Break <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Break</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name">Break</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> reason <span class="token comment" spellcheck="true">// 丢出</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'被丢出了，中断promise'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript代码实现</title>
      <link href="/2019/08/18/javascript-dai-ma-shi-xian/"/>
      <url>/2019/08/18/javascript-dai-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<p><a name="e9b5374d"></a></p><h4 id="实现一个通用事件代理绑定函数绑定-触发-解绑"><a href="#实现一个通用事件代理绑定函数绑定-触发-解绑" class="headerlink" title="实现一个通用事件代理绑定函数绑定, 触发, 解绑"></a>实现一个通用事件代理绑定函数<code>绑定, 触发, 解绑</code></h4><blockquote><p>目的是为了实现一个事件类event, 包含: 绑定事件, 触发事件, 解绑事件<br>其实是一个发布订阅模式:<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703912-a1400ea3-a45f-416a-a35b-76fffef01496.jpeg#align=left&display=inline&height=698&originHeight=698&originWidth=1104&size=0&status=done&width=1104" alt></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为了查找迅速使用了对象</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 绑定事件</span>        <span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果事件方法没有的话就放入到字典进去</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 触发事件</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">fn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> index <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 全部清空</span>                    fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接下来进行订阅者操作, 就是用户操作, 事件绑定和触发</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定后就输出</span>event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解绑后就不显示了</span></code></pre><p><a name="83f77b42"></a></p><h4 id="bind-的实现"><a href="#bind-的实现" class="headerlink" title="bind 的实现"></a>bind 的实现</h4><blockquote><p>bind 的绑定本质上还是call/apply的实现</p></blockquote><p>如果让自己来设计, 你会怎么设计</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703949-3099b1f0-4e4d-4d25-bd99-d6f190bc5851.jpeg#align=left&display=inline&height=596&originHeight=596&originWidth=1088&size=0&status=done&width=1088" alt></p><p>具体代码如下:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703914-f689615c-4574-46c4-9761-2a65a3a19325.jpeg#align=left&display=inline&height=552&originHeight=552&originWidth=900&size=0&status=done&width=900" alt><br>bind的plloyfill</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> bindPolyfill <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span> <span class="token punctuation">{</span>              fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>bind的实现</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arg<span class="token operator">=</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> context<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bound<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>newArg<span class="token punctuation">)</span><span class="token punctuation">{</span>    arg<span class="token operator">=</span>arg<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newArg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> F<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//4. 这里需要一个寄生组合继承</span>  F<span class="token punctuation">.</span>prototype<span class="token operator">=</span>context<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  bound<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bound<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注释中的<code>4.</code>说要继承原型是因为,例如下:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703922-0d121f21-8875-4720-9353-c69a0f8080bf.jpeg#align=left&display=inline&height=265&originHeight=265&originWidth=492&size=0&status=done&width=492" alt></p><p><a name="0220f8cd"></a></p><h4 id="手写一个promise"><a href="#手写一个promise" class="headerlink" title="手写一个promise"></a>手写一个promise</h4><p>主要是要写出两个结果状态, 一个是resolve, 一个是reject</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myPromise</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> self<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"pending"</span> <span class="token comment" spellcheck="true">//定义状态改变前的初始状态</span>    self<span class="token punctuation">.</span>value<span class="token operator">=</span>undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义状态为resolved的时候的状态</span>    self<span class="token punctuation">.</span>reason<span class="token operator">=</span>undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义状态为rejected的时候的状态</span>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个==="pending"，保证了状态的改变是不可逆的</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          self<span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span>          self<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"resolved"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个==="pending"，保证了状态的改变是不可逆的</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          self<span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span>          self<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//捕获构造异常</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token function">constructor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>之后是链式调用then</p><pre class=" language-javascript"><code class="language-javascript">myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>onFullfilled<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> self<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>   <span class="token keyword">switch</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"resolved"</span><span class="token punctuation">:</span>        <span class="token function">onFullfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"rejected"</span><span class="token punctuation">:</span>        <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="3e5807a1"></a></p><h4 id="实现instanceof"><a href="#实现instanceof" class="headerlink" title="实现instanceof"></a>实现instanceof</h4><p>就是一直从左边的原型链上往上找,要是等于右边的原型<br>则说明是他的实例<br>否则找到原型为空的时候就说明不是原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：右边变量的原型存在于左边变量的原型链上</span><span class="token keyword">function</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    leftValue <span class="token operator">=</span> leftValue<span class="token punctuation">.</span>__proto__  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="28fcbd59"></a></p><h4 id="实现call和apply"><a href="#实现call和apply" class="headerlink" title="实现call和apply"></a>实现call和apply</h4><p>通过改变this指向来完成call和apply,    先让传入对象的一个临时字属性等于操作对象,    然后操作完成后就把结果返回,    并把临时属性删掉</p><p><code>实现call</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mycall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not funciton'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    context <span class="token operator">=</span> context <span class="token operator">||</span> window    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><code>实现apply</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：将要改变this指向的方法挂到目标this上执行并返回</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myapply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not funciton'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    context <span class="token operator">=</span> context <span class="token operator">||</span> window    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> result    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><p><a name="492c8b38"></a></p><h4 id="实现双向数据绑定"><a href="#实现双向数据绑定" class="headerlink" title="实现双向数据绑定"></a>实现双向数据绑定</h4><p>主要是通过<code>Object.defineproperty</code>来实现的,     一个数据更新了,     会推送给哪些订阅了这些数据的对象<br>在里面设置<code>get()和set()</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 数据劫持</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据了'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据更新了'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> newVal    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newVal  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输入监听</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="0ebf06b5"></a></p><h4 id="实现一个简单的路由"><a href="#实现一个简单的路由" class="headerlink" title="实现一个简单的路由"></a>实现一个简单的路由</h4><p>主要为了解决:<br>根据路径<code>存储</code>和<code>更新</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// hash路由</span><span class="token keyword">class</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 路由存储对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前hash</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">// 绑定this，避免监听时this指向改变</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 监听</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 存储</span>    <span class="token function">storeRoute</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> cb <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token function">freshRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentHash<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="72fb58ab"></a></p><h4 id="实现个时间委托函数"><a href="#实现个时间委托函数" class="headerlink" title="实现个时间委托函数"></a>实现个时间委托函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*@param  parentElem 父元素@param  type 事件类型@param  childElem 子元素@param  fn 触发的事件*/</span><span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span>parentElem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> childElem<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fn <span class="token operator">=</span> childElem<span class="token punctuation">;</span>    childElem <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 委托给父元素</span>  parentElem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果有孩子元素就代表要做事件处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childElem<span class="token punctuation">)</span> <span class="token punctuation">{</span>      target <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表获取当前触发事件的元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>childElem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定触发元素为target上下文, 传入事件</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果没有我要的子元素就不用进行事件代理</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a name="25b1ae8f"></a></p><h4 id="多维数组降到一维"><a href="#多维数组降到一维" class="headerlink" title="多维数组降到一维"></a>多维数组降到一维</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新建一个空数组</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对传入的数组进行判断其子元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子元素是数组就用concat拼接进去, concat会降维拼接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 子元素不是数组就直接加入进去就可以</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现模拟new操作</p><p>创建一个对象<br>该对象的原型指向构造函数的原型<br>然后再把传入的参数在构建函数执行一遍, 再把this指向该对象<br>最后返回该对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> myNew <span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个新对象且将其隐式原型指向构造函数原型</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>      __proto__ <span class="token punctuation">:</span> fun<span class="token punctuation">.</span>prototype    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行构造函数</span>    fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回该对象</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'chen'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "chen", age: 18}</span></code></pre><p><a name="fd78ab0d"></a></p><h4 id="写个深拷贝"><a href="#写个深拷贝" class="headerlink" title="写个深拷贝"></a>写个深拷贝</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不支持循环引用,不拷贝函数,不拷贝原型链,不拷贝Symbol,支持的内置对象有限</span><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把obj2拷贝到obj1中</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            obj1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="ee86bd11"></a></p><h4 id="用setTimeout模拟setInterval"><a href="#用setTimeout模拟setInterval" class="headerlink" title="用setTimeout模拟setInterval"></a>用setTimeout模拟setInterval</h4><p>首先来看setInterval的缺陷，使用setInterval()创建的定时器确保了定时器代码规则地插入队列中。这个问题在于：如果定时器代码在代码再次添加到队列之前还没完成执行，结果就会导致定时器代码连续运行好几次。而之间没有间隔。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span>setTimeout <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span>  setTimeout <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703927-e1c5e57b-02e6-4b80-8a4b-797e25ee0af6.jpeg#align=left&display=inline&height=551&originHeight=551&originWidth=890&size=0&status=done&width=890" alt></p><p><a name="ba29b283"></a></p><h4 id="实现一个基本的Event-Bus"><a href="#实现一个基本的Event-Bus" class="headerlink" title="实现一个基本的Event Bus"></a>实现一个基本的Event Bus</h4><p>主要是做三件事情</p><ol><li>创建构造函数</li><li>创建监听事件</li><li>触发事件</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 组件通信，一个触发与监听的过程</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 存储事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听事件</span>    <span class="token function">addListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 触发事件</span>    <span class="token function">emit</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>        handle<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听事件</span>emitter<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> age <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span></code></pre><p><a name="aa552185"></a></p><h4 id="怎么实现图片懒加载"><a href="#怎么实现图片懒加载" class="headerlink" title="怎么实现图片懒加载"></a>怎么实现图片懒加载</h4><p>原理就是:<br>浏览器可视高度+滚动距离-图片到顶部的距离<br>算出来就知道图片有没有在可视化范围内<br>在的话就读取图片数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> imgs <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可视区高度, 三个参数差不多意思</span><span class="token keyword">let</span> clientHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token keyword">function</span> lazyLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 滚动卷去的高度, 这三个参数是差不多的意思</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 得到图片顶部距离可视区顶部的距离</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> clientHeight <span class="token operator">+</span> scrollTop <span class="token operator">-</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop    <span class="token comment" spellcheck="true">// 图片在可视区内</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> clientHeight<span class="token operator">+</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>      imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703959-6c6bd1bc-0093-449f-ba40-60785b6ec2a9.jpeg#align=left&display=inline&height=570&originHeight=570&originWidth=635&size=0&status=done&width=635" alt></p><p><a name="d96550e4"></a></p><h4 id="监听设置rem"><a href="#监听设置rem" class="headerlink" title="监听设置rem"></a>监听设置rem</h4><p>为什么要设置rem<br>是因为设计稿大小是固定的<br>但是浏览器大小是不固定的<br>为了响应式可视化来说最好就是按照比例来换算<br>同时需要监听rem的变化</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 原始配置</span><span class="token keyword">function</span> setRem <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> doc <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token keyword">let</span> width <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width  <span class="token comment" spellcheck="true">// 假设设计稿为宽750，则1rem代表10px</span>  <span class="token keyword">let</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">75</span>  doc<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 监听窗口变化</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> setRem<span class="token punctuation">)</span></code></pre><p><a name="900a09a3"></a></p><h4 id="实现拖拽计算"><a href="#实现拖拽计算" class="headerlink" title="实现拖拽计算"></a>实现拖拽计算</h4><p>实现拖拽的逻辑是这样的:<br>监控距离依靠的是鼠标的移动<br>只会监控鼠标的位置变化,通过鼠标的位置变化来推断元素的位置<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268703948-c2b79e35-f812-428d-8e8a-5d279b901560.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=864&size=0&status=done&width=864" alt></p><p>先算出鼠标距离元素的距离</p><p>算出来距离后, 看鼠标移动了多少, 移动了的距离加上距离的距离就是元素被拖动的距离</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// drag处于绝对定位状态</span>  <span class="token keyword">let</span> drag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>  drag<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event    <span class="token comment" spellcheck="true">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span>    <span class="token keyword">let</span> diffX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">let</span> diffY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetTop    drag<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> diffX      <span class="token keyword">let</span> top <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> diffY      <span class="token comment" spellcheck="true">// 避免拖拽出可视区</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight      <span class="token punctuation">}</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">'px'</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    drag<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="b24e02eb"></a></p><h4 id="实现防抖和节流"><a href="#实现防抖和节流" class="headerlink" title="实现防抖和节流"></a>实现防抖和节流</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566268414317-c7b5b166-8013-4f81-a79a-8c4e0b42a8c7.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=1235&size=0&status=done&width=1235" alt><br><code>节流:``    规定时间内只执行一次</code></p><p>思路是可以用<code>闭包保存上一次执行的时间</code></p><p><code>如果再次被触发事件的话就看下是否在时间范围内</code></p><p>是就不执行, 不是就执行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路：在规定时间内只触发一次</span><span class="token keyword">function</span> throttle <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用闭包保存时间</span>  <span class="token keyword">let</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>      prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'节流'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>防抖:    ``看规定时间内有没有触发第二次, 没有就执行</code></p><p>思路是:</p><p>在规定时间内再次触发会先清除定时器后再重设定时器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 思路:在规定时间内未触发第二次，则执行</span><span class="token keyword">function</span> debounce <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用闭包保存定时器</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token comment" spellcheck="true">// 在规定时间内再次触发会先清除定时器后再重设定时器</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'防抖'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><a name="7160643c"></a></p><h4 id="实现检测横屏"><a href="#实现检测横屏" class="headerlink" title="实现检测横屏"></a>实现检测横屏</h4><p><code>window.orientation</code>:获取屏幕旋转方向</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token number">180</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 正常方向或屏幕旋转180度</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'竖屏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token number">90</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>orientation <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 屏幕顺时钟旋转90度或屏幕逆时针旋转90度</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'横屏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>css检测横屏</code></p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> portrait<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*竖屏...*/</span><span class="token punctuation">}</span> <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*横屏...*/</span><span class="token punctuation">}</span></code></pre><p><a name="995e2cfa"></a></p><h4 id="控制一次加载一张图片，加载完后再加载下一张"><a href="#控制一次加载一张图片，加载完后再加载下一张" class="headerlink" title="控制一次加载一张图片，加载完后再加载下一张"></a>控制一次加载一张图片，加载完后再加载下一张</h4><p><code>(1)方法1</code>用obj.onload</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http:..."</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mypic"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innnerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">+</span> <span class="token string">"' />"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>onloading……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>(2)方法2</code>用obj.onreadystatechange</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http:..."</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"complete"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mypic"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innnerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">+</span> <span class="token string">"' />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>onloading……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><a name="1d3264c6"></a></p><h4 id="如何实现sleep的效果"><a href="#如何实现sleep的效果" class="headerlink" title="如何实现sleep的效果"></a>如何实现sleep的效果</h4><ol><li>while循环的方式</li><li>通过promise来实现</li><li>通过async封装 await</li><li>通过generate来实现</li></ol><p>大多数方法还是通过promise来实现的<br><code>while</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> start<span class="token operator">=</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>expire<span class="token operator">=</span>start<span class="token operator">+</span>ms<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>expire<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>promise</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> temple<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>ms<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> temple<span class="token punctuation">}</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//console.log(222)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>async</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> temple<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> temple<span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>generate</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a name="owvLU"></a></p><h4 id="实现Promise-all和Primise-race"><a href="#实现Promise-all和Primise-race" class="headerlink" title="实现Promise.all和Primise.race"></a>实现Promise.all和Primise.race</h4><p>主要就是一句padding状态的保持</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 一定要等到加入最后一个才开始resolve</span>EasyPromise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        cnt<span class="token operator">++</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 谁先跑完就先结束</span>EasyPromise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><a name="c5syh"></a></p><h4 id="使用es5实现es6的class"><a href="#使用es5实现es6的class" class="headerlink" title="使用es5实现es6的class"></a>使用es5实现es6的class</h4><p>引用：<a href="https://github.com/nzhl/front-end-interview/blob/master/%E6%A1%86%E6%9E%B6%E4%BB%A5%E5%8F%8AJS%E7%BB%BC%E5%90%88.md" target="_blank" rel="noopener">链接</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 工具函数 </span>  <span class="token comment" spellcheck="true">// 代替es6中的Object.create</span>  <span class="token comment" spellcheck="true">// 返回一个空对象其原型为传入的prototype</span>  <span class="token keyword">function</span> createPolyfill <span class="token punctuation">(</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> F <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 1.1 父类构造函数的定义</span>  <span class="token keyword">function</span> Animal <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Add new !'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 1.2 父类方法的定义</span>  Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>logAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2.1 子类构造函数的定义</span>  <span class="token keyword">function</span> Cat <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Add new !'</span><span class="token punctuation">)</span>    Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2.2 继承声明 (必须在子类方法定义前)</span>  Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token function">createPolyfill</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat  <span class="token comment" spellcheck="true">// 2.3 子类方法的定义</span>  Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>logName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 以上代码等效于以下ES6代码, 可自行验证</span>  <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     constructor <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age      <span class="token punctuation">}</span>     logAge <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     constructor <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name      <span class="token punctuation">}</span>     logName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML小知识点</title>
      <link href="/2019/08/17/html-xiao-zhi-shi-dian/"/>
      <url>/2019/08/17/html-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p><a name="ecb9c6c4"></a></p><h4 id="html标签有几个可以逃过同源策略"><a href="#html标签有几个可以逃过同源策略" class="headerlink" title="html标签有几个可以逃过同源策略"></a>html标签有几个可以逃过同源策略</h4><link rel="stylesheet" type="text/css" href="*.css"><script><script><p><a name="5c0b237a"></a></p><h4 id="attribute和property有什么区别"><a href="#attribute和property有什么区别" class="headerlink" title="attribute和property有什么区别"></a>attribute和property有什么区别</h4><blockquote><p>attribute和property有什么区别</p></blockquote><p><a name="af33242e"></a></p><h4 id="img的title和alt有什么区别"><a href="#img的title和alt有什么区别" class="headerlink" title="img的title和alt有什么区别"></a>img的title和alt有什么区别</h4><blockquote><p>title是鼠标滑动到元素上时候显示<br>alt是img的特有属性，用于图片无法加载显示<br>提高了图片可访问性，搜索会重点分析alt</p></blockquote><p><a name="230236f0"></a></p><h4 id="什么是语义化"><a href="#什么是语义化" class="headerlink" title="什么是语义化"></a>什么是语义化</h4><blockquote><p>HTML5语义化标签是指正确的标签包含了正确的内容，结构良好，便于阅读<br>比如nav表示导航条，类似的还有article、header、footer等等标签。</p><ol><li>让人更容易读懂</li><li>让机器更容易读懂</li><li>有助于SEO</li></ol></blockquote><p><a name="39e82639"></a></p><h4 id="html5有哪些新特性"><a href="#html5有哪些新特性" class="headerlink" title="html5有哪些新特性"></a>html5有哪些新特性</h4><blockquote><p>主要是<code>图像    位置    存储    多任务</code><br>websocket<br>video和audio，绘画canvas<br>增加localStorage长期驻留浏览器, sessionStorage浏览器关闭就删除</p></blockquote><p><a name="NoUuk"></a></p><h4 id="html5离线存储怎么使用"><a href="#html5离线存储怎么使用" class="headerlink" title="html5离线存储怎么使用"></a>html5离线存储怎么使用</h4><blockquote><p>新建一个<code>.appcache文件缓存机制</code><br>里面有一份需要解析的清单，会被存储在本地<br>没网的时候显示这个就好了<br>具体的就是在<code>页面头部下加入一个manifest属性</code><br>在<code>里面编写需要存储的离线存储资源清单</code><br>在离线的时候，调用<code>window.applicationCache</code>就可以进行需求实现<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566027888125-814c370a-3094-4cba-8a0f-d624eec42798.jpeg#align=left&display=inline&height=127&originHeight=127&originWidth=160&size=0&status=done&width=160" alt=""></p></blockquote><p><a name="a43a2a9f"></a></p><h4 id="iframe有什么缺点"><a href="#iframe有什么缺点" class="headerlink" title="iframe有什么缺点"></a>iframe有什么缺点</h4><blockquote><p>定义：iframe元素会创建包含另一个文档的内联框架<br>可以将提示文字放在<iframe>之间，来提示某些不支持iframe的浏览器</p><ol><li>会阻塞页面的onload事件</li><li>不利于seo</li><li>会影响页面的并行加载，因为共享池问题对相同域的连接有限制</li></ol></blockquote><p><a name="a2c74cad"></a></p><h4 id="xhtml和html有什么区别"><a href="#xhtml和html有什么区别" class="headerlink" title="xhtml和html有什么区别"></a>xhtml和html有什么区别</h4><blockquote><p>功能上有差别，<code>xhtml有很好的兼容性</code><br>书写情况也有差别，xhtml更加严格必须被<code>严格嵌套，闭合和区分大小写</code>等<br>可以通过开头的Doctype来区分</p></blockquote><p><a name="e8d1f286"></a></p><h4 id="canvas和svg有什么区别"><a href="#canvas和svg有什么区别" class="headerlink" title="canvas和svg有什么区别"></a>canvas和svg有什么区别</h4><blockquote><p>svg绘制出来的<code>元素都可以作为独立的DOM节点</code>, 能够<code>绑定事件</code>,并且是<code>矢量图</code><br>canvas输出的是一张图, 不是矢量的</p></blockquote><p><a name="09b7f8ca"></a></p><h4 id="说一下HTML5-drag-api"><a href="#说一下HTML5-drag-api" class="headerlink" title="说一下HTML5 drag api"></a>说一下HTML5 drag api</h4><blockquote><p>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。<br>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。<br>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。<br>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。<br>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。<br>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。<br>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发</p></blockquote></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript小知识点(一)</title>
      <link href="/2019/08/17/javascript-xiao-zhi-shi-dian-yi/"/>
      <url>/2019/08/17/javascript-xiao-zhi-shi-dian-yi/</url>
      
        <content type="html"><![CDATA[<p><a name="ylXpL"></a></p><h4 id="promise有没有不能满足你需求的情况"><a href="#promise有没有不能满足你需求的情况" class="headerlink" title="promise有没有不能满足你需求的情况"></a><strong>promise有没有不能满足你需求的情况</strong></h4><p><em>有的, 就是在我需要等待一个事件完成后再进行下一步的时候才能做下一步的时候<br>之前我写牛客网本地JS编辑的时候就需要等待读取完成文件后再进行下一步返回数据, 但是如果使用的是Promise就会先返回undefined</em><br><em>使用await和async就可以解决</em><br><a name="HbIo8"></a></p><h4 id="“1”-“2”-“3”-map-parseInt-为何返回-1-NaN-NaN"><a href="#“1”-“2”-“3”-map-parseInt-为何返回-1-NaN-NaN" class="headerlink" title="[“1”, “2”, “3”].map(parseInt) 为何返回[1,NaN,NaN]"></a><a href="https://www.yuque.com/sansenlian/xwpnpg/gh3szc#HbIo8" target="_blank" rel="noopener"></a>[“1”, “2”, “3”].map(parseInt) 为何返回[1,NaN,NaN]</h4><p>:::tips<br>parseInt(<em>string</em>, <em>radix</em>)<br>map的回调函数的参数index索引值作了parseInt的基数radix，导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN<br>:::</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[1,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,9,11,13,15,17,19]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span>……<span class="token function">parseInt</span><span class="token punctuation">(</span>'<span class="token number">9</span>‘<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'14'</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'15'</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">19</span></code></pre><p><a name="OMs8U"></a></p><h4 id="map的参数"><a href="#map的参数" class="headerlink" title="map的参数"></a><a href="https://www.yuque.com/sansenlian/xwpnpg/gh3szc#OMs8U" target="_blank" rel="noopener"></a>map的参数</h4><p>array1.map(callbackfn[, thisArg])    如果省略thisArg，则 undefined 将用作this 值<br>其中function callbackfn(value, index, array)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常用语法</title>
      <link href="/2019/08/16/java-chang-yong-yu-fa/"/>
      <url>/2019/08/16/java-chang-yong-yu-fa/</url>
      
        <content type="html"><![CDATA[<p><a name="z2mW9"></a></p><h3 id="笔试用到的部分"><a href="#笔试用到的部分" class="headerlink" title="笔试用到的部分"></a>笔试用到的部分</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通用头部</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取</span>        String line <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去读一行</span>        <span class="token keyword">int</span> target <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取一个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>双向链表代替:  栈, 队列</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 双向链表代替:  栈, 队列</span>LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span>linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义数组</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加只能用count下标增长来</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr3<span class="token punctuation">;</span>arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr3 <span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转为数字</span></code></pre><p>动态数组</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态数组</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String li<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>数组排序</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 数组排序</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token operator">-</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map set hash</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// map set hash</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String <span class="token operator">>></span>mapMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>字符串与数组互转</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 字符串转数组</span>String str <span class="token operator">=</span> <span class="token string">"012345"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分割</span><span class="token comment" spellcheck="true">// 数组转字符串</span>StringBuffer str5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String s<span class="token operator">:</span> arr4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    str5<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String str6 <span class="token operator">=</span> str5<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str6<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 1, 2, 3, 4, 5]</span></code></pre><p>字符拼接</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符和对应的ASCII码（整数）可以互相转换</span>ThreadLocalRandom random <span class="token operator">=</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把三个字符拼接成一个字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先转成数字再转成字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转成字符串</span></code></pre><p>Math</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> max_value <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2147483647</span><span class="token keyword">int</span> min_value <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -2147483648</span><span class="token comment" spellcheck="true">// Math</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a name="tXL1l"></a></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><pre class=" language-java"><code class="language-java">         String str <span class="token operator">=</span> <span class="token string">"hello123"</span><span class="token punctuation">;</span>        String reg <span class="token operator">=</span> <span class="token string">"\\d+"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 看看有没有匹配结果, 返回bool, matches必须全匹配</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\D*\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        <span class="token comment" spellcheck="true">// 匹配的结果显示</span>        Pattern r <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher m <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*    System.out.println("group0: " + m.group(0) );            System.out.println("group1: " + m.group(1) );            System.out.println("group2: " + m.group(2) );            System.out.println("group3: " + m.group(3) ); */</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO MATCH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 字符串分割</span>        String str1 <span class="token operator">=</span> <span class="token string">"1 2 3    4 5"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" +"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String temp <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// helloman</span>        String tel <span class="token operator">=</span> <span class="token string">"13628123409"</span><span class="token punctuation">;</span>        String telReg <span class="token operator">=</span> <span class="token string">"1[358]\\d{9}"</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>telReg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++常用写法</title>
      <link href="/2019/08/16/c-chang-yong-xie-fa/"/>
      <url>/2019/08/16/c-chang-yong-xie-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP字符串匹配算法</title>
      <link href="/2019/08/14/kmp-zi-fu-chuan-pi-pei-suan-fa/"/>
      <url>/2019/08/14/kmp-zi-fu-chuan-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>:::tips<br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener">常见算法github地址——欢迎随手star</a><br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener"></a>:::</p><p>字符串A中找是否存在字符串B，当然前提A比B长</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1565768043850-3fe8617a-a825-49d8-b037-69046d425a54.png#align=left&display=inline&height=221&originHeight=221&originWidth=1340&size=0&status=done&width=1340" alt></p><p><img src="https://raw.githubusercontent.com/sansenlian/PicPlace/master/img/20190812102019.gif#align=left&alt=&display=inline&message=%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5%EF%BC%8C%E8%AF%B7%E9%87%8D%E8%AF%95&percent=0&status=uploading" alt><br>动图来自:<a href="https://blog.csdn.net/weixin_40346046/article/details/79468142" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40346046/article/details/79468142</a></p><p><a name="543c214e"></a></p><h2 id="next数组构建"><a href="#next数组构建" class="headerlink" title="next数组构建"></a>next数组构建</h2><p>next数组构建要求是找前缀表, 比如对于:    ababaa</p><table><thead><tr><th>下标</th><th>前缀表</th><th>目的:<code>找左右对称的长度</code>即next[]</th></tr></thead><tbody><tr><td>0 a</td><td>没有前缀</td><td>-1</td></tr><tr><td>1 b</td><td>a</td><td>0</td></tr><tr><td>2 a</td><td>ab</td><td>0</td></tr><tr><td>3 b</td><td><code>a</code>b<code>a</code></td><td>1</td></tr><tr><td>4 a</td><td><code>abab</code></td><td>2</td></tr><tr><td>5 a</td><td><code>ababa</code></td><td>3</td></tr></tbody></table><p>那么目的是找左右对称的长度，需要我每一个都进行对比计算吗，那不是非常费时间</p><p>其实不用的，可以通过类似斐波那契数的方式，通过上一层的计算来满足下一层的计算，通过动态规划的方式慢慢递增构建，具体举例：</p><p>总共三个角色:</p><ul><li>j:  一直向前移动的下标</li><li>K: 当前最长相等长度的下标</li><li>next数组: 当前数字前面所拥有的前缀的最长相等长度</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1565768042982-02698b87-77d9-469d-a675-95dc13b2169e.png#align=left&display=inline&height=494&originHeight=494&originWidth=932&size=0&status=done&width=932" alt></p><p><a name="X1KeB"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> next <span class="token operator">=</span> <span class="token function">getNextArr</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> hasyArr <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> needleArr <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> hasyArr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> hasyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needleArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> needleArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> getNextArr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nextStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> nextArr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> nextArrStr <span class="token operator">=</span> nextStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表前缀中当前最长对称的下表</span>    nextArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// j的值默认就在k的后面一位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nextArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果比较,值相等的话就往后移动一步,并且next数值+1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> nextArrStr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nextArrStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextArr<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不相等的话,就跳到前一个next数组进行继续比较</span>            k <span class="token operator">=</span> nextArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nextArr<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见算法github地址</title>
      <link href="/2019/08/14/chang-jian-suan-fa-github-di-zhi/"/>
      <url>/2019/08/14/chang-jian-suan-fa-github-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>:::tips<br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener">常见算法github地址——欢迎随手star</a><br>:::<br><a href="https://github.com/sansenlian/Algorithm" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法初级题解——数组</title>
      <link href="/2019/08/11/leetcode-suan-fa-chu-ji-ti-jie-shu-zu/"/>
      <url>/2019/08/11/leetcode-suan-fa-chu-ji-ti-jie-shu-zu/</url>
      
        <content type="html"><![CDATA[<p><a name="52690216"></a></p><h1 id="1-从排序数组中删除重复项"><a href="#1-从排序数组中删除重复项" class="headerlink" title="1. 从排序数组中删除重复项"></a>1. 从排序数组中删除重复项</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/21/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个排序数组，你需要在<strong>原地</strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong>原地修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例 1:</strong></p><pre><code>给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>示例 2:</strong></p><pre><code>给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>“引用”</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {    print(nums[i]);}</code></pre><p><a name="4b86211f"></a></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> removeDuplicates <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="93841778"></a></p><h1 id="2-买卖股票的最佳时机-II"><a href="#2-买卖股票的最佳时机-II" class="headerlink" title="2. 买卖股票的最佳时机 II"></a>2. 买卖股票的最佳时机 II</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/22/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-1"></a></p><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><pre><code>输入: [7,1,5,3,6,4]输出: 7解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre><p><a name="4b86211f-1"></a></p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} prices * @return {number} */</span><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>sum<span class="token operator">+</span><span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>sum<span class="token operator">=</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="c1440cea"></a></p><h1 id="3-旋转数组"><a href="#3-旋转数组" class="headerlink" title="3. 旋转数组"></a>3. 旋转数组</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/23/" target="_blank" rel="noopener">题目链接</a></p><p><a name="254dd6d2-2"></a></p><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个数组，将数组中的元素向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释: 向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100]</code></pre><p><strong>说明:</strong></p><ul><li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li><li>要求使用空间复杂度为 O(1) 的 <strong>原地</strong> 算法。</li></ul><p><a name="a4db8628"></a></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><blockquote><p>注意: 传入移动的距离需要做转换: <code>k%=nums.length</code></p></blockquote><p><a name="8a33dcfd"></a></p><h3 id="1-最快速的但是耗费空间的复制法"><a href="#1-最快速的但是耗费空间的复制法" class="headerlink" title="1. 最快速的但是耗费空间的复制法"></a>1. 最快速的但是耗费空间的复制法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="7defb30d"></a></p><h3 id="2-空间O-1-时间O-n-2-的插入法"><a href="#2-空间O-1-时间O-n-2-的插入法" class="headerlink" title="2. 空间O(1)时间O(n^2)的插入法"></a>2. 空间O(1)时间O(n^2)的插入法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 就是把5拿出来,然后前面的后移,5再插入到最前面</span>第一次移动： <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>第二次移动： <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>第三次移动： <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><p><a name="2acc902c"></a></p><h3 id="3-优秀的解法-翻转法"><a href="#3-优秀的解法-翻转法" class="headerlink" title="3. 优秀的解法: 翻转法"></a>3. 优秀的解法: <code>翻转法</code></h3><p>划分一个分界线, <code>写一个自旋转函数</code>, 然后左边自旋转下, 右边自旋转下</p><p>然后再整体旋转下</p><pre class=" language-javascript"><code class="language-javascript">第一次翻转： <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>第二次翻转： <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>第三次翻转： <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    k<span class="token operator">%</span><span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>len<span class="token operator">-</span>k<span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token operator">=</span> t<span class="token punctuation">;</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="6c527294"></a></p><h3 id="4-扩展数组法"><a href="#4-扩展数组法" class="headerlink" title="4. 扩展数组法"></a>4. 扩展数组法</h3><p>把数组double一下<code>存入一个新数组</code>: [1,2,3,4,5,6,7,1,2,3,4,5,6,7]</p><p>对新数组进行移动, 把值赋到旧数组</p><p><a name="b26cebd2"></a></p><h1 id="4-存在重复元素"><a href="#4-存在重复元素" class="headerlink" title="4. 存在重复元素"></a>4. 存在重复元素</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/24/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-3"></a></p><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3,1]输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [1,2,3,4]输出: false</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: [1,1,1,3,3,4,3,2,4,2]输出: true</code></pre><p><a name="a4db8628-1"></a></p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>用<code>indexOf</code>和<code>lastIndexOf</code>就可以解决</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> containsDuplicate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="36280f8b"></a></p><h1 id="5-只出现一次的数字"><a href="#5-只出现一次的数字" class="headerlink" title="5. 只出现一次的数字"></a>5. 只出现一次的数字</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/25/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-4"></a></p><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><strong>示例 1:</strong></p><pre><code>输入: [2,2,1]输出: 1</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [4,1,2,1,2]输出: 4</code></pre><p><a name="4b86211f-2"></a></p><h2 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h2><p>异或就ok, <code>异或或消去所有相同的数字</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> singleNumber <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">^</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f302ff13"></a></p><h1 id="6-两个数组的交集"><a href="#6-两个数组的交集" class="headerlink" title="6. 两个数组的交集"></a>6. 两个数组的交集</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/26/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-5"></a></p><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 1:</strong></p><pre><code>输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2,2]</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [4,9]</code></pre><p><strong>说明：</strong></p><ul><li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li><li>我们可以不考虑输出结果的顺序。</li></ul><p><strong>进阶:</strong></p><ul><li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li><li>如果 <em>nums1</em> 的大小比 <em>nums2</em> 小很多，哪种方法更优？</li><li>如果 <em>nums2</em> 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li></ul><p><a name="4b86211f-3"></a></p><h2 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h2><p><a name="81ab1549"></a></p><h3 id="1-用计数统计"><a href="#1-用计数统计" class="headerlink" title="1. 用计数统计"></a>1. 用计数统计</h3><p>对一个数组扫描一遍, 每个数字出现的次数加1</p><p>然后扫描另外一个数组, 看下在另一数组中次数是不是大于1, 是的话就减去1然后加入到结果数组中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> intersect <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> len2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span>            count<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> count<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f45d16e0"></a></p><h3 id="2-进阶问题"><a href="#2-进阶问题" class="headerlink" title="2. 进阶问题"></a>2. 进阶问题</h3><p><a href="https://www.cnblogs.com/zfLee/p/9332552.html" target="_blank" rel="noopener">看看这里</a></p><p><a name="9f0d33ca"></a></p><h1 id="7-加一"><a href="#7-加一" class="headerlink" title="7. 加一"></a>7. 加一</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/27/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-6"></a></p><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字 123。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字 4321。</code></pre><p><a name="4b86211f-4"></a></p><h2 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h2><p>用一个变量表示当前是否进位就好了</p><p><code>记得进位后自己那位置要变成0</code></p><p>如果到了数字首位还有进位的话就要拓展一位数字</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> plusOne <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span>  <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        carry<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len<span class="token number">-2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                carry<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> carry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>        nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="d3b84700"></a></p><h1 id="8-移动零"><a href="#8-移动零" class="headerlink" title="8. 移动零"></a>8. 移动零</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/28/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/28/</a></p><p><a name="254dd6d2-7"></a></p><h2 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>示例:</strong></p><pre><code>输入: [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><p><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p><a name="4b86211f-5"></a></p><h2 id="解决-5"><a href="#解决-5" class="headerlink" title="解决"></a>解决</h2><p>比较简单的就直接插入法</p><p>比较好的方法是记录当前有多少0, 然后后面的数字往前移动多少位</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> moveZeroes <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前位置往前移动count</span>            nums<span class="token punctuation">[</span>i<span class="token operator">-</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> len<span class="token operator">-</span>count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="f35a5ed6"></a></p><h1 id="9-两数之和"><a href="#9-两数之和" class="headerlink" title="9. 两数之和"></a>9. 两数之和</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/29/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/29/</a></p><p><a name="254dd6d2-8"></a></p><h2 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例:</strong></p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><p><a name="4b86211f-6"></a></p><h2 id="解决-6"><a href="#解决-6" class="headerlink" title="解决"></a>解决</h2><p>其实可以用<code>indexOf</code>解决, 但是这玩意时间复杂度甚至有时候都不如暴力</p><p><a name="15915030"></a></p><h3 id="1-冒泡解决"><a href="#1-冒泡解决" class="headerlink" title="1. 冒泡解决"></a>1. 冒泡解决</h3><p>直接用冒泡就好了,</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="3a4e286f"></a></p><h3 id="2-哈希表解决"><a href="#2-哈希表解决" class="headerlink" title="2. 哈希表解决"></a>2. 哈希表解决</h3><p>用哈希表存储, 快很多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _numsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _numsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cha <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_numsMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>_numsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token operator">!=</span>i<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>_numsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="593e53e1"></a></p><h1 id="10-有效的数独"><a href="#10-有效的数独" class="headerlink" title="10. 有效的数独"></a>10. 有效的数独</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/30/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-9"></a></p><h2 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h2><p>判断一个 9x9 的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134922580-69cb8a94-57fb-4f56-8627-3f271c90cb8c.png#align=left&display=inline&height=250&originHeight=250&originWidth=250&size=0&status=done&width=250" alt></p><p>上图是一个部分填充的有效的数独。</p><p>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</p><p><strong>示例 1:</strong></p><pre><code>输入:[  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出: true</code></pre><p><strong>示例 2:</strong></p><pre><code>输入:[  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出: false解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</code></pre><p><strong>说明:</strong></p><ul><li>一个有效的数独（部分已被填充）不一定是可解的。</li><li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li><li>给定数独序列只包含数字 <code>1-9</code> 和字符 <code>&#39;.&#39;</code> 。</li><li>给定数独永远是 <code>9x9</code> 形式的。</li></ul><p><a name="4b86211f-7"></a></p><h2 id="解决-7"><a href="#解决-7" class="headerlink" title="解决"></a>解决</h2><p>其实就是判断:</p><ul><li>行内有无重复</li><li>列有无重复</li><li>3*3有无重复</li></ul><blockquote><p>对于进阶问题: 判断9*9的数独是否有效, 是否可以构成完整的数独</p></blockquote><p><a name="80f35795"></a></p><h3 id="1-用哈希"><a href="#1-用哈希" class="headerlink" title="1. 用哈希"></a>1. 用哈希</h3><p>我把大的3*3理解为一个哈希区域</p><p>行列都用临时数组作为哈希存储就可以了</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134919521-919b1c6a-d761-46f0-a0b6-efd106e49d21.png#align=left&display=inline&height=342&originHeight=342&originWidth=800&size=0&status=done&width=800" alt></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isValidSudoku <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> colum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> _map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存入行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    row<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存入列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colum<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> colum<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存入3*3</span>            <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>_map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> _map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="00f15de9"></a></p><h1 id="11-旋转图像"><a href="#11-旋转图像" class="headerlink" title="11. 旋转图像"></a>11. 旋转图像</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/31/" target="_blank" rel="noopener">题目</a></p><p><a name="254dd6d2-10"></a></p><h2 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><p><strong>说明：</strong></p><p>你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p><p><strong>示例 1:</strong></p><pre><code>给定 matrix = [  [1,2,3],  [4,5,6],  [7,8,9]],原地旋转输入矩阵，使其变为:[  [7,4,1],  [8,5,2],  [9,6,3]]</code></pre><p><strong>示例 2:</strong></p><pre><code>给定 matrix =[  [ 5, 1, 9,11],  [ 2, 4, 8,10],  [13, 3, 6, 7],  [15,14,12,16]], 原地旋转输入矩阵，使其变为:[  [15,13, 2, 5],  [14, 3, 4, 1],  [12, 6, 8, 9],  [16, 7,10,11]]</code></pre><p><a name="4b86211f-8"></a></p><h2 id="解决-8"><a href="#解决-8" class="headerlink" title="解决"></a>解决</h2><p><a name="3375fd7a"></a></p><h3 id="1-按照规则把每个元素旋转一遍"><a href="#1-按照规则把每个元素旋转一遍" class="headerlink" title="1. 按照规则把每个元素旋转一遍"></a>1. 按照规则把每个元素旋转一遍</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134919003-9e3fe907-a39d-4523-9ccf-6a0d3645ba23.png#align=left&display=inline&height=174&originHeight=174&originWidth=196&size=0&status=done&width=196" alt></p><p>比如3*3矩阵, 看最外层定点循环有:</p><pre><code>[0][0] -&gt; [[0][2] -&gt; [2][2] -&gt; [2][0] -&gt; [0][0]</code></pre><p>除了顶点外的变有:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437349/1566134919471-2a8f5f5d-d9bf-49e5-a464-182de0bceed4.png#align=left&display=inline&height=192&originHeight=192&originWidth=223&size=0&status=done&width=223" alt></p><pre><code>[0][1] -&gt; [1][2] -&gt; [2][1] -&gt; [1][0] -&gt; [0][1]</code></pre><p>需要用一个变量来保存循环过程中的交换, 可以递推出<code>n行n列</code>公式为:</p><pre><code>[i][j] -&gt; [j][n-i-1] -&gt; [n-i-1][n-j-1] -&gt; [n-j-1][i] -&gt; [i][j]</code></pre><p>因为一般元素旋转了代表了另外一般也旋转了. 因此只要扫一遍<code>i到n/2就可以了</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> temp<span class="token punctuation">,</span> l <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span>      matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a name="de74cf0f"></a></p><h3 id="2-根据旋转数组的规则数学矩阵旋转"><a href="#2-根据旋转数组的规则数学矩阵旋转" class="headerlink" title="2. 根据旋转数组的规则数学矩阵旋转"></a>2. 根据旋转数组的规则<code>数学矩阵旋转</code></h3><p>可以通过转置矩阵, 然后再交换列就OK了<img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f646.svg#align=left&display=inline&height=18&originHeight=150&originWidth=150&status=done&width=18" alt>‍<img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/2642.svg#align=left&display=inline&height=18&originHeight=150&originWidth=150&status=done&width=18" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/437349/1566134920425-ef206336-624e-490b-8677-91f15e2ed122.jpeg#align=left&display=inline&height=500&originHeight=500&originWidth=1341&size=0&status=done&width=1341" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2019/08/11/wei-yun-suan/"/>
      <url>/2019/08/11/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<p><a name="wvvot"></a></p><h4 id="必备部分"><a href="#必备部分" class="headerlink" title="必备部分"></a>必备部分</h4><pre class=" language-javascript"><code class="language-javascript">s <span class="token operator">&lt;</span><span class="token operator">&lt;</span> n                                 <span class="token comment" spellcheck="true">// 乘以 2</span>s <span class="token operator">></span><span class="token operator">></span> n                                 <span class="token comment" spellcheck="true">// 除以 2</span>s <span class="token operator">&amp;</span> t                                 <span class="token comment" spellcheck="true">// 交集</span>s <span class="token operator">|</span> t                                 <span class="token comment" spellcheck="true">// 并集</span>x <span class="token operator">=</span> x <span class="token operator">^</span> y <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> x<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 交换</span>s <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>s<span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">// 取出最小非 0 位</span><span class="token comment" spellcheck="true">// 加号操作可能造成溢出, 因此不建议使用mid = (left + right)>>1</span>mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 异或去重</span><span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token operator">^</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token number">6</span> <span class="token operator">^</span> <span class="token number">6</span> <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span></code></pre><p><a name="7lnyn"></a></p><h4 id="针对第K位操作"><a href="#针对第K位操作" class="headerlink" title="针对第K位操作"></a>针对第K位操作</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 翻转数的第K位</span>num <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将第K位设为0, 与上自己相反的</span>num <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将第K位设为1, 因为|第K位置只要有1就肯定是1</span>num <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> K<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断第K位是否为0, 因为1与1相与为1, 与0相与为</span>num <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>s <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 测试第 k 位</span>s <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置第 k 位</span>s <span class="token operator">^</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 切换第 k 位值</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
